
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, ex
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this proj
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, ex
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announc
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announc
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announc
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of Page 2 of 2
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announc
illustration of your method, implementation, and the performance-study with discussion in
your report.Page 2 of 2
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announc
illustration of your method, implementation, and the performance-study with discussion in
your report.Page 2 of 2
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announc
illustration of your method, implementation, and the performance-study with discussion in
your report.Page 2 of 2
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announc
illustration of your method, implementation, and the performance-study with discussion in
your report.Page 2 of 2
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announc
illustration of your method, implementation, and the performance-study with discussion in
your report.Page 2 of 2
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, ex
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announc
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announc
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announc
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of Page 2 of 2
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announc
illustration of your method, implementation, and the performance-study with discussion in
your report.Page 2 of 2
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announc
illustration of your method, implementation, and the performance-study with discussion in
your report.Page 2 of 2
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announc
illustration of your method, implementation, and the performance-study with discussion in
your report.Page 2 of 2
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announc
illustration of your method, implementation, and the performance-study with discussion in
your report.Page 2 of 2
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announc
illustration of your method, implementation, and the performance-study with discussion in
your report.Page 2 of 2
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, ex
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announc
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announc
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announc
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of Page 2 of 2
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announc
illustration of your method, implementation, and the performance-study with discussion in
your report.Page 2 of 2
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announc
illustration of your method, implementation, and the performance-study with discussion in
your report.Page 2 of 2
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announc
illustration of your method, implementation, and the performance-study with discussion in
your report.Page 2 of 2
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announc
illustration of your method, implementation, and the performance-study with discussion in
your report.Page 2 of 2
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announc
illustration of your method, implementation, and the performance-study with discussion in
your report.Page 2 of 2
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, ex
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announc
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announc
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announc
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of Page 2 of 2
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announc
illustration of your method, implementation, and the performance-study with discussion in
your report.Page 2 of 2
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announc
illustration of your method, implementation, and the performance-study with discussion in
your report.Page 2 of 2
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announc
illustration of your method, implementation, and the performance-study with discussion in
your report.Page 2 of 2
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announc
illustration of your method, implementation, and the performance-study with discussion in
your report.Page 2 of 2
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, ex
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announc
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announc
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announc
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their  Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.

Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week an
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.rotocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method tofff
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to therotocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announc
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announc
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announc
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of Page 2 of 2
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announc
illustration of your method, implementation, and the performance-study with discussion in
your report.Page 2 of 2
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announc
illustration of your method, implementation, and the performance-study with discussion in
your report.Page 2 of 2
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announc
illustration of your method, implementation, and the performance-study with discussion in
your report.Page 2 of 2
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announc
illustration of your method, implementation, and the performance-study with discussion in
your report.Page 2 of 2
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announc
illustration of your method, implementation, and the performance-study with discussion in
your report.Page 2 of 2
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announc
illustration of your method, implementation, and the performance-study with discussion in
your report.this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announc
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announc
DEMO (part-I and part-II): after 16 Sep (to be announc
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announc
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announc
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announcample-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announced later)
Report submission (not more than 10 pages for Part-I and Part-II): at the DEMO
Marks: Part-I = 60% and Part-II = 40% (based on the DEMO and the report)
Example-Problems (Solutions given)
1. Develop a socket program in UNIX/Linux that uses (i) TCP as the transport protocol and
(ii) UDP as the transport protocol for transferring a short message between a client and
server. The client sends a string (input by the user) to the server and the server prints the
string on the screen after receiving it.
2. Develop a TCP-based client-server socket program for transferring a large message. The
message transmitted from the client to server is read from a large file (size is about 30000
bytes). The entire message is sent by the client as a single data-unit. After receiving the
file, the server sends an ACK message to the receiver. Verify that the file has been sent
completely and correctly by comparing the received file with the original file (“diff”
command could be used). Measure the message transfer time and throughput.
3. This problem is similar to problem (2) above, but the message is split into short data-units
which are sent one by one without waiting for any acknowledgement between
transmissions of two successive data-units. Verify that the file has been sent completely
and correctly by comparing the received file with the original file. Measure the message
Page 1 of 2transfer time and throughput. Repeat it for different (at least six) data-unit sizes (say, from
100 bytes to 1000 bytes).
4. This problem is similar to problem (3) above, but it uses UDP as the transport protocol.
5. This problem is similar to problem (4) above, but the file is transferred using stop-and-
wait flow control protocol.
Project Assignment
Part-I
A hypothetical reliable data transfer protocol: A jumping window based Go-back-N
ARQ protocol for file transfer using UDP
In this protocol, a window of size W is used. The sender continuously sends W packets
corresponding to the current window, and then waits for an acknowledgement. The
receiver receives W packets. If all the packets are error-free, it sends out a positive
acknowledgement, say RR-i (RR: Receiver Ready). The receiver then moves its window
starting from the packet with the sequence number i. Upon receiving RR-i the sender
moves its window starting from the packet with the sequence number i. If a receiver
receives a damaged packet (say, with the sequence number j) in its current window, it
receives and discards all the remaining packets in the current window and it sends out a
negative acknowledgement, say REJ-j (REJ: Reject). The receiver then moves its window
starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2CO318 - Systems and Network Programming Lab and Project II
Semester 6, Aug-Sep 2014
Project II: Developing a reliable data transfer protocol for computer networks
and investigating its performance
Project Details:
In this project, you are required to develop a hypothetical reliable data transfer protocol for
computer networks (using socket programming with C or other language) and to investigate its
performance. That is, you will be building a simulator for the reliable data transfer protocol,
which can be used for investigating its performance.
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announced later)
Report submission (not more than 10 pages for Part-I and Part-II): at the DEMO
Marks: Part-I = 60% and Part-II = 40% (based on the DEMO and the report)
Example-Problems (Solutions given)
1. Develop a socket program in UNIX/Linux that uses (i) TCP as the transport protocol and
(ii) UDP as the transport protocol for transferring a short message between a client and
server. The client sends a string (input by the user) to the server and the server prints the
string on the screen after receiving it.
2. Develop a TCP-based client-server socket program for transferring a large message. The
message transmitted from the client to server is read from a large file (size is about 30000
bytes). The entire message is sent by the client as a single data-unit. After receiving the
file, the server sends an ACK message to the receiver. Verify that the file has been sent
completely and correctly by comparing the received file with the original file (“diff”
command could be used). Measure the message transfer time and throughput.
3. This problem is similar to problem (2) above, but the message is split into short data-units
which are sent one by one without waiting for any acknowledgement between
transmissions of two successive data-units. Verify that the file has been sent completely
and correctly by comparing the received file with the original file. Measure the message
Page 1 of 2transfer time and throughput. Repeat it for different (at least six) data-unit sizes (say, from
100 bytes to 1000 bytes).
4. This problem is similar to problem (3) above, but it uses UDP as the transport protocol.
5. This problem is similar to problem (4) above, but the file is transferred using stop-and-
wait flow control protocol.
Project Assignment
Part-I
A hypothetical reliable data transfer protocol: A jumping window based Go-back-N
ARQ protocol for file transfer using UDP
In this protocol, a window of size W is used. The sender continuously sends W packets
corresponding to the current window, and then waits for an acknowledgement. The
receiver receives W packets. If all the packets are error-free, it sends out a positive
acknowledgement, say RR-i (RR: Receiver Ready). The receiver then moves its window
starting from the packet with the sequence number i. Upon receiving RR-i the sender
moves its window starting from the packet with the sequence number i. If a receiver
receives a damaged packet (say, with the sequence number j) in its current window, it
receives and discards all the remaining packets in the current window and it sends out a
negative acknowledgement, say REJ-j (REJ: Reject). The receiver then moves its window
starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2CO318 - Systems and Network Programming Lab and Project II
Semester 6, Aug-Sep 2014
Project II: Developing a reliable data transfer protocol for computer networks
and investigating its performance
Project Details:
In this project, you are required to develop a hypothetical reliable data transfer protocol for
computer networks (using socket programming with C or other language) and to investigate its
performance. That is, you will be building a simulator for the reliable data transfer protocol,
which can be used for investigating its performance.
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announced later)
Report submission (not more than 10 pages for Part-I and Part-II): at the DEMO
Marks: Part-I = 60% and Part-II = 40% (based on the DEMO and the report)
Example-Problems (Solutions given)
1. Develop a socket program in UNIX/Linux that uses (i) TCP as the transport protocol and
(ii) UDP as the transport protocol for transferring a short message between a client and
server. The client sends a string (input by the user) to the server and the server prints the
string on the screen after receiving it.
2. Develop a TCP-based client-server socket program for transferring a large message. The
message transmitted from the client to server is read from a large file (size is about 30000
bytes). The entire message is sent by the client as a single data-unit. After receiving the
file, the server sends an ACK message to the receiver. Verify that the file has been sent
completely and correctly by comparing the received file with the original file (“diff”
command could be used). Measure the message transfer time and throughput.
3. This problem is similar to problem (2) above, but the message is split into short data-units
which are sent one by one without waiting for any acknowledgement between
transmissions of two successive data-units. Verify that the file has been sent completely
and correctly by comparing the received file with the original file. Measure the message
Page 1 of 2transfer time and throughput. Repeat it for different (at least six) data-unit sizes (say, from
100 bytes to 1000 bytes).
4. This problem is similar to problem (3) above, but it uses UDP as the transport protocol.
5. This problem is similar to problem (4) above, but the file is transferred using stop-and-
wait flow control protocol.
Project Assignment
Part-I
A hypothetical reliable data transfer protocol: A jumping window based Go-back-N
ARQ protocol for file transfer using UDP
In this protocol, a window of size W is used. The sender continuously sends W packets
corresponding to the current window, and then waits for an acknowledgement. The
receiver receives W packets. If all the packets are error-free, it sends out a positive
acknowledgement, say RR-i (RR: Receiver Ready). The receiver then moves its window
starting from the packet with the sequence number i. Upon receiving RR-i the sender
moves its window starting from the packet with the sequence number i. If a receiver
receives a damaged packet (say, with the sequence number j) in its current window, it
receives and discards all the remaining packets in the current window and it sends out a
negative acknowledgement, say REJ-j (REJ: Reject). The receiver then moves its window
starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announced later)
Report submission (not more than 10 pages for Part-I and Part-II): at the DEMO
Marks: Part-I = 60% and Part-II = 40% (based on the DEMO and the report)
Example-Problems (Solutions given)
1. Develop a socket program in UNIX/Linux that uses (i) TCP as the transport protocol and
(ii) UDP as the transport protocol for transferring a short message between a client and
server. The client sends a string (input by the user) to the server and the server prints the
string on the screen after receiving it.
2. Develop a TCP-based client-server socket program for transferring a large message. The
message transmitted from the client to server is read from a large file (size is about 30000
bytes). The entire message is sent by the client as a single data-unit. After receiving the
file, the server sends an ACK message to the receiver. Verify that the file has been sent
completely and correctly by comparing the received file with the original file (“diff”
command could be used). Measure the message transfer time and throughput.
3. This problem is similar to problem (2) above, but the message is split into short data-units
which are sent one by one without waiting for any acknowledgement between
transmissions of two successive data-units. Verify that the file has been sent completely
and correctly by comparing the received file with the original file. Measure the message
Page 1 of 2transfer time and throughput. Repeat it for different (at least six) data-unit sizes (say, from
100 bytes to 1000 bytes).
4. This problem is similar to problem (3) above, but it uses UDP as the transport protocol.
5. This problem is similar to problem (4) above, but the file is transferred using stop-and-
wait flow control protocol.
Project Assignment
Part-I
A hypothetical reliable data transfer protocol: A jumping window based Go-back-N
ARQ protocol for file transfer using UDP
In this protocol, a window of size W is used. The sender continuously sends W packets
corresponding to the current window, and then waits for an acknowledgement. The
receiver receives W packets. If all the packets are error-free, it sends out a positive
acknowledgement, say RR-i (RR: Receiver Ready). The receiver then moves its window
starting from the packet with the sequence number i. Upon receiving RR-i the sender
moves its window starting from the packet with the sequence number i. If a receiver
receives a damaged packet (say, with the sequence number j) in its current window, it
receives and discards all the remaining packets in the current window and it sends out a
negative acknowledgement, say REJ-j (REJ: Reject). The receiver then moves its window
starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2CO318 - Systems and Network Programming Lab and Project II
Semester 6, Aug-Sep 2014
Project II: Developing a reliable data transfer protocol for computer networks
and investigating its performance
Project Details:
In this project, you are required to develop a hypothetical reliable data transfer protocol for
computer networks (using socket programming with C or other language) and to investigate its
performance. That is, you will be building a simulator for the reliable data transfer protocol,
which can be used for investigating its performance.
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announced later)
Report submission (not more than 10 pages for Part-I and Part-II): at the DEMO
Marks: Part-I = 60% and Part-II = 40% (based on the DEMO and the report)
Example-Problems (Solutions given)
1. Develop a socket program in UNIX/Linux that uses (i) TCP as the transport protocol and
(ii) UDP as the transport protocol for transferring a short message between a client and
server. The client sends a string (input by the user) to the server and the server prints the
string on the screen after receiving it.
2. Develop a TCP-based client-server socket program for transferring a large message. The
message transmitted from the client to server is read from a large file (size is about 30000
bytes). The entire message is sent by the client as a single data-unit. After receiving the
file, the server sends an ACK message to the receiver. Verify that the file has been sent
completely and correctly by comparing the received file with the original file (“diff”
command could be used). Measure the message transfer time and throughput.
3. This problem is similar to problem (2) above, but the message is split into short data-units
which are sent one by one without waiting for any acknowledgement between
transmissions of two successive data-units. Verify that the file has been sent completely
and correctly by comparing the received file with the original file. Measure the message
Page 1 of 2transfer time and throughput. Repeat it for different (at least six) data-unit sizes (say, from
100 bytes to 1000 bytes).
4. This problem is similar to problem (3) above, but it uses UDP as the transport protocol.
5. This problem is similar to problem (4) above, but the file is transferred using stop-and-
wait flow control protocol.
Project Assignment
Part-I
A hypothetical reliable data transfer protocol: A jumping window based Go-back-N
ARQ protocol for file transfer using UDP
In this protocol, a window of size W is used. The sender continuously sends W packets
corresponding to the current window, and then waits for an acknowledgement. The
receiver receives W packets. If all the packets are error-free, it sends out a positive
acknowledgement, say RR-i (RR: Receiver Ready). The receiver then moves its window
starting from the packet with the sequence number i. Upon receiving RR-i the sender
moves its window starting from the packet with the sequence number i. If a receiver
receives a damaged packet (say, with the sequence number j) in its current window, it
receives and discards all the remaining packets in the current window and it sends out a
negative acknowledgement, say REJ-j (REJ: Reject). The receiver then moves its window
starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2CO318 - Systems and Network Programming Lab and Project II
Semester 6, Aug-Sep 2014
Project II: Developing a reliable data transfer protocol for computer networks
and investigating its performance
Project Details:
In this project, you are required to develop a hypothetical reliable data transfer protocol for
computer networks (using socket programming with C or other language) and to investigate its
performance. That is, you will be building a simulator for the reliable data transfer protocol,
which can be used for investigating its performance.
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announced later)
Report submission (not more than 10 pages for Part-I and Part-II): at the DEMO
Marks: Part-I = 60% and Part-II = 40% (based on the DEMO and the report)
Example-Problems (Solutions given)
1. Develop a socket program in UNIX/Linux that uses (i) TCP as the transport protocol and
(ii) UDP as the transport protocol for transferring a short message between a client and
server. The client sends a string (input by the user) to the server and the server prints the
string on the screen after receiving it.
2. Develop a TCP-based client-server socket program for transferring a large message. The
message transmitted from the client to server is read from a large file (size is about 30000
bytes). The entire message is sent by the client as a single data-unit. After receiving the
file, the server sends an ACK message to the receiver. Verify that the file has been sent
completely and correctly by comparing the received file with the original file (“diff”
command could be used). Measure the message transfer time and throughput.
3. This problem is similar to problem (2) above, but the message is split into short data-units
which are sent one by one without waiting for any acknowledgement between
transmissions of two successive data-units. Verify that the file has been sent completely
and correctly by comparing the received file with the original file. Measure the message
Page 1 of 2transfer time and throughput. Repeat it for different (at least six) data-unit sizes (say, from
100 bytes to 1000 bytes).
4. This problem is similar to problem (3) above, but it uses UDP as the transport protocol.
5. This problem is similar to problem (4) above, but the file is transferred using stop-and-
wait flow control protocol.
Project Assignment
Part-I
A hypothetical reliable data transfer protocol: A jumping window based Go-back-N
ARQ protocol for file transfer using UDP
In this protocol, a window of size W is used. The sender continuously sends W packets
corresponding to the current window, and then waits for an acknowledgement. The
receiver receives W packets. If all the packets are error-free, it sends out a positive
acknowledgement, say RR-i (RR: Receiver Ready). The receiver then moves its window
starting from the packet with the sequence number i. Upon receiving RR-i the sender
moves its window starting from the packet with the sequence number i. If a receiver
receives a damaged packet (say, with the sequence number j) in its current window, it
receives and discards all the remaining packets in the current window and it sends out a
negative acknowledgement, say REJ-j (REJ: Reject). The receiver then moves its window
starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announced later)
Report submission (not more than 10 pages for Part-I and Part-II): at the DEMO
Marks: Part-I = 60% and Part-II = 40% (based on the DEMO and the report)
Example-Problems (Solutions given)
1. Develop a socket program in UNIX/Linux that uses (i) TCP as the transport protocol and
(ii) UDP as the transport protocol for transferring a short message between a client and
server. The client sends a string (input by the user) to the server and the server prints the
string on the screen after receiving it.
2. Develop a TCP-based client-server socket program for transferring a large message. The
message transmitted from the client to server is read from a large file (size is about 30000
bytes). The entire message is sent by the client as a single data-unit. After receiving the
file, the server sends an ACK message to the receiver. Verify that the file has been sent
completely and correctly by comparing the received file with the original file (“diff”
command could be used). Measure the message transfer time and throughput.
3. This problem is similar to problem (2) above, but the message is split into short data-units
which are sent one by one without waiting for any acknowledgement between
transmissions of two successive data-units. Verify that the file has been sent completely
and correctly by comparing the received file with the original file. Measure the message
Page 1 of 2transfer time and throughput. Repeat it for different (at least six) data-unit sizes (say, from
100 bytes to 1000 bytes).
4. This problem is similar to problem (3) above, but it uses UDP as the transport protocol.
5. This problem is similar to problem (4) above, but the file is transferred using stop-and-
wait flow control protocol.
Project Assignment
Part-I
A hypothetical reliable data transfer protocol: A jumping window based Go-back-N
ARQ protocol for file transfer using UDP
In this protocol, a window of size W is used. The sender continuously sends W packets
corresponding to the current window, and then waits for an acknowledgement. The
receiver receives W packets. If all the packets are error-free, it sends out a positive
acknowledgement, say RR-i (RR: Receiver Ready). The receiver then moves its window
starting from the packet with the sequence number i. Upon receiving RR-i the sender
moves its window starting from the packet with the sequence number i. If a receiver
receives a damaged packet (say, with the sequence number j) in its current window, it
receives and discards all the remaining packets in the current window and it sends out a
negative acknowledgement, say REJ-j (REJ: Reject). The receiver then moves its window
starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2CO318 - Systems and Network Programming Lab and Project II
Semester 6, Aug-Sep 2014
Project II: Developing a reliable data transfer protocol for computer networks
and investigating its performance
Project Details:
In this project, you are required to develop a hypothetical reliable data transfer protocol for
computer networks (using socket programming with C or other language) and to investigate its
performance. That is, you will be building a simulator for the reliable data transfer protocol,
which can be used for investigating its performance.
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announced later)
Report submission (not more than 10 pages for Part-I and Part-II): at the DEMO
Marks: Part-I = 60% and Part-II = 40% (based on the DEMO and the report)
Example-Problems (Solutions given)
1. Develop a socket program in UNIX/Linux that uses (i) TCP as the transport protocol and
(ii) UDP as the transport protocol for transferring a short message between a client and
server. The client sends a string (input by the user) to the server and the server prints the
string on the screen after receiving it.
2. Develop a TCP-based client-server socket program for transferring a large message. The
message transmitted from the client to server is read from a large file (size is about 30000
bytes). The entire message is sent by the client as a single data-unit. After receiving the
file, the server sends an ACK message to the receiver. Verify that the file has been sent
completely and correctly by comparing the received file with the original file (“diff”
command could be used). Measure the message transfer time and throughput.
3. This problem is similar to problem (2) above, but the message is split into short data-units
which are sent one by one without waiting for any acknowledgement between
transmissions of two successive data-units. Verify that the file has been sent completely
and correctly by comparing the received file with the original file. Measure the message
Page 1 of 2transfer time and throughput. Repeat it for different (at least six) data-unit sizes (say, from
100 bytes to 1000 bytes).
4. This problem is similar to problem (3) above, but it uses UDP as the transport protocol.
5. This problem is similar to problem (4) above, but the file is transferred using stop-and-
wait flow control protocol.
Project Assignment
Part-I
A hypothetical reliable data transfer protocol: A jumping window based Go-back-N
ARQ protocol for file transfer using UDP
In this protocol, a window of size W is used. The sender continuously sends W packets
corresponding to the current window, and then waits for an acknowledgement. The
receiver receives W packets. If all the packets are error-free, it sends out a positive
acknowledgement, say RR-i (RR: Receiver Ready). The receiver then moves its window
starting from the packet with the sequence number i. Upon receiving RR-i the sender
moves its window starting from the packet with the sequence number i. If a receiver
receives a damaged packet (say, with the sequence number j) in its current window, it
receives and discards all the remaining packets in the current window and it sends out a
negative acknowledgement, say REJ-j (REJ: Reject). The receiver then moves its window
starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2CO318 - Systems and Network Programming Lab and Project II
Semester 6, Aug-Sep 2014
Project II: Developing a reliable data transfer protocol for computer networks
and investigating its performance
Project Details:
In this project, you are required to develop a hypothetical reliable data transfer protocol for
computer networks (using socket programming with C or other language) and to investigate its
performance. That is, you will be building a simulator for the reliable data transfer protocol,
which can be used for investigating its performance.
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announced later)
Report submission (not more than 10 pages for Part-I and Part-II): at the DEMO
Marks: Part-I = 60% and Part-II = 40% (based on the DEMO and the report)
Example-Problems (Solutions given)
1. Develop a socket program in UNIX/Linux that uses (i) TCP as the transport protocol and
(ii) UDP as the transport protocol for transferring a short message between a client and
server. The client sends a string (input by the user) to the server and the server prints the
string on the screen after receiving it.
2. Develop a TCP-based client-server socket program for transferring a large message. The
message transmitted from the client to server is read from a large file (size is about 30000
bytes). The entire message is sent by the client as a single data-unit. After receiving the
file, the server sends an ACK message to the receiver. Verify that the file has been sent
completely and correctly by comparing the received file with the original file (“diff”
command could be used). Measure the message transfer time and throughput.
3. This problem is similar to problem (2) above, but the message is split into short data-units
which are sent one by one without waiting for any acknowledgement between
transmissions of two successive data-units. Verify that the file has been sent completely
and correctly by comparing the received file with the original file. Measure the message
Page 1 of 2transfer time and throughput. Repeat it for different (at least six) data-unit sizes (say, from
100 bytes to 1000 bytes).
4. This problem is similar to problem (3) above, but it uses UDP as the transport protocol.
5. This problem is similar to problem (4) above, but the file is transferred using stop-and-
wait flow control protocol.
Project Assignment
Part-I
A hypothetical reliable data transfer protocol: A jumping window based Go-back-N
ARQ protocol for file transfer using UDP
In this protocol, a window of size W is used. The sender continuously sends W packets
corresponding to the current window, and then waits for an acknowledgement. The
receiver receives W packets. If all the packets are error-free, it sends out a positive
acknowledgement, say RR-i (RR: Receiver Ready). The receiver then moves its window
starting from the packet with the sequence number i. Upon receiving RR-i the sender
moves its window starting from the packet with the sequence number i. If a receiver
receives a damaged packet (say, with the sequence number j) in its current window, it
receives and discards all the remaining packets in the current window and it sends out a
negative acknowledgement, say REJ-j (REJ: Reject). The receiver then moves its window
starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announced later)
Report submission (not more than 10 pages for Part-I and Part-II): at the DEMO
Marks: Part-I = 60% and Part-II = 40% (based on the DEMO and the report)
Example-Problems (Solutions given)
1. Develop a socket program in UNIX/Linux that uses (i) TCP as the transport protocol and
(ii) UDP as the transport protocol for transferring a short message between a client and
server. The client sends a string (input by the user) to the server and the server prints the
string on the screen after receiving it.
2. Develop a TCP-based client-server socket program for transferring a large message. The
message transmitted from the client to server is read from a large file (size is about 30000
bytes). The entire message is sent by the client as a single data-unit. After receiving the
file, the server sends an ACK message to the receiver. Verify that the file has been sent
completely and correctly by comparing the received file with the original file (“diff”
command could be used). Measure the message transfer time and throughput.
3. This problem is similar to problem (2) above, but the message is split into short data-units
which are sent one by one without waiting for any acknowledgement between
transmissions of two successive data-units. Verify that the file has been sent completely
and correctly by comparing the received file with the original file. Measure the message
Page 1 of 2transfer time and throughput. Repeat it for different (at least six) data-unit sizes (say, from
100 bytes to 1000 bytes).
4. This problem is similar to problem (3) above, but it uses UDP as the transport protocol.
5. This problem is similar to problem (4) above, but the file is transferred using stop-and-
wait flow control protocol.
Project Assignment
Part-I
A hypothetical reliable data transfer protocol: A jumping window based Go-back-N
ARQ protocol for file transfer using UDP
In this protocol, a window of size W is used. The sender continuously sends W packets
corresponding to the current window, and then waits for an acknowledgement. The
receiver receives W packets. If all the packets are error-free, it sends out a positive
acknowledgement, say RR-i (RR: Receiver Ready). The receiver then moves its window
starting from the packet with the sequence number i. Upon receiving RR-i the sender
moves its window starting from the packet with the sequence number i. If a receiver
receives a damaged packet (say, with the sequence number j) in its current window, it
receives and discards all the remaining packets in the current window and it sends out a
negative acknowledgement, say REJ-j (REJ: Reject). The receiver then moves its window
starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2he packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2CO318 - Systems and Network Programming Lab and Project II
Semester 6, Aug-Sep 2014
Project II: Developing a reliable data transfer protocol for computer networks
and investigating its performance
Project Details:
In this project, you are required to develop a hypothetical reliable data transfer protocol for
computer networks (using socket programming with C or other language) and to investigate its
performance. That is, you will be building a simulator for the reliable data transfer protocol,
which can be used for investigating its performance.
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announced later)
Report submission (not more than 10 pages for Part-I and Part-II): at the DEMO
Marks: Part-I = 60% and Part-II = 40% (based on the DEMO and the report)
Example-Problems (Solutions given)
1. Develop a socket program in UNIX/Linux that uses (i) TCP as the transport protocol and
(ii) UDP as the transport protocol for transferring a short message between a client and
server. The client sends a string (input by the user) to the server and the server prints the
string on the screen after receiving it.
2. Develop a TCP-based client-server socket program for transferring a large message. The
message transmitted from the client to server is read from a large file (size is about 30000
bytes). The entire message is sent by the client as a single data-unit. After receiving the
file, the server sends an ACK message to the receiver. Verify that the file has been sent
completely and correctly by comparing the received file with the original file (“diff”
command could be used). Measure the message transfer time and throughput.
3. This problem is similar to problem (2) above, but the message is split into short data-units
which are sent one by one without waiting for any acknowledgement between
transmissions of two successive data-units. Verify that the file has been sent completely
and correctly by comparing the received file with the original file. Measure the message
Page 1 of 2transfer time and throughput. Repeat it for different (at least six) data-unit sizes (say, from
100 bytes to 1000 bytes).
4. This problem is similar to problem (3) above, but it uses UDP as the transport protocol.
5. This problem is similar to problem (4) above, but the file is transferred using stop-and-
wait flow control protocol.
Project Assignment
Part-I
A hypothetical reliable data transfer protocol: A jumping window based Go-back-N
ARQ protocol for file transfer using UDP
In this protocol, a window of size W is used. The sender continuously sends W packets
corresponding to the current window, and then waits for an acknowledgement. The
receiver receives W packets. If all the packets are error-free, it sends out a positive
acknowledgement, say RR-i (RR: Receiver Ready). The receiver then moves its window
starting from the packet with the sequence number i. Upon receiving RR-i the sender
moves its window starting from the packet with the sequence number i. If a receiver
receives a damaged packet (say, with the sequence number j) in its current window, it
receives and discards all the remaining packets in the current window and it sends out a
negative acknowledgement, say REJ-j (REJ: Reject). The receiver then moves its window
starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2CO318 - Systems and Network Programming Lab and Project II
Semester 6, Aug-Sep 2014
Project II: Developing a reliable data transfer protocol for computer networks
and investigating its performance
Project Details:
In this project, you are required to develop a hypothetical reliable data transfer protocol for
computer networks (using socket programming with C or other language) and to investigate its
performance. That is, you will be building a simulator for the reliable data transfer protocol,
which can be used for investigating its performance.
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announced later)
Report submission (not more than 10 pages for Part-I and Part-II): at the DEMO
Marks: Part-I = 60% and Part-II = 40% (based on the DEMO and the report)
Example-Problems (Solutions given)
1. Develop a socket program in UNIX/Linux that uses (i) TCP as the transport protocol and
(ii) UDP as the transport protocol for transferring a short message between a client and
server. The client sends a string (input by the user) to the server and the server prints the
string on the screen after receiving it.
2. Develop a TCP-based client-server socket program for transferring a large message. The
message transmitted from the client to server is read from a large file (size is about 30000
bytes). The entire message is sent by the client as a single data-unit. After receiving the
file, the server sends an ACK message to the receiver. Verify that the file has been sent
completely and correctly by comparing the received file with the original file (“diff”
command could be used). Measure the message transfer time and throughput.
3. This problem is similar to problem (2) above, but the message is split into short data-units
which are sent one by one without waiting for any acknowledgement between
transmissions of two successive data-units. Verify that the file has been sent completely
and correctly by comparing the received file with the original file. Measure the message
Page 1 of 2transfer time and throughput. Repeat it for different (at least six) data-unit sizes (say, from
100 bytes to 1000 bytes).
4. This problem is similar to problem (3) above, but it uses UDP as the transport protocol.
5. This problem is similar to problem (4) above, but the file is transferred using stop-and-
wait flow control protocol.
Project Assignment
Part-I
A hypothetical reliable data transfer protocol: A jumping window based Go-back-N
ARQ protocol for file transfer using UDP
In this protocol, a window of size W is used. The sender continuously sends W packets
corresponding to the current window, and then waits for an acknowledgement. The
receiver receives W packets. If all the packets are error-free, it sends out a positive
acknowledgement, say RR-i (RR: Receiver Ready). The receiver then moves its window
starting from the packet with the sequence number i. Upon receiving RR-i the sender
moves its window starting from the packet with the sequence number i. If a receiver
receives a damaged packet (say, with the sequence number j) in its current window, it
receives and discards all the remaining packets in the current window and it sends out a
negative acknowledgement, say REJ-j (REJ: Reject). The receiver then moves its window
starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announced later)
Report submission (not more than 10 pages for Part-I and Part-II): at the DEMO
Marks: Part-I = 60% and Part-II = 40% (based on the DEMO and the report)
Example-Problems (Solutions given)
1. Develop a socket program in UNIX/Linux that uses (i) TCP as the transport protocol and
(ii) UDP as the transport protocol for transferring a short message between a client and
server. The client sends a string (input by the user) to the server and the server prints the
string on the screen after receiving it.
2. Develop a TCP-based client-server socket program for transferring a large message. The
message transmitted from the client to server is read from a large file (size is about 30000
bytes). The entire message is sent by the client as a single data-unit. After receiving the
file, the server sends an ACK message to the receiver. Verify that the file has been sent
completely and correctly by comparing the received file with the original file (“diff”
command could be used). Measure the message transfer time and throughput.
3. This problem is similar to problem (2) above, but the message is split into short data-units
which are sent one by one without waiting for any acknowledgement between
transmissions of two successive data-units. Verify that the file has been sent completely
and correctly by comparing the received file with the original file. Measure the message
Page 1 of 2transfer time and throughput. Repeat it for different (at least six) data-unit sizes (say, from
100 bytes to 1000 bytes).
4. This problem is similar to problem (3) above, but it uses UDP as the transport protocol.
5. This problem is similar to problem (4) above, but the file is transferred using stop-and-
wait flow control protocol.
Project Assignment
Part-I
A hypothetical reliable data transfer protocol: A jumping window based Go-back-N
ARQ protocol for file transfer using UDP
In this protocol, a window of size W is used. The sender continuously sends W packets
corresponding to the current window, and then waits for an acknowledgement. The
receiver receives W packets. If all the packets are error-free, it sends out a positive
acknowledgement, say RR-i (RR: Receiver Ready). The receiver then moves its window
starting from the packet with the sequence number i. Upon receiving RR-i the sender
moves its window starting from the packet with the sequence number i. If a receiver
receives a damaged packet (say, with the sequence number j) in its current window, it
receives and discards all the remaining packets in the current window and it sends out a
negative acknowledgement, say REJ-j (REJ: Reject). The receiver then moves its window
starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2CO318 - Systems and Network Programming Lab and Project II
Semester 6, Aug-Sep 2014
Project II: Developing a reliable data transfer protocol for computer networks
and investigating its performance
Project Details:
In this project, you are required to develop a hypothetical reliable data transfer protocol for
computer networks (using socket programming with C or other language) and to investigate its
performance. That is, you will be building a simulator for the reliable data transfer protocol,
which can be used for investigating its performance.
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announced later)
Report submission (not more than 10 pages for Part-I and Part-II): at the DEMO
Marks: Part-I = 60% and Part-II = 40% (based on the DEMO and the report)
Example-Problems (Solutions given)
1. Develop a socket program in UNIX/Linux that uses (i) TCP as the transport protocol and
(ii) UDP as the transport protocol for transferring a short message between a client and
server. The client sends a string (input by the user) to the server and the server prints the
string on the screen after receiving it.
2. Develop a TCP-based client-server socket program for transferring a large message. The
message transmitted from the client to server is read from a large file (size is about 30000
bytes). The entire message is sent by the client as a single data-unit. After receiving the
file, the server sends an ACK message to the receiver. Verify that the file has been sent
completely and correctly by comparing the received file with the original file (“diff”
command could be used). Measure the message transfer time and throughput.
3. This problem is similar to problem (2) above, but the message is split into short data-units
which are sent one by one without waiting for any acknowledgement between
transmissions of two successive data-units. Verify that the file has been sent completely
and correctly by comparing the received file with the original file. Measure the message
Page 1 of 2transfer time and throughput. Repeat it for different (at least six) data-unit sizes (say, from
100 bytes to 1000 bytes).
4. This problem is similar to problem (3) above, but it uses UDP as the transport protocol.
5. This problem is similar to problem (4) above, but the file is transferred using stop-and-
wait flow control protocol.
Project Assignment
Part-I
A hypothetical reliable data transfer protocol: A jumping window based Go-back-N
ARQ protocol for file transfer using UDP
In this protocol, a window of size W is used. The sender continuously sends W packets
corresponding to the current window, and then waits for an acknowledgement. The
receiver receives W packets. If all the packets are error-free, it sends out a positive
acknowledgement, say RR-i (RR: Receiver Ready). The receiver then moves its window
starting from the packet with the sequence number i. Upon receiving RR-i the sender
moves its window starting from the packet with the sequence number i. If a receiver
receives a damaged packet (say, with the sequence number j) in its current window, it
receives and discards all the remaining packets in the current window and it sends out a
negative acknowledgement, say REJ-j (REJ: Reject). The receiver then moves its window
starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2CO318 - Systems and Network Programming Lab and Project II
Semester 6, Aug-Sep 2014
Project II: Developing a reliable data transfer protocol for computer networks
and investigating its performance
Project Details:
In this project, you are required to develop a hypothetical reliable data transfer protocol for
computer networks (using socket programming with C or other language) and to investigate its
performance. That is, you will be building a simulator for the reliable data transfer protocol,
which can be used for investigating its performance.
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announced later)
Report submission (not more than 10 pages for Part-I and Part-II): at the DEMO
Marks: Part-I = 60% and Part-II = 40% (based on the DEMO and the report)
Example-Problems (Solutions given)
1. Develop a socket program in UNIX/Linux that uses (i) TCP as the transport protocol and
(ii) UDP as the transport protocol for transferring a short message between a client and
server. The client sends a string (input by the user) to the server and the server prints the
string on the screen after receiving it.
2. Develop a TCP-based client-server socket program for transferring a large message. The
message transmitted from the client to server is read from a large file (size is about 30000
bytes). The entire message is sent by the client as a single data-unit. After receiving the
file, the server sends an ACK message to the receiver. Verify that the file has been sent
completely and correctly by comparing the received file with the original file (“diff”
command could be used). Measure the message transfer time and throughput.
3. This problem is similar to problem (2) above, but the message is split into short data-units
which are sent one by one without waiting for any acknowledgement between
transmissions of two successive data-units. Verify that the file has been sent completely
and correctly by comparing the received file with the original file. Measure the message
Page 1 of 2transfer time and throughput. Repeat it for different (at least six) data-unit sizes (say, from
100 bytes to 1000 bytes).
4. This problem is similar to problem (3) above, but it uses UDP as the transport protocol.
5. This problem is similar to problem (4) above, but the file is transferred using stop-and-
wait flow control protocol.
Project Assignment
Part-I
A hypothetical reliable data transfer protocol: A jumping window based Go-back-N
ARQ protocol for file transfer using UDP
In this protocol, a window of size W is used. The sender continuously sends W packets
corresponding to the current window, and then waits for an acknowledgement. The
receiver receives W packets. If all the packets are error-free, it sends out a positive
acknowledgement, say RR-i (RR: Receiver Ready). The receiver then moves its window
starting from the packet with the sequence number i. Upon receiving RR-i the sender
moves its window starting from the packet with the sequence number i. If a receiver
receives a damaged packet (say, with the sequence number j) in its current window, it
receives and discards all the remaining packets in the current window and it sends out a
negative acknowledgement, say REJ-j (REJ: Reject). The receiver then moves its window
starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announced later)
Report submission (not more than 10 pages for Part-I and Part-II): at the DEMO
Marks: Part-I = 60% and Part-II = 40% (based on the DEMO and the report)
Example-Problems (Solutions given)
1. Develop a socket program in UNIX/Linux that uses (i) TCP as the transport protocol and
(ii) UDP as the transport protocol for transferring a short message between a client and
server. The client sends a string (input by the user) to the server and the server prints the
string on the screen after receiving it.
2. Develop a TCP-based client-server socket program for transferring a large message. The
message transmitted from the client to server is read from a large file (size is about 30000
bytes). The entire message is sent by the client as a single data-unit. After receiving the
file, the server sends an ACK message to the receiver. Verify that the file has been sent
completely and correctly by comparing the received file with the original file (“diff”
command could be used). Measure the message transfer time and throughput.
3. This problem is similar to problem (2) above, but the message is split into short data-units
which are sent one by one without waiting for any acknowledgement between
transmissions of two successive data-units. Verify that the file has been sent completely
and correctly by comparing the received file with the original file. Measure the message
Page 1 of 2transfer time and throughput. Repeat it for different (at least six) data-unit sizes (say, from
100 bytes to 1000 bytes).
4. This problem is similar to problem (3) above, but it uses UDP as the transport protocol.
5. This problem is similar to problem (4) above, but the file is transferred using stop-and-
wait flow control protocol.
Project Assignment
Part-I
A hypothetical reliable data transfer protocol: A jumping window based Go-back-N
ARQ protocol for file transfer using UDP
In this protocol, a window of size W is used. The sender continuously sends W packets
corresponding to the current window, and then waits for an acknowledgement. The
receiver receives W packets. If all the packets are error-free, it sends out a positive
acknowledgement, say RR-i (RR: Receiver Ready). The receiver then moves its window
starting from the packet with the sequence number i. Upon receiving RR-i the sender
moves its window starting from the packet with the sequence number i. If a receiver
receives a damaged packet (say, with the sequence number j) in its current window, it
receives and discards all the remaining packets in the current window and it sends out a
negative acknowledgement, say REJ-j (REJ: Reject). The receiver then moves its window
starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2CO318 - Systems and Network Programming Lab and Project II
Semester 6, Aug-Sep 2014
Project II: Developing a reliable data transfer protocol for computer networks
and investigating its performance
Project Details:
In this project, you are required to develop a hypothetical reliable data transfer protocol for
computer networks (using socket programming with C or other language) and to investigate its
performance. That is, you will be building a simulator for the reliable data transfer protocol,
which can be used for investigating its performance.
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announced later)
Report submission (not more than 10 pages for Part-I and Part-II): at the DEMO
Marks: Part-I = 60% and Part-II = 40% (based on the DEMO and the report)
Example-Problems (Solutions given)
1. Develop a socket program in UNIX/Linux that uses (i) TCP as the transport protocol and
(ii) UDP as the transport protocol for transferring a short message between a client and
server. The client sends a string (input by the user) to the server and the server prints the
string on the screen after receiving it.
2. Develop a TCP-based client-server socket program for transferring a large message. The
message transmitted from the client to server is read from a large file (size is about 30000
bytes). The entire message is sent by the client as a single data-unit. After receiving the
file, the server sends an ACK message to the receiver. Verify that the file has been sent
completely and correctly by comparing the received file with the original file (“diff”
command could be used). Measure the message transfer time and throughput.
3. This problem is similar to problem (2) above, but the message is split into short data-units
which are sent one by one without waiting for any acknowledgement between
transmissions of two successive data-units. Verify that the file has been sent completely
and correctly by comparing the received file with the original file. Measure the message
Page 1 of 2transfer time and throughput. Repeat it for different (at least six) data-unit sizes (say, from
100 bytes to 1000 bytes).
4. This problem is similar to problem (3) above, but it uses UDP as the transport protocol.
5. This problem is similar to problem (4) above, but the file is transferred using stop-and-
wait flow control protocol.
Project Assignment
Part-I
A hypothetical reliable data transfer protocol: A jumping window based Go-back-N
ARQ protocol for file transfer using UDP
In this protocol, a window of size W is used. The sender continuously sends W packets
corresponding to the current window, and then waits for an acknowledgement. The
receiver receives W packets. If all the packets are error-free, it sends out a positive
acknowledgement, say RR-i (RR: Receiver Ready). The receiver then moves its window
starting from the packet with the sequence number i. Upon receiving RR-i the sender
moves its window starting from the packet with the sequence number i. If a receiver
receives a damaged packet (say, with the sequence number j) in its current window, it
receives and discards all the remaining packets in the current window and it sends out a
negative acknowledgement, say REJ-j (REJ: Reject). The receiver then moves its window
starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2CO318 - Systems and Network Programming Lab and Project II
Semester 6, Aug-Sep 2014
Project II: Developing a reliable data transfer protocol for computer networks
and investigating its performance
Project Details:
In this project, you are required to develop a hypothetical reliable data transfer protocol for
computer networks (using socket programming with C or other language) and to investigate its
performance. That is, you will be building a simulator for the reliable data transfer protocol,
which can be used for investigating its performance.
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announced later)
Report submission (not more than 10 pages for Part-I and Part-II): at the DEMO
Marks: Part-I = 60% and Part-II = 40% (based on the DEMO and the report)
Example-Problems (Solutions given)
1. Develop a socket program in UNIX/Linux that uses (i) TCP as the transport protocol and
(ii) UDP as the transport protocol for transferring a short message between a client and
server. The client sends a string (input by the user) to the server and the server prints the
string on the screen after receiving it.
2. Develop a TCP-based client-server socket program for transferring a large message. The
message transmitted from the client to server is read from a large file (size is about 30000
bytes). The entire message is sent by the client as a single data-unit. After receiving the
file, the server sends an ACK message to the receiver. Verify that the file has been sent
completely and correctly by comparing the received file with the original file (“diff”
command could be used). Measure the message transfer time and throughput.
3. This problem is similar to problem (2) above, but the message is split into short data-units
which are sent one by one without waiting for any acknowledgement between
transmissions of two successive data-units. Verify that the file has been sent completely
and correctly by comparing the received file with the original file. Measure the message
Page 1 of 2transfer time and throughput. Repeat it for different (at least six) data-unit sizes (say, from
100 bytes to 1000 bytes).
4. This problem is similar to problem (3) above, but it uses UDP as the transport protocol.
5. This problem is similar to problem (4) above, but the file is transferred using stop-and-
wait flow control protocol.
Project Assignment
Part-I
A hypothetical reliable data transfer protocol: A jumping window based Go-back-N
ARQ protocol for file transfer using UDP
In this protocol, a window of size W is used. The sender continuously sends W packets
corresponding to the current window, and then waits for an acknowledgement. The
receiver receives W packets. If all the packets are error-free, it sends out a positive
acknowledgement, say RR-i (RR: Receiver Ready). The receiver then moves its window
starting from the packet with the sequence number i. Upon receiving RR-i the sender
moves its window starting from the packet with the sequence number i. If a receiver
receives a damaged packet (say, with the sequence number j) in its current window, it
receives and discards all the remaining packets in the current window and it sends out a
negative acknowledgement, say REJ-j (REJ: Reject). The receiver then moves its window
starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announced later)
Report submission (not more than 10 pages for Part-I and Part-II): at the DEMO
Marks: Part-I = 60% and Part-II = 40% (based on the DEMO and the report)
Example-Problems (Solutions given)
1. Develop a socket program in UNIX/Linux that uses (i) TCP as the transport protocol and
(ii) UDP as the transport protocol for transferring a short message between a client and
server. The client sends a string (input by the user) to the server and the server prints the
string on the screen after receiving it.
2. Develop a TCP-based client-server socket program for transferring a large message. The
message transmitted from the client to server is read from a large file (size is about 30000
bytes). The entire message is sent by the client as a single data-unit. After receiving the
file, the server sends an ACK message to the receiver. Verify that the file has been sent
completely and correctly by comparing the received file with the original file (“diff”
command could be used). Measure the message transfer time and throughput.
3. This problem is similar to problem (2) above, but the message is split into short data-units
which are sent one by one without waiting for any acknowledgement between
transmissions of two successive data-units. Verify that the file has been sent completely
and correctly by comparing the received file with the original file. Measure the message
Page 1 of 2transfer time and throughput. Repeat it for different (at least six) data-unit sizes (say, from
100 bytes to 1000 bytes).
4. This problem is similar to problem (3) above, but it uses UDP as the transport protocol.
5. This problem is similar to problem (4) above, but the file is transferred using stop-and-
wait flow control protocol.
Project Assignment
Part-I
A hypothetical reliable data transfer protocol: A jumping window based Go-back-N
ARQ protocol for file transfer using UDP
In this protocol, a window of size W is used. The sender continuously sends W packets
corresponding to the current window, and then waits for an acknowledgement. The
receiver receives W packets. If all the packets are error-free, it sends out a positive
acknowledgement, say RR-i (RR: Receiver Ready). The receiver then moves its window
starting from the packet with the sequence number i. Upon receiving RR-i the sender
moves its window starting from the packet with the sequence number i. If a receiver
receives a damaged packet (say, with the sequence number j) in its current window, it
receives and discards all the remaining packets in the current window and it sends out a
negative acknowledgement, say REJ-j (REJ: Reject). The receiver then moves its window
starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2CO318 - Systems and Network Programming Lab and Project II
Semester 6, Aug-Sep 2014
Project II: Developing a reliable data transfer protocol for computer networks
and investigating its performance
Project Details:
In this project, you are required to develop a hypothetical reliable data transfer protocol for
computer networks (using socket programming with C or other language) and to investigate its
performance. That is, you will be building a simulator for the reliable data transfer protocol,
which can be used for investigating its performance.
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announced later)
Report submission (not more than 10 pages for Part-I and Part-II): at the DEMO
Marks: Part-I = 60% and Part-II = 40% (based on the DEMO and the report)
Example-Problems (Solutions given)
1. Develop a socket program in UNIX/Linux that uses (i) TCP as the transport protocol and
(ii) UDP as the transport protocol for transferring a short message between a client and
server. The client sends a string (input by the user) to the server and the server prints the
string on the screen after receiving it.
2. Develop a TCP-based client-server socket program for transferring a large message. The
message transmitted from the client to server is read from a large file (size is about 30000
bytes). The entire message is sent by the client as a single data-unit. After receiving the
file, the server sends an ACK message to the receiver. Verify that the file has been sent
completely and correctly by comparing the received file with the original file (“diff”
command could be used). Measure the message transfer time and throughput.
3. This problem is similar to problem (2) above, but the message is split into short data-units
which are sent one by one without waiting for any acknowledgement between
transmissions of two successive data-units. Verify that the file has been sent completely
and correctly by comparing the received file with the original file. Measure the message
Page 1 of 2transfer time and throughput. Repeat it for different (at least six) data-unit sizes (say, from
100 bytes to 1000 bytes).
4. This problem is similar to problem (3) above, but it uses UDP as the transport protocol.
5. This problem is similar to problem (4) above, but the file is transferred using stop-and-
wait flow control protocol.
Project Assignment
Part-I
A hypothetical reliable data transfer protocol: A jumping window based Go-back-N
ARQ protocol for file transfer using UDP
In this protocol, a window of size W is used. The sender continuously sends W packets
corresponding to the current window, and then waits for an acknowledgement. The
receiver receives W packets. If all the packets are error-free, it sends out a positive
acknowledgement, say RR-i (RR: Receiver Ready). The receiver then moves its window
starting from the packet with the sequence number i. Upon receiving RR-i the sender
moves its window starting from the packet with the sequence number i. If a receiver
receives a damaged packet (say, with the sequence number j) in its current window, it
receives and discards all the remaining packets in the current window and it sends out a
negative acknowledgement, say REJ-j (REJ: Reject). The receiver then moves its window
starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2CO318 - Systems and Network Programming Lab and Project II
Semester 6, Aug-Sep 2014
Project II: Developing a reliable data transfer protocol for computer networks
and investigating its performance
Project Details:
In this project, you are required to develop a hypothetical reliable data transfer protocol for
computer networks (using socket programming with C or other language) and to investigate its
performance. That is, you will be building a simulator for the reliable data transfer protocol,
which can be used for investigating its performance.
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announced later)
Report submission (not more than 10 pages for Part-I and Part-II): at the DEMO
Marks: Part-I = 60% and Part-II = 40% (based on the DEMO and the report)
Example-Problems (Solutions given)
1. Develop a socket program in UNIX/Linux that uses (i) TCP as the transport protocol and
(ii) UDP as the transport protocol for transferring a short message between a client and
server. The client sends a string (input by the user) to the server and the server prints the
string on the screen after receiving it.
2. Develop a TCP-based client-server socket program for transferring a large message. The
message transmitted from the client to server is read from a large file (size is about 30000
bytes). The entire message is sent by the client as a single data-unit. After receiving the
file, the server sends an ACK message to the receiver. Verify that the file has been sent
completely and correctly by comparing the received file with the original file (“diff”
command could be used). Measure the message transfer time and throughput.
3. This problem is similar to problem (2) above, but the message is split into short data-units
which are sent one by one without waiting for any acknowledgement between
transmissions of two successive data-units. Verify that the file has been sent completely
and correctly by comparing the received file with the original file. Measure the message
Page 1 of 2transfer time and throughput. Repeat it for different (at least six) data-unit sizes (say, from
100 bytes to 1000 bytes).
4. This problem is similar to problem (3) above, but it uses UDP as the transport protocol.
5. This problem is similar to problem (4) above, but the file is transferred using stop-and-
wait flow control protocol.
Project Assignment
Part-I
A hypothetical reliable data transfer protocol: A jumping window based Go-back-N
ARQ protocol for file transfer using UDP
In this protocol, a window of size W is used. The sender continuously sends W packets
corresponding to the current window, and then waits for an acknowledgement. The
receiver receives W packets. If all the packets are error-free, it sends out a positive
acknowledgement, say RR-i (RR: Receiver Ready). The receiver then moves its window
starting from the packet with the sequence number i. Upon receiving RR-i the sender
moves its window starting from the packet with the sequence number i. If a receiver
receives a damaged packet (say, with the sequence number j) in its current window, it
receives and discards all the remaining packets in the current window and it sends out a
negative acknowledgement, say REJ-j (REJ: Reject). The receiver then moves its window
starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announced later)
Report submission (not more than 10 pages for Part-I and Part-II): at the DEMO
Marks: Part-I = 60% and Part-II = 40% (based on the DEMO and the report)
Example-Problems (Solutions given)
1. Develop a socket program in UNIX/Linux that uses (i) TCP as the transport protocol and
(ii) UDP as the transport protocol for transferring a short message between a client and
server. The client sends a string (input by the user) to the server and the server prints the
string on the screen after receiving it.
2. Develop a TCP-based client-server socket program for transferring a large message. The
message transmitted from the client to server is read from a large file (size is about 30000
bytes). The entire message is sent by the client as a single data-unit. After receiving the
file, the server sends an ACK message to the receiver. Verify that the file has been sent
completely and correctly by comparing the received file with the original file (“diff”
command could be used). Measure the message transfer time and throughput.
3. This problem is similar to problem (2) above, but the message is split into short data-units
which are sent one by one without waiting for any acknowledgement between
transmissions of two successive data-units. Verify that the file has been sent completely
and correctly by comparing the received file with the original file. Measure the message
Page 1 of 2transfer time and throughput. Repeat it for different (at least six) data-unit sizes (say, from
100 bytes to 1000 bytes).
4. This problem is similar to problem (3) above, but it uses UDP as the transport protocol.
5. This problem is similar to problem (4) above, but the file is transferred using stop-and-
wait flow control protocol.
Project Assignment
Part-I
A hypothetical reliable data transfer protocol: A jumping window based Go-back-N
ARQ protocol for file transfer using UDP
In this protocol, a window of size W is used. The sender continuously sends W packets
corresponding to the current window, and then waits for an acknowledgement. The
receiver receives W packets. If all the packets are error-free, it sends out a positive
acknowledgement, say RR-i (RR: Receiver Ready). The receiver then moves its window
starting from the packet with the sequence number i. Upon receiving RR-i the sender
moves its window starting from the packet with the sequence number i. If a receiver
receives a damaged packet (say, with the sequence number j) in its current window, it
receives and discards all the remaining packets in the current window and it sends out a
negative acknowledgement, say REJ-j (REJ: Reject). The receiver then moves its window
starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2CO318 - Systems and Network Programming Lab and Project II
Semester 6, Aug-Sep 2014
Project II: Developing a reliable data transfer protocol for computer networks
and investigating its performance
Project Details:
In this project, you are required to develop a hypothetical reliable data transfer protocol for
computer networks (using socket programming with C or other language) and to investigate its
performance. That is, you will be building a simulator for the reliable data transfer protocol,
which can be used for investigating its performance.
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announced later)
Report submission (not more than 10 pages for Part-I and Part-II): at the DEMO
Marks: Part-I = 60% and Part-II = 40% (based on the DEMO and the report)
Example-Problems (Solutions given)
1. Develop a socket program in UNIX/Linux that uses (i) TCP as the transport protocol and
(ii) UDP as the transport protocol for transferring a short message between a client and
server. The client sends a string (input by the user) to the server and the server prints the
string on the screen after receiving it.
2. Develop a TCP-based client-server socket program for transferring a large message. The
message transmitted from the client to server is read from a large file (size is about 30000
bytes). The entire message is sent by the client as a single data-unit. After receiving the
file, the server sends an ACK message to the receiver. Verify that the file has been sent
completely and correctly by comparing the received file with the original file (“diff”
command could be used). Measure the message transfer time and throughput.
3. This problem is similar to problem (2) above, but the message is split into short data-units
which are sent one by one without waiting for any acknowledgement between
transmissions of two successive data-units. Verify that the file has been sent completely
and correctly by comparing the received file with the original file. Measure the message
Page 1 of 2transfer time and throughput. Repeat it for different (at least six) data-unit sizes (say, from
100 bytes to 1000 bytes).
4. This problem is similar to problem (3) above, but it uses UDP as the transport protocol.
5. This problem is similar to problem (4) above, but the file is transferred using stop-and-
wait flow control protocol.
Project Assignment
Part-I
A hypothetical reliable data transfer protocol: A jumping window based Go-back-N
ARQ protocol for file transfer using UDP
In this protocol, a window of size W is used. The sender continuously sends W packets
corresponding to the current window, and then waits for an acknowledgement. The
receiver receives W packets. If all the packets are error-free, it sends out a positive
acknowledgement, say RR-i (RR: Receiver Ready). The receiver then moves its window
starting from the packet with the sequence number i. Upon receiving RR-i the sender
moves its window starting from the packet with the sequence number i. If a receiver
receives a damaged packet (say, with the sequence number j) in its current window, it
receives and discards all the remaining packets in the current window and it sends out a
negative acknowledgement, say REJ-j (REJ: Reject). The receiver then moves its window
starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2CO318 - Systems and Network Programming Lab and Project II
Semester 6, Aug-Sep 2014
Project II: Developing a reliable data transfer protocol for computer networks
and investigating its performance
Project Details:
In this project, you are required to develop a hypothetical reliable data transfer protocol for
computer networks (using socket programming with C or other language) and to investigate its
performance. That is, you will be building a simulator for the reliable data transfer protocol,
which can be used for investigating its performance.
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announced later)
Report submission (not more than 10 pages for Part-I and Part-II): at the DEMO
Marks: Part-I = 60% and Part-II = 40% (based on the DEMO and the report)
Example-Problems (Solutions given)
1. Develop a socket program in UNIX/Linux that uses (i) TCP as the transport protocol and
(ii) UDP as the transport protocol for transferring a short message between a client and
server. The client sends a string (input by the user) to the server and the server prints the
string on the screen after receiving it.
2. Develop a TCP-based client-server socket program for transferring a large message. The
message transmitted from the client to server is read from a large file (size is about 30000
bytes). The entire message is sent by the client as a single data-unit. After receiving the
file, the server sends an ACK message to the receiver. Verify that the file has been sent
completely and correctly by comparing the received file with the original file (“diff”
command could be used). Measure the message transfer time and throughput.
3. This problem is similar to problem (2) above, but the message is split into short data-units
which are sent one by one without waiting for any acknowledgement between
transmissions of two successive data-units. Verify that the file has been sent completely
and correctly by comparing the received file with the original file. Measure the message
Page 1 of 2transfer time and throughput. Repeat it for different (at least six) data-unit sizes (say, from
100 bytes to 1000 bytes).
4. This problem is similar to problem (3) above, but it uses UDP as the transport protocol.
5. This problem is similar to problem (4) above, but the file is transferred using stop-and-
wait flow control protocol.
Project Assignment
Part-I
A hypothetical reliable data transfer protocol: A jumping window based Go-back-N
ARQ protocol for file transfer using UDP
In this protocol, a window of size W is used. The sender continuously sends W packets
corresponding to the current window, and then waits for an acknowledgement. The
receiver receives W packets. If all the packets are error-free, it sends out a positive
acknowledgement, say RR-i (RR: Receiver Ready). The receiver then moves its window
starting from the packet with the sequence number i. Upon receiving RR-i the sender
moves its window starting from the packet with the sequence number i. If a receiver
receives a damaged packet (say, with the sequence number j) in its current window, it
receives and discards all the remaining packets in the current window and it sends out a
negative acknowledgement, say REJ-j (REJ: Reject). The receiver then moves its window
starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announced later)
Report submission (not more than 10 pages for Part-I and Part-II): at the DEMO
Marks: Part-I = 60% and Part-II = 40% (based on the DEMO and the report)
Example-Problems (Solutions given)
1. Develop a socket program in UNIX/Linux that uses (i) TCP as the transport protocol and
(ii) UDP as the transport protocol for transferring a short message between a client and
server. The client sends a string (input by the user) to the server and the server prints the
string on the screen after receiving it.
2. Develop a TCP-based client-server socket program for transferring a large message. The
message transmitted from the client to server is read from a large file (size is about 30000
bytes). The entire message is sent by the client as a single data-unit. After receiving the
file, the server sends an ACK message to the receiver. Verify that the file has been sent
completely and correctly by comparing the received file with the original file (“diff”
command could be used). Measure the message transfer time and throughput.
3. This problem is similar to problem (2) above, but the message is split into short data-units
which are sent one by one without waiting for any acknowledgement between
transmissions of two successive data-units. Verify that the file has been sent completely
and correctly by comparing the received file with the original file. Measure the message
Page 1 of 2transfer time and throughput. Repeat it for different (at least six) data-unit sizes (say, from
100 bytes to 1000 bytes).
4. This problem is similar to problem (3) above, but it uses UDP as the transport protocol.
5. This problem is similar to problem (4) above, but the file is transferred using stop-and-
wait flow control protocol.
Project Assignment
Part-I
A hypothetical reliable data transfer protocol: A jumping window based Go-back-N
ARQ protocol for file transfer using UDP
In this protocol, a window of size W is used. The sender continuously sends W packets
corresponding to the current window, and then waits for an acknowledgement. The
receiver receives W packets. If all the packets are error-free, it sends out a positive
acknowledgement, say RR-i (RR: Receiver Ready). The receiver then moves its window
starting from the packet with the sequence number i. Upon receiving RR-i the sender
moves its window starting from the packet with the sequence number i. If a receiver
receives a damaged packet (say, with the sequence number j) in its current window, it
receives and discards all the remaining packets in the current window and it sends out a
negative acknowledgement, say REJ-j (REJ: Reject). The receiver then moves its window
starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration shouldstarting from tstarting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration shouldstarting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2CO318 - Systems and Network Programming Lab and Project II
Semester 6, Aug-Sep 2014
Project II: Developing a reliable data transfer protocol for computer networks
and investigating its performance
Project Details:
In this project, you are required to develop a hypothetical reliable data transfer protocol for
computer networks (using socket programming with C or other language) and to investigate its
performance. That is, you will be building a simulator for the reliable data transfer protocol,
which can be used for investigating its performance.
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announced later)
Report submission (not more than 10 pages for Part-I and Part-II): at the DEMO
Marks: Part-I = 60% and Part-II = 40% (based on the DEMO and the report)
Example-Problems (Solutions given)
1. Develop a socket program in UNIX/Linux that uses (i) TCP as the transport protocol and
(ii) UDP as the transport protocol for transferring a short message between a client and
server. The client sends a string (input by the user) to the server and the server prints the
string on the screen after receiving it.
2. Develop a TCP-based client-server socket program for transferring a large message. The
message transmitted from the client to server is read from a large file (size is about 30000
bytes). The entire message is sent by the client as a single data-unit. After receiving the
file, the server sends an ACK message to the receiver. Verify that the file has been sent
completely and correctly by comparing the received file with the original file (“diff”
command could be used). Measure the message transfer time and throughput.
3. This problem is similar to problem (2) above, but the message is split into short data-units
which are sent one by one without waiting for any acknowledgement between
transmissions of two successive data-units. Verify that the file has been sent completely
and correctly by comparing the received file with the original file. Measure the message
Page 1 of 2transfer time and throughput. Repeat it for different (at least six) data-unit sizes (say, from
100 bytes to 1000 bytes).
4. This problem is similar to problem (3) above, but it uses UDP as the transport protocol.
5. This problem is similar to problem (4) above, but the file is transferred using stop-and-
wait flow control protocol.
Project Assignment
Part-I
A hypothetical reliable data transfer protocol: A jumping window based Go-back-N
ARQ protocol for file transfer using UDP
In this protocol, a window of size W is used. The sender continuously sends W packets
corresponding to the current window, and then waits for an acknowledgement. The
receiver receives W packets. If all the packets are error-free, it sends out a positive
acknowledgement, say RR-i (RR: Receiver Ready). The receiver then moves its window
starting from the packet with the sequence number i. Upon receiving RR-i the sender
moves its window starting from the packet with the sequence number i. If a receiver
receives a damaged packet (say, with the sequence number j) in its current window, it
receives and discards all the remaining packets in the current window and it sends out a
negative acknowledgement, say REJ-j (REJ: Reject). The receiver then moves its window
starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2CO318 - Systems and Network Programming Lab and Project II
Semester 6, Aug-Sep 2014
Project II: Developing a reliable data transfer protocol for computer networks
and investigating its performance
Project Details:
In this project, you are required to develop a hypothetical reliable data transfer protocol for
computer networks (using socket programming with C or other language) and to investigate its
performance. That is, you will be building a simulator for the reliable data transfer protocol,
which can be used for investigating its performance.
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announced later)
Report submission (not more than 10 pages for Part-I and Part-II): at the DEMO
Marks: Part-I = 60% and Part-II = 40% (based on the DEMO and the report)
Example-Problems (Solutions given)
1. Develop a socket program in UNIX/Linux that uses (i) TCP as the transport protocol and
(ii) UDP as the transport protocol for transferring a short message between a client and
server. The client sends a string (input by the user) to the server and the server prints the
string on the screen after receiving it.
2. Develop a TCP-based client-server socket program for transferring a large message. The
message transmitted from the client to server is read from a large file (size is about 30000
bytes). The entire message is sent by the client as a single data-unit. After receiving the
file, the server sends an ACK message to the receiver. Verify that the file has been sent
completely and correctly by comparing the received file with the original file (“diff”
command could be used). Measure the message transfer time and throughput.
3. This problem is similar to problem (2) above, but the message is split into short data-units
which are sent one by one without waiting for any acknowledgement between
transmissions of two successive data-units. Verify that the file has been sent completely
and correctly by comparing the received file with the original file. Measure the message
Page 1 of 2transfer time and throughput. Repeat it for different (at least six) data-unit sizes (say, from
100 bytes to 1000 bytes).
4. This problem is similar to problem (3) above, but it uses UDP as the transport protocol.
5. This problem is similar to problem (4) above, but the file is transferred using stop-and-
wait flow control protocol.
Project Assignment
Part-I
A hypothetical reliable data transfer protocol: A jumping window based Go-back-N
ARQ protocol for file transfer using UDP
In this protocol, a window of size W is used. The sender continuously sends W packets
corresponding to the current window, and then waits for an acknowledgement. The
receiver receives W packets. If all the packets are error-free, it sends out a positive
acknowledgement, say RR-i (RR: Receiver Ready). The receiver then moves its window
starting from the packet with the sequence number i. Upon receiving RR-i the sender
moves its window starting from the packet with the sequence number i. If a receiver
receives a damaged packet (say, with the sequence number j) in its current window, it
receives and discards all the remaining packets in the current window and it sends out a
negative acknowledgement, say REJ-j (REJ: Reject). The receiver then moves its window
starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announced later)
Report submission (not more than 10 pages for Part-I and Part-II): at the DEMO
Marks: Part-I = 60% and Part-II = 40% (based on the DEMO and the report)
Example-Problems (Solutions given)
1. Develop a socket program in UNIX/Linux that uses (i) TCP as the transport protocol and
(ii) UDP as the transport protocol for transferring a short message between a client and
server. The client sends a string (input by the user) to the server and the server prints the
string on the screen after receiving it.
2. Develop a TCP-based client-server socket program for transferring a large message. The
message transmitted from the client to server is read from a large file (size is about 30000
bytes). The entire message is sent by the client as a single data-unit. After receiving the
file, the server sends an ACK message to the receiver. Verify that the file has been sent
completely and correctly by comparing the received file with the original file (“diff”
command could be used). Measure the message transfer time and throughput.
3. This problem is similar to problem (2) above, but the message is split into short data-units
which are sent one by one without waiting for any acknowledgement between
transmissions of two successive data-units. Verify that the file has been sent completely
and correctly by comparing the received file with the original file. Measure the message
Page 1 of 2transfer time and throughput. Repeat it for different (at least six) data-unit sizes (say, from
100 bytes to 1000 bytes).
4. This problem is similar to problem (3) above, but it uses UDP as the transport protocol.
5. This problem is similar to problem (4) above, but the file is transferred using stop-and-
wait flow control protocol.
Project Assignment
Part-I
A hypothetical reliable data transfer protocol: A jumping window based Go-back-N
ARQ protocol for file transfer using UDP
In this protocol, a window of size W is used. The sender continuously sends W packets
corresponding to the current window, and then waits for an acknowledgement. The
receiver receives W packets. If all the packets are error-free, it sends out a positive
acknowledgement, say RR-i (RR: Receiver Ready). The receiver then moves its window
starting from the packet with the sequence number i. Upon receiving RR-i the sender
moves its window starting from the packet with the sequence number i. If a receiver
receives a damaged packet (say, with the sequence number j) in its current window, it
receives and discards all the remaining packets in the current window and it sends out a
negative acknowledgement, say REJ-j (REJ: Reject). The receiver then moves its window
starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2CO318 - Systems and Network Programming Lab and Project II
Semester 6, Aug-Sep 2014
Project II: Developing a reliable data transfer protocol for computer networks
and investigating its performance
Project Details:
In this project, you are required to develop a hypothetical reliable data transfer protocol for
computer networks (using socket programming with C or other language) and to investigate its
performance. That is, you will be building a simulator for the reliable data transfer protocol,
which can be used for investigating its performance.
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announced later)
Report submission (not more than 10 pages for Part-I and Part-II): at the DEMO
Marks: Part-I = 60% and Part-II = 40% (based on the DEMO and the report)
Example-Problems (Solutions given)
1. Develop a socket program in UNIX/Linux that uses (i) TCP as the transport protocol and
(ii) UDP as the transport protocol for transferring a short message between a client and
server. The client sends a string (input by the user) to the server and the server prints the
string on the screen after receiving it.
2. Develop a TCP-based client-server socket program for transferring a large message. The
message transmitted from the client to server is read from a large file (size is about 30000
bytes). The entire message is sent by the client as a single data-unit. After receiving the
file, the server sends an ACK message to the receiver. Verify that the file has been sent
completely and correctly by comparing the received file with the original file (“diff”
command could be used). Measure the message transfer time and throughput.
3. This problem is similar to problem (2) above, but the message is split into short data-units
which are sent one by one without waiting for any acknowledgement between
transmissions of two successive data-units. Verify that the file has been sent completely
and correctly by comparing the received file with the original file. Measure the message
Page 1 of 2transfer time and throughput. Repeat it for different (at least six) data-unit sizes (say, from
100 bytes to 1000 bytes).
4. This problem is similar to problem (3) above, but it uses UDP as the transport protocol.
5. This problem is similar to problem (4) above, but the file is transferred using stop-and-
wait flow control protocol.
Project Assignment
Part-I
A hypothetical reliable data transfer protocol: A jumping window based Go-back-N
ARQ protocol for file transfer using UDP
In this protocol, a window of size W is used. The sender continuously sends W packets
corresponding to the current window, and then waits for an acknowledgement. The
receiver receives W packets. If all the packets are error-free, it sends out a positive
acknowledgement, say RR-i (RR: Receiver Ready). The receiver then moves its window
starting from the packet with the sequence number i. Upon receiving RR-i the sender
moves its window starting from the packet with the sequence number i. If a receiver
receives a damaged packet (say, with the sequence number j) in its current window, it
receives and discards all the remaining packets in the current window and it sends out a
negative acknowledgement, say REJ-j (REJ: Reject). The receiver then moves its window
starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2CO318 - Systems and Network Programming Lab and Project II
Semester 6, Aug-Sep 2014
Project II: Developing a reliable data transfer protocol for computer networks
and investigating its performance
Project Details:
In this project, you are required to develop a hypothetical reliable data transfer protocol for
computer networks (using socket programming with C or other language) and to investigate its
performance. That is, you will be building a simulator for the reliable data transfer protocol,
which can be used for investigating its performance.
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announced later)
Report submission (not more than 10 pages for Part-I and Part-II): at the DEMO
Marks: Part-I = 60% and Part-II = 40% (based on the DEMO and the report)
Example-Problems (Solutions given)
1. Develop a socket program in UNIX/Linux that uses (i) TCP as the transport protocol and
(ii) UDP as the transport protocol for transferring a short message between a client and
server. The client sends a string (input by the user) to the server and the server prints the
string on the screen after receiving it.
2. Develop a TCP-based client-server socket program for transferring a large message. The
message transmitted from the client to server is read from a large file (size is about 30000
bytes). The entire message is sent by the client as a single data-unit. After receiving the
file, the server sends an ACK message to the receiver. Verify that the file has been sent
completely and correctly by comparing the received file with the original file (“diff”
command could be used). Measure the message transfer time and throughput.
3. This problem is similar to problem (2) above, but the message is split into short data-units
which are sent one by one without waiting for any acknowledgement between
transmissions of two successive data-units. Verify that the file has been sent completely
and correctly by comparing the received file with the original file. Measure the message
Page 1 of 2transfer time and throughput. Repeat it for different (at least six) data-unit sizes (say, from
100 bytes to 1000 bytes).
4. This problem is similar to problem (3) above, but it uses UDP as the transport protocol.
5. This problem is similar to problem (4) above, but the file is transferred using stop-and-
wait flow control protocol.
Project Assignment
Part-I
A hypothetical reliable data transfer protocol: A jumping window based Go-back-N
ARQ protocol for file transfer using UDP
In this protocol, a window of size W is used. The sender continuously sends W packets
corresponding to the current window, and then waits for an acknowledgement. The
receiver receives W packets. If all the packets are error-free, it sends out a positive
acknowledgement, say RR-i (RR: Receiver Ready). The receiver then moves its window
starting from the packet with the sequence number i. Upon receiving RR-i the sender
moves its window starting from the packet with the sequence number i. If a receiver
receives a damaged packet (say, with the sequence number j) in its current window, it
receives and discards all the remaining packets in the current window and it sends out a
negative acknowledgement, say REJ-j (REJ: Reject). The receiver then moves its window
starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announced later)
Report submission (not more than 10 pages for Part-I and Part-II): at the DEMO
Marks: Part-I = 60% and Part-II = 40% (based on the DEMO and the report)
Example-Problems (Solutions given)
1. Develop a socket program in UNIX/Linux that uses (i) TCP as the transport protocol and
(ii) UDP as the transport protocol for transferring a short message between a client and
server. The client sends a string (input by the user) to the server and the server prints the
string on the screen after receiving it.
2. Develop a TCP-based client-server socket program for transferring a large message. The
message transmitted from the client to server is read from a large file (size is about 30000
bytes). The entire message is sent by the client as a single data-unit. After receiving the
file, the server sends an ACK message to the receiver. Verify that the file has been sent
completely and correctly by comparing the received file with the original file (“diff”
command could be used). Measure the message transfer time and throughput.
3. This problem is similar to problem (2) above, but the message is split into short data-units
which are sent one by one without waiting for any acknowledgement between
transmissions of two successive data-units. Verify that the file has been sent completely
and correctly by comparing the received file with the original file. Measure the message
Page 1 of 2transfer time and throughput. Repeat it for different (at least six) data-unit sizes (say, from
100 bytes to 1000 bytes).
4. This problem is similar to problem (3) above, but it uses UDP as the transport protocol.
5. This problem is similar to problem (4) above, but the file is transferred using stop-and-
wait flow control protocol.
Project Assignment
Part-I
A hypothetical reliable data transfer protocol: A jumping window based Go-back-N
ARQ protocol for file transfer using UDP
In this protocol, a window of size W is used. The sender continuously sends W packets
corresponding to the current window, and then waits for an acknowledgement. The
receiver receives W packets. If all the packets are error-free, it sends out a positive
acknowledgement, say RR-i (RR: Receiver Ready). The receiver then moves its window
starting from the packet with the sequence number i. Upon receiving RR-i the sender
moves its window starting from the packet with the sequence number i. If a receiver
receives a damaged packet (say, with the sequence number j) in its current window, it
receives and discards all the remaining packets in the current window and it sends out a
negative acknowledgement, say REJ-j (REJ: Reject). The receiver then moves its window
starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2CO318 - Systems and Network Programming Lab and Project II
Semester 6, Aug-Sep 2014
Project II: Developing a reliable data transfer protocol for computer networks
and investigating its performance
Project Details:
In this project, you are required to develop a hypothetical reliable data transfer protocol for
computer networks (using socket programming with C or other language) and to investigate its
performance. That is, you will be building a simulator for the reliable data transfer protocol,
which can be used for investigating its performance.
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announced later)
Report submission (not more than 10 pages for Part-I and Part-II): at the DEMO
Marks: Part-I = 60% and Part-II = 40% (based on the DEMO and the report)
Example-Problems (Solutions given)
1. Develop a socket program in UNIX/Linux that uses (i) TCP as the transport protocol and
(ii) UDP as the transport protocol for transferring a short message between a client and
server. The client sends a string (input by the user) to the server and the server prints the
string on the screen after receiving it.
2. Develop a TCP-based client-server socket program for transferring a large message. The
message transmitted from the client to server is read from a large file (size is about 30000
bytes). The entire message is sent by the client as a single data-unit. After receiving the
file, the server sends an ACK message to the receiver. Verify that the file has been sent
completely and correctly by comparing the received file with the original file (“diff”
command could be used). Measure the message transfer time and throughput.
3. This problem is similar to problem (2) above, but the message is split into short data-units
which are sent one by one without waiting for any acknowledgement between
transmissions of two successive data-units. Verify that the file has been sent completely
and correctly by comparing the received file with the original file. Measure the message
Page 1 of 2transfer time and throughput. Repeat it for different (at least six) data-unit sizes (say, from
100 bytes to 1000 bytes).
4. This problem is similar to problem (3) above, but it uses UDP as the transport protocol.
5. This problem is similar to problem (4) above, but the file is transferred using stop-and-
wait flow control protocol.
Project Assignment
Part-I
A hypothetical reliable data transfer protocol: A jumping window based Go-back-N
ARQ protocol for file transfer using UDP
In this protocol, a window of size W is used. The sender continuously sends W packets
corresponding to the current window, and then waits for an acknowledgement. The
receiver receives W packets. If all the packets are error-free, it sends out a positive
acknowledgement, say RR-i (RR: Receiver Ready). The receiver then moves its window
starting from the packet with the sequence number i. Upon receiving RR-i the sender
moves its window starting from the packet with the sequence number i. If a receiver
receives a damaged packet (say, with the sequence number j) in its current window, it
receives and discards all the remaining packets in the current window and it sends out a
negative acknowledgement, say REJ-j (REJ: Reject). The receiver then moves its window
starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2CO318 - Systems and Network Programming Lab and Project II
Semester 6, Aug-Sep 2014
Project II: Developing a reliable data transfer protocol for computer networks
and investigating its performance
Project Details:
In this project, you are required to develop a hypothetical reliable data transfer protocol for
computer networks (using socket programming with C or other language) and to investigate its
performance. That is, you will be building a simulator for the reliable data transfer protocol,
which can be used for investigating its performance.
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announced later)
Report submission (not more than 10 pages for Part-I and Part-II): at the DEMO
Marks: Part-I = 60% and Part-II = 40% (based on the DEMO and the report)
Example-Problems (Solutions given)
1. Develop a socket program in UNIX/Linux that uses (i) TCP as the transport protocol and
(ii) UDP as the transport protocol for transferring a short message between a client and
server. The client sends a string (input by the user) to the server and the server prints the
string on the screen after receiving it.
2. Develop a TCP-based client-server socket program for transferring a large message. The
message transmitted from the client to server is read from a large file (size is about 30000
bytes). The entire message is sent by the client as a single data-unit. After receiving the
file, the server sends an ACK message to the receiver. Verify that the file has been sent
completely and correctly by comparing the received file with the original file (“diff”
command could be used). Measure the message transfer time and throughput.
3. This problem is similar to problem (2) above, but the message is split into short data-units
which are sent one by one without waiting for any acknowledgement between
transmissions of two successive data-units. Verify that the file has been sent completely
and correctly by comparing the received file with the original file. Measure the message
Page 1 of 2transfer time and throughput. Repeat it for different (at least six) data-unit sizes (say, from
100 bytes to 1000 bytes).
4. This problem is similar to problem (3) above, but it uses UDP as the transport protocol.
5. This problem is similar to problem (4) above, but the file is transferred using stop-and-
wait flow control protocol.
Project Assignment
Part-I
A hypothetical reliable data transfer protocol: A jumping window based Go-back-N
ARQ protocol for file transfer using UDP
In this protocol, a window of size W is used. The sender continuously sends W packets
corresponding to the current window, and then waits for an acknowledgement. The
receiver receives W packets. If all the packets are error-free, it sends out a positive
acknowledgement, say RR-i (RR: Receiver Ready). The receiver then moves its window
starting from the packet with the sequence number i. Upon receiving RR-i the sender
moves its window starting from the packet with the sequence number i. If a receiver
receives a damaged packet (say, with the sequence number j) in its current window, it
receives and discards all the remaining packets in the current window and it sends out a
negative acknowledgement, say REJ-j (REJ: Reject). The receiver then moves its window
starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announced later)
Report submission (not more than 10 pages for Part-I and Part-II): at the DEMO
Marks: Part-I = 60% and Part-II = 40% (based on the DEMO and the report)
Example-Problems (Solutions given)
1. Develop a socket program in UNIX/Linux that uses (i) TCP as the transport protocol and
(ii) UDP as the transport protocol for transferring a short message between a client and
server. The client sends a string (input by the user) to the server and the server prints the
string on the screen after receiving it.
2. Develop a TCP-based client-server socket program for transferring a large message. The
message transmitted from the client to server is read from a large file (size is about 30000
bytes). The entire message is sent by the client as a single data-unit. After receiving the
file, the server sends an ACK message to the receiver. Verify that the file has been sent
completely and correctly by comparing the received file with the original file (“diff”
command could be used). Measure the message transfer time and throughput.
3. This problem is similar to problem (2) above, but the message is split into short data-units
which are sent one by one without waiting for any acknowledgement between
transmissions of two successive data-units. Verify that the file has been sent completely
and correctly by comparing the received file with the original file. Measure the message
Page 1 of 2transfer time and throughput. Repeat it for different (at least six) data-unit sizes (say, from
100 bytes to 1000 bytes).
4. This problem is similar to problem (3) above, but it uses UDP as the transport protocol.
5. This problem is similar to problem (4) above, but the file is transferred using stop-and-
wait flow control protocol.
Project Assignment
Part-I
A hypothetical reliable data transfer protocol: A jumping window based Go-back-N
ARQ protocol for file transfer using UDP
In this protocol, a window of size W is used. The sender continuously sends W packets
corresponding to the current window, and then waits for an acknowledgement. The
receiver receives W packets. If all the packets are error-free, it sends out a positive
acknowledgement, say RR-i (RR: Receiver Ready). The receiver then moves its window
starting from the packet with the sequence number i. Upon receiving RR-i the sender
moves its window starting from the packet with the sequence number i. If a receiver
receives a damaged packet (say, with the sequence number j) in its current window, it
receives and discards all the remaining packets in the current window and it sends out a
negative acknowledgement, say REJ-j (REJ: Reject). The receiver then moves its window
starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2CO318 - Systems and Network Programming Lab and Project II
Semester 6, Aug-Sep 2014
Project II: Developing a reliable data transfer protocol for computer networks
and investigating its performance
Project Details:
In this project, you are required to develop a hypothetical reliable data transfer protocol for
computer networks (using socket programming with C or other language) and to investigate its
performance. That is, you will be building a simulator for the reliable data transfer protocol,
which can be used for investigating its performance.
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announced later)
Report submission (not more than 10 pages for Part-I and Part-II): at the DEMO
Marks: Part-I = 60% and Part-II = 40% (based on the DEMO and the report)
Example-Problems (Solutions given)
1. Develop a socket program in UNIX/Linux that uses (i) TCP as the transport protocol and
(ii) UDP as the transport protocol for transferring a short message between a client and
server. The client sends a string (input by the user) to the server and the server prints the
string on the screen after receiving it.
2. Develop a TCP-based client-server socket program for transferring a large message. The
message transmitted from the client to server is read from a large file (size is about 30000
bytes). The entire message is sent by the client as a single data-unit. After receiving the
file, the server sends an ACK message to the receiver. Verify that the file has been sent
completely and correctly by comparing the received file with the original file (“diff”
command could be used). Measure the message transfer time and throughput.
3. This problem is similar to problem (2) above, but the message is split into short data-units
which are sent one by one without waiting for any acknowledgement between
transmissions of two successive data-units. Verify that the file has been sent completely
and correctly by comparing the received file with the original file. Measure the message
Page 1 of 2transfer time and throughput. Repeat it for different (at least six) data-unit sizes (say, from
100 bytes to 1000 bytes).
4. This problem is similar to problem (3) above, but it uses UDP as the transport protocol.
5. This problem is similar to problem (4) above, but the file is transferred using stop-and-
wait flow control protocol.
Project Assignment
Part-I
A hypothetical reliable data transfer protocol: A jumping window based Go-back-N
ARQ protocol for file transfer using UDP
In this protocol, a window of size W is used. The sender continuously sends W packets
corresponding to the current window, and then waits for an acknowledgement. The
receiver receives W packets. If all the packets are error-free, it sends out a positive
acknowledgement, say RR-i (RR: Receiver Ready). The receiver then moves its window
starting from the packet with the sequence number i. Upon receiving RR-i the sender
moves its window starting from the packet with the sequence number i. If a receiver
receives a damaged packet (say, with the sequence number j) in its current window, it
receives and discards all the remaining packets in the current window and it sends out a
negative acknowledgement, say REJ-j (REJ: Reject). The receiver then moves its window
starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2CO318 - Systems and Network Programming Lab and Project II
Semester 6, Aug-Sep 2014
Project II: Developing a reliable data transfer protocol for computer networks
and investigating its performance
Project Details:
In this project, you are required to develop a hypothetical reliable data transfer protocol for
computer networks (using socket programming with C or other language) and to investigate its
performance. That is, you will be building a simulator for the reliable data transfer protocol,
which can be used for investigating its performance.
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announced later)
Report submission (not more than 10 pages for Part-I and Part-II): at the DEMO
Marks: Part-I = 60% and Part-II = 40% (based on the DEMO and the report)
Example-Problems (Solutions given)
1. Develop a socket program in UNIX/Linux that uses (i) TCP as the transport protocol and
(ii) UDP as the transport protocol for transferring a short message between a client and
server. The client sends a string (input by the user) to the server and the server prints the
string on the screen after receiving it.
2. Develop a TCP-based client-server socket program for transferring a large message. The
message transmitted from the client to server is read from a large file (size is about 30000
bytes). The entire message is sent by the client as a single data-unit. After receiving the
file, the server sends an ACK message to the receiver. Verify that the file has been sent
completely and correctly by comparing the received file with the original file (“diff”
command could be used). Measure the message transfer time and throughput.
3. This problem is similar to problem (2) above, but the message is split into short data-units
which are sent one by one without waiting for any acknowledgement between
transmissions of two successive data-units. Verify that the file has been sent completely
and correctly by comparing the received file with the original file. Measure the message
Page 1 of 2transfer time and throughput. Repeat it for different (at least six) data-unit sizes (say, from
100 bytes to 1000 bytes).
4. This problem is similar to problem (3) above, but it uses UDP as the transport protocol.
5. This problem is similar to problem (4) above, but the file is transferred using stop-and-
wait flow control protocol.
Project Assignment
Part-I
A hypothetical reliable data transfer protocol: A jumping window based Go-back-N
ARQ protocol for file transfer using UDP
In this protocol, a window of size W is used. The sender continuously sends W packets
corresponding to the current window, and then waits for an acknowledgement. The
receiver receives W packets. If all the packets are error-free, it sends out a positive
acknowledgement, say RR-i (RR: Receiver Ready). The receiver then moves its window
starting from the packet with the sequence number i. Upon receiving RR-i the sender
moves its window starting from the packet with the sequence number i. If a receiver
receives a damaged packet (say, with the sequence number j) in its current window, it
receives and discards all the remaining packets in the current window and it sends out a
negative acknowledgement, say REJ-j (REJ: Reject). The receiver then moves its window
starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announced later)
Report submission (not more than 10 pages for Part-I and Part-II): at the DEMO
Marks: Part-I = 60% and Part-II = 40% (based on the DEMO and the report)
Example-Problems (Solutions given)
1. Develop a socket program in UNIX/Linux that uses (i) TCP as the transport protocol and
(ii) UDP as the transport protocol for transferring a short message between a client and
server. The client sends a string (input by the user) to the server and the server prints the
string on the screen after receiving it.
2. Develop a TCP-based client-server socket program for transferring a large message. The
message transmitted from the client to server is read from a large file (size is about 30000
bytes). The entire message is sent by the client as a single data-unit. After receiving the
file, the server sends an ACK message to the receiver. Verify that the file has been sent
completely and correctly by comparing the received file with the original file (“diff”
command could be used). Measure the message transfer time and throughput.
3. This problem is similar to problem (2) above, but the message is split into short data-units
which are sent one by one without waiting for any acknowledgement between
transmissions of two successive data-units. Verify that the file has been sent completely
and correctly by comparing the received file with the original file. Measure the message
Page 1 of 2transfer time and throughput. Repeat it for different (at least six) data-unit sizes (say, from
100 bytes to 1000 bytes).
4. This problem is similar to problem (3) above, but it uses UDP as the transport protocol.
5. This problem is similar to problem (4) above, but the file is transferred using stop-and-
wait flow control protocol.
Project Assignment
Part-I
A hypothetical reliable data transfer protocol: A jumping window based Go-back-N
ARQ protocol for file transfer using UDP
In this protocol, a window of size W is used. The sender continuously sends W packets
corresponding to the current window, and then waits for an acknowledgement. The
receiver receives W packets. If all the packets are error-free, it sends out a positive
acknowledgement, say RR-i (RR: Receiver Ready). The receiver then moves its window
starting from the packet with the sequence number i. Upon receiving RR-i the sender
moves its window starting from the packet with the sequence number i. If a receiver
receives a damaged packet (say, with the sequence number j) in its current window, it
receives and discards all the remaining packets in the current window and it sends out a
negative acknowledgement, say REJ-j (REJ: Reject). The receiver then moves its window
starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2CO318 - Systems and Network Programming Lab and Project II
Semester 6, Aug-Sep 2014
Project II: Developing a reliable data transfer protocol for computer networks
and investigating its performance
Project Details:
In this project, you are required to develop a hypothetical reliable data transfer protocol for
computer networks (using socket programming with C or other language) and to investigate its
performance. That is, you will be building a simulator for the reliable data transfer protocol,
which can be used for investigating its performance.
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announced later)
Report submission (not more than 10 pages for Part-I and Part-II): at the DEMO
Marks: Part-I = 60% and Part-II = 40% (based on the DEMO and the report)
Example-Problems (Solutions given)
1. Develop a socket program in UNIX/Linux that uses (i) TCP as the transport protocol and
(ii) UDP as the transport protocol for transferring a short message between a client and
server. The client sends a string (input by the user) to the server and the server prints the
string on the screen after receiving it.
2. Develop a TCP-based client-server socket program for transferring a large message. The
message transmitted from the client to server is read from a large file (size is about 30000
bytes). The entire message is sent by the client as a single data-unit. After receiving the
file, the server sends an ACK message to the receiver. Verify that the file has been sent
completely and correctly by comparing the received file with the original file (“diff”
command could be used). Measure the message transfer time and throughput.
3. This problem is similar to problem (2) above, but the message is split into short data-units
which are sent one by one without waiting for any acknowledgement between
transmissions of two successive data-units. Verify that the file has been sent completely
and correctly by comparing the received file with the original file. Measure the message
Page 1 of 2transfer time and throughput. Repeat it for different (at least six) data-unit sizes (say, from
100 bytes to 1000 bytes).
4. This problem is similar to problem (3) above, but it uses UDP as the transport protocol.
5. This problem is similar to problem (4) above, but the file is transferred using stop-and-
wait flow control protocol.
Project Assignment
Part-I
A hypothetical reliable data transfer protocol: A jumping window based Go-back-N
ARQ protocol for file transfer using UDP
In this protocol, a window of size W is used. The sender continuously sends W packets
corresponding to the current window, and then waits for an acknowledgement. The
receiver receives W packets. If all the packets are error-free, it sends out a positive
acknowledgement, say RR-i (RR: Receiver Ready). The receiver then moves its window
starting from the packet with the sequence number i. Upon receiving RR-i the sender
moves its window starting from the packet with the sequence number i. If a receiver
receives a damaged packet (say, with the sequence number j) in its current window, it
receives and discards all the remaining packets in the current window and it sends out a
negative acknowledgement, say REJ-j (REJ: Reject). The receiver then moves its window
starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2CO318 - Systems and Network Programming Lab and Project II
Semester 6, Aug-Sep 2014
Project II: Developing a reliable data transfer protocol for computer networks
and investigating its performance
Project Details:
In this project, you are required to develop a hypothetical reliable data transfer protocol for
computer networks (using socket programming with C or other language) and to investigate its
performance. That is, you will be building a simulator for the reliable data transfer protocol,
which can be used for investigating its performance.
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announced later)
Report submission (not more than 10 pages for Part-I and Part-II): at the DEMO
Marks: Part-I = 60% and Part-II = 40% (based on the DEMO and the report)
Example-Problems (Solutions given)
1. Develop a socket program in UNIX/Linux that uses (i) TCP as the transport protocol and
(ii) UDP as the transport protocol for transferring a short message between a client and
server. The client sends a string (input by the user) to the server and the server prints the
string on the screen after receiving it.
2. Develop a TCP-based client-server socket program for transferring a large message. The
message transmitted from the client to server is read from a large file (size is about 30000
bytes). The entire message is sent by the client as a single data-unit. After receiving the
file, the server sends an ACK message to the receiver. Verify that the file has been sent
completely and correctly by comparing the received file with the original file (“diff”
command could be used). Measure the message transfer time and throughput.
3. This problem is similar to problem (2) above, but the message is split into short data-units
which are sent one by one without waiting for any acknowledgement between
transmissions of two successive data-units. Verify that the file has been sent completely
and correctly by comparing the received file with the original file. Measure the message
Page 1 of 2transfer time and throughput. Repeat it for different (at least six) data-unit sizes (say, from
100 bytes to 1000 bytes).
4. This problem is similar to problem (3) above, but it uses UDP as the transport protocol.
5. This problem is similar to problem (4) above, but the file is transferred using stop-and-
wait flow control protocol.
Project Assignment
Part-I
A hypothetical reliable data transfer protocol: A jumping window based Go-back-N
ARQ protocol for file transfer using UDP
In this protocol, a window of size W is used. The sender continuously sends W packets
corresponding to the current window, and then waits for an acknowledgement. The
receiver receives W packets. If all the packets are error-free, it sends out a positive
acknowledgement, say RR-i (RR: Receiver Ready). The receiver then moves its window
starting from the packet with the sequence number i. Upon receiving RR-i the sender
moves its window starting from the packet with the sequence number i. If a receiver
receives a damaged packet (say, with the sequence number j) in its current window, it
receives and discards all the remaining packets in the current window and it sends out a
negative acknowledgement, say REJ-j (REJ: Reject). The receiver then moves its window
starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announced later)
Report submission (not more than 10 pages for Part-I and Part-II): at the DEMO
Marks: Part-I = 60% and Part-II = 40% (based on the DEMO and the report)
Example-Problems (Solutions given)
1. Develop a socket program in UNIX/Linux that uses (i) TCP as the transport protocol and
(ii) UDP as the transport protocol for transferring a short message between a client and
server. The client sends a string (input by the user) to the server and the server prints the
string on the screen after receiving it.
2. Develop a TCP-based client-server socket program for transferring a large message. The
message transmitted from the client to server is read from a large file (size is about 30000
bytes). The entire message is sent by the client as a single data-unit. After receiving the
file, the server sends an ACK message to the receiver. Verify that the file has been sent
completely and correctly by comparing the received file with the original file (“diff”
command could be used). Measure the message transfer time and throughput.
3. This problem is similar to problem (2) above, but the message is split into short data-units
which are sent one by one without waiting for any acknowledgement between
transmissions of two successive data-units. Verify that the file has been sent completely
and correctly by comparing the received file with the original file. Measure the message
Page 1 of 2transfer time and throughput. Repeat it for different (at least six) data-unit sizes (say, from
100 bytes to 1000 bytes).
4. This problem is similar to problem (3) above, but it uses UDP as the transport protocol.
5. This problem is similar to problem (4) above, but the file is transferred using stop-and-
wait flow control protocol.
Project Assignment
Part-I
A hypothetical reliable data transfer protocol: A jumping window based Go-back-N
ARQ protocol for file transfer using UDP
In this protocol, a window of size W is used. The sender continuously sends W packets
corresponding to the current window, and then waits for an acknowledgement. The
receiver receives W packets. If all the packets are error-free, it sends out a positive
acknowledgement, say RR-i (RR: Receiver Ready). The receiver then moves its window
starting from the packet with the sequence number i. Upon receiving RR-i the sender
moves its window starting from the packet with the sequence number i. If a receiver
receives a damaged packet (say, with the sequence number j) in its current window, it
receives and discards all the remaining packets in the current window and it sends out a
negative acknowledgement, say REJ-j (REJ: Reject). The receiver then moves its window
starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration shouldstarting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2CO318 - Systems and Network Programming Lab and Project II
Semester 6, Aug-Sep 2014
Project II: Developing a reliable data transfer protocol for computer networks
and investigating its performance
Project Details:
In this project, you are required to develop a hypothetical reliable data transfer protocol for
computer networks (using socket programming with C or other language) and to investigate its
performance. That is, you will be building a simulator for the reliable data transfer protocol,
which can be used for investigating its performance.
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announced later)
Report submission (not more than 10 pages for Part-I and Part-II): at the DEMO
Marks: Part-I = 60% and Part-II = 40% (based on the DEMO and the report)
Example-Problems (Solutions given)
1. Develop a socket program in UNIX/Linux that uses (i) TCP as the transport protocol and
(ii) UDP as the transport protocol for transferring a short message between a client and
server. The client sends a string (input by the user) to the server and the server prints the
string on the screen after receiving it.
2. Develop a TCP-based client-server socket program for transferring a large message. The
message transmitted from the client to server is read from a large file (size is about 30000
bytes). The entire message is sent by the client as a single data-unit. After receiving the
file, the server sends an ACK message to the receiver. Verify that the file has been sent
completely and correctly by comparing the received file with the original file (“diff”
command could be used). Measure the message transfer time and throughput.
3. This problem is similar to problem (2) above, but the message is split into short data-units
which are sent one by one without waiting for any acknowledgement between
transmissions of two successive data-units. Verify that the file has been sent completely
and correctly by comparing the received file with the original file. Measure the message
Page 1 of 2transfer time and throughput. Repeat it for different (at least six) data-unit sizes (say, from
100 bytes to 1000 bytes).
4. This problem is similar to problem (3) above, but it uses UDP as the transport protocol.
5. This problem is similar to problem (4) above, but the file is transferred using stop-and-
wait flow control protocol.
Project Assignment
Part-I
A hypothetical reliable data transfer protocol: A jumping window based Go-back-N
ARQ protocol for file transfer using UDP
In this protocol, a window of size W is used. The sender continuously sends W packets
corresponding to the current window, and then waits for an acknowledgement. The
receiver receives W packets. If all the packets are error-free, it sends out a positive
acknowledgement, say RR-i (RR: Receiver Ready). The receiver then moves its window
starting from the packet with the sequence number i. Upon receiving RR-i the sender
moves its window starting from the packet with the sequence number i. If a receiver
receives a damaged packet (say, with the sequence number j) in its current window, it
receives and discards all the remaining packets in the current window and it sends out a
negative acknowledgement, say REJ-j (REJ: Reject). The receiver then moves its window
starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2CO318 - Systems and Network Programming Lab and Project II
Semester 6, Aug-Sep 2014
Project II: Developing a reliable data transfer protocol for computer networks
and investigating its performance
Project Details:
In this project, you are required to develop a hypothetical reliable data transfer protocol for
computer networks (using socket programming with C or other language) and to investigate its
performance. That is, you will be building a simulator for the reliable data transfer protocol,
which can be used for investigating its performance.
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announced later)
Report submission (not more than 10 pages for Part-I and Part-II): at the DEMO
Marks: Part-I = 60% and Part-II = 40% (based on the DEMO and the report)
Example-Problems (Solutions given)
1. Develop a socket program in UNIX/Linux that uses (i) TCP as the transport protocol and
(ii) UDP as the transport protocol for transferring a short message between a client and
server. The client sends a string (input by the user) to the server and the server prints the
string on the screen after receiving it.
2. Develop a TCP-based client-server socket program for transferring a large message. The
message transmitted from the client to server is read from a large file (size is about 30000
bytes). The entire message is sent by the client as a single data-unit. After receiving the
file, the server sends an ACK message to the receiver. Verify that the file has been sent
completely and correctly by comparing the received file with the original file (“diff”
command could be used). Measure the message transfer time and throughput.
3. This problem is similar to problem (2) above, but the message is split into short data-units
which are sent one by one without waiting for any acknowledgement between
transmissions of two successive data-units. Verify that the file has been sent completely
and correctly by comparing the received file with the original file. Measure the message
Page 1 of 2transfer time and throughput. Repeat it for different (at least six) data-unit sizes (say, from
100 bytes to 1000 bytes).
4. This problem is similar to problem (3) above, but it uses UDP as the transport protocol.
5. This problem is similar to problem (4) above, but the file is transferred using stop-and-
wait flow control protocol.
Project Assignment
Part-I
A hypothetical reliable data transfer protocol: A jumping window based Go-back-N
ARQ protocol for file transfer using UDP
In this protocol, a window of size W is used. The sender continuously sends W packets
corresponding to the current window, and then waits for an acknowledgement. The
receiver receives W packets. If all the packets are error-free, it sends out a positive
acknowledgement, say RR-i (RR: Receiver Ready). The receiver then moves its window
starting from the packet with the sequence number i. Upon receiving RR-i the sender
moves its window starting from the packet with the sequence number i. If a receiver
receives a damaged packet (say, with the sequence number j) in its current window, it
receives and discards all the remaining packets in the current window and it sends out a
negative acknowledgement, say REJ-j (REJ: Reject). The receiver then moves its window
starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announced later)
Report submission (not more than 10 pages for Part-I and Part-II): at the DEMO
Marks: Part-I = 60% and Part-II = 40% (based on the DEMO and the report)
Example-Problems (Solutions given)
1. Develop a socket program in UNIX/Linux that uses (i) TCP as the transport protocol and
(ii) UDP as the transport protocol for transferring a short message between a client and
server. The client sends a string (input by the user) to the server and the server prints the
string on the screen after receiving it.
2. Develop a TCP-based client-server socket program for transferring a large message. The
message transmitted from the client to server is read from a large file (size is about 30000
bytes). The entire message is sent by the client as a single data-unit. After receiving the
file, the server sends an ACK message to the receiver. Verify that the file has been sent
completely and correctly by comparing the received file with the original file (“diff”
command could be used). Measure the message transfer time and throughput.
3. This problem is similar to problem (2) above, but the message is split into short data-units
which are sent one by one without waiting for any acknowledgement between
transmissions of two successive data-units. Verify that the file has been sent completely
and correctly by comparing the received file with the original file. Measure the message
Page 1 of 2transfer time and throughput. Repeat it for different (at least six) data-unit sizes (say, from
100 bytes to 1000 bytes).
4. This problem is similar to problem (3) above, but it uses UDP as the transport protocol.
5. This problem is similar to problem (4) above, but the file is transferred using stop-and-
wait flow control protocol.
Project Assignment
Part-I
A hypothetical reliable data transfer protocol: A jumping window based Go-back-N
ARQ protocol for file transfer using UDP
In this protocol, a window of size W is used. The sender continuously sends W packets
corresponding to the current window, and then waits for an acknowledgement. The
receiver receives W packets. If all the packets are error-free, it sends out a positive
acknowledgement, say RR-i (RR: Receiver Ready). The receiver then moves its window
starting from the packet with the sequence number i. Upon receiving RR-i the sender
moves its window starting from the packet with the sequence number i. If a receiver
receives a damaged packet (say, with the sequence number j) in its current window, it
receives and discards all the remaining packets in the current window and it sends out a
negative acknowledgement, say REJ-j (REJ: Reject). The receiver then moves its window
starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2CO318 - Systems and Network Programming Lab and Project II
Semester 6, Aug-Sep 2014
Project II: Developing a reliable data transfer protocol for computer networks
and investigating its performance
Project Details:
In this project, you are required to develop a hypothetical reliable data transfer protocol for
computer networks (using socket programming with C or other language) and to investigate its
performance. That is, you will be building a simulator for the reliable data transfer protocol,
which can be used for investigating its performance.
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announced later)
Report submission (not more than 10 pages for Part-I and Part-II): at the DEMO
Marks: Part-I = 60% and Part-II = 40% (based on the DEMO and the report)
Example-Problems (Solutions given)
1. Develop a socket program in UNIX/Linux that uses (i) TCP as the transport protocol and
(ii) UDP as the transport protocol for transferring a short message between a client and
server. The client sends a string (input by the user) to the server and the server prints the
string on the screen after receiving it.
2. Develop a TCP-based client-server socket program for transferring a large message. The
message transmitted from the client to server is read from a large file (size is about 30000
bytes). The entire message is sent by the client as a single data-unit. After receiving the
file, the server sends an ACK message to the receiver. Verify that the file has been sent
completely and correctly by comparing the received file with the original file (“diff”
command could be used). Measure the message transfer time and throughput.
3. This problem is similar to problem (2) above, but the message is split into short data-units
which are sent one by one without waiting for any acknowledgement between
transmissions of two successive data-units. Verify that the file has been sent completely
and correctly by comparing the received file with the original file. Measure the message
Page 1 of 2transfer time and throughput. Repeat it for different (at least six) data-unit sizes (say, from
100 bytes to 1000 bytes).
4. This problem is similar to problem (3) above, but it uses UDP as the transport protocol.
5. This problem is similar to problem (4) above, but the file is transferred using stop-and-
wait flow control protocol.
Project Assignment
Part-I
A hypothetical reliable data transfer protocol: A jumping window based Go-back-N
ARQ protocol for file transfer using UDP
In this protocol, a window of size W is used. The sender continuously sends W packets
corresponding to the current window, and then waits for an acknowledgement. The
receiver receives W packets. If all the packets are error-free, it sends out a positive
acknowledgement, say RR-i (RR: Receiver Ready). The receiver then moves its window
starting from the packet with the sequence number i. Upon receiving RR-i the sender
moves its window starting from the packet with the sequence number i. If a receiver
receives a damaged packet (say, with the sequence number j) in its current window, it
receives and discards all the remaining packets in the current window and it sends out a
negative acknowledgement, say REJ-j (REJ: Reject). The receiver then moves its window
starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2CO318 - Systems and Network Programming Lab and Project II
Semester 6, Aug-Sep 2014
Project II: Developing a reliable data transfer protocol for computer networks
and investigating its performance
Project Details:
In this project, you are required to develop a hypothetical reliable data transfer protocol for
computer networks (using socket programming with C or other language) and to investigate its
performance. That is, you will be building a simulator for the reliable data transfer protocol,
which can be used for investigating its performance.
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announced later)
Report submission (not more than 10 pages for Part-I and Part-II): at the DEMO
Marks: Part-I = 60% and Part-II = 40% (based on the DEMO and the report)
Example-Problems (Solutions given)
1. Develop a socket program in UNIX/Linux that uses (i) TCP as the transport protocol and
(ii) UDP as the transport protocol for transferring a short message between a client and
server. The client sends a string (input by the user) to the server and the server prints the
string on the screen after receiving it.
2. Develop a TCP-based client-server socket program for transferring a large message. The
message transmitted from the client to server is read from a large file (size is about 30000
bytes). The entire message is sent by the client as a single data-unit. After receiving the
file, the server sends an ACK message to the receiver. Verify that the file has been sent
completely and correctly by comparing the received file with the original file (“diff”
command could be used). Measure the message transfer time and throughput.
3. This problem is similar to problem (2) above, but the message is split into short data-units
which are sent one by one without waiting for any acknowledgement between
transmissions of two successive data-units. Verify that the file has been sent completely
and correctly by comparing the received file with the original file. Measure the message
Page 1 of 2transfer time and throughput. Repeat it for different (at least six) data-unit sizes (say, from
100 bytes to 1000 bytes).
4. This problem is similar to problem (3) above, but it uses UDP as the transport protocol.
5. This problem is similar to problem (4) above, but the file is transferred using stop-and-
wait flow control protocol.
Project Assignment
Part-I
A hypothetical reliable data transfer protocol: A jumping window based Go-back-N
ARQ protocol for file transfer using UDP
In this protocol, a window of size W is used. The sender continuously sends W packets
corresponding to the current window, and then waits for an acknowledgement. The
receiver receives W packets. If all the packets are error-free, it sends out a positive
acknowledgement, say RR-i (RR: Receiver Ready). The receiver then moves its window
starting from the packet with the sequence number i. Upon receiving RR-i the sender
moves its window starting from the packet with the sequence number i. If a receiver
receives a damaged packet (say, with the sequence number j) in its current window, it
receives and discards all the remaining packets in the current window and it sends out a
negative acknowledgement, say REJ-j (REJ: Reject). The receiver then moves its window
starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announced later)
Report submission (not more than 10 pages for Part-I and Part-II): at the DEMO
Marks: Part-I = 60% and Part-II = 40% (based on the DEMO and the report)
Example-Problems (Solutions given)
1. Develop a socket program in UNIX/Linux that uses (i) TCP as the transport protocol and
(ii) UDP as the transport protocol for transferring a short message between a client and
server. The client sends a string (input by the user) to the server and the server prints the
string on the screen after receiving it.
2. Develop a TCP-based client-server socket program for transferring a large message. The
message transmitted from the client to server is read from a large file (size is about 30000
bytes). The entire message is sent by the client as a single data-unit. After receiving the
file, the server sends an ACK message to the receiver. Verify that the file has been sent
completely and correctly by comparing the received file with the original file (“diff”
command could be used). Measure the message transfer time and throughput.
3. This problem is similar to problem (2) above, but the message is split into short data-units
which are sent one by one without waiting for any acknowledgement between
transmissions of two successive data-units. Verify that the file has been sent completely
and correctly by comparing the received file with the original file. Measure the message
Page 1 of 2transfer time and throughput. Repeat it for different (at least six) data-unit sizes (say, from
100 bytes to 1000 bytes).
4. This problem is similar to problem (3) above, but it uses UDP as the transport protocol.
5. This problem is similar to problem (4) above, but the file is transferred using stop-and-
wait flow control protocol.
Project Assignment
Part-I
A hypothetical reliable data transfer protocol: A jumping window based Go-back-N
ARQ protocol for file transfer using UDP
In this protocol, a window of size W is used. The sender continuously sends W packets
corresponding to the current window, and then waits for an acknowledgement. The
receiver receives W packets. If all the packets are error-free, it sends out a positive
acknowledgement, say RR-i (RR: Receiver Ready). The receiver then moves its window
starting from the packet with the sequence number i. Upon receiving RR-i the sender
moves its window starting from the packet with the sequence number i. If a receiver
receives a damaged packet (say, with the sequence number j) in its current window, it
receives and discards all the remaining packets in the current window and it sends out a
negative acknowledgement, say REJ-j (REJ: Reject). The receiver then moves its window
starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2CO318 - Systems and Network Programming Lab and Project II
Semester 6, Aug-Sep 2014
Project II: Developing a reliable data transfer protocol for computer networks
and investigating its performance
Project Details:
In this project, you are required to develop a hypothetical reliable data transfer protocol for
computer networks (using socket programming with C or other language) and to investigate its
performance. That is, you will be building a simulator for the reliable data transfer protocol,
which can be used for investigating its performance.
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announced later)
Report submission (not more than 10 pages for Part-I and Part-II): at the DEMO
Marks: Part-I = 60% and Part-II = 40% (based on the DEMO and the report)
Example-Problems (Solutions given)
1. Develop a socket program in UNIX/Linux that uses (i) TCP as the transport protocol and
(ii) UDP as the transport protocol for transferring a short message between a client and
server. The client sends a string (input by the user) to the server and the server prints the
string on the screen after receiving it.
2. Develop a TCP-based client-server socket program for transferring a large message. The
message transmitted from the client to server is read from a large file (size is about 30000
bytes). The entire message is sent by the client as a single data-unit. After receiving the
file, the server sends an ACK message to the receiver. Verify that the file has been sent
completely and correctly by comparing the received file with the original file (“diff”
command could be used). Measure the message transfer time and throughput.
3. This problem is similar to problem (2) above, but the message is split into short data-units
which are sent one by one without waiting for any acknowledgement between
transmissions of two successive data-units. Verify that the file has been sent completely
and correctly by comparing the received file with the original file. Measure the message
Page 1 of 2transfer time and throughput. Repeat it for different (at least six) data-unit sizes (say, from
100 bytes to 1000 bytes).
4. This problem is similar to problem (3) above, but it uses UDP as the transport protocol.
5. This problem is similar to problem (4) above, but the file is transferred using stop-and-
wait flow control protocol.
Project Assignment
Part-I
A hypothetical reliable data transfer protocol: A jumping window based Go-back-N
ARQ protocol for file transfer using UDP
In this protocol, a window of size W is used. The sender continuously sends W packets
corresponding to the current window, and then waits for an acknowledgement. The
receiver receives W packets. If all the packets are error-free, it sends out a positive
acknowledgement, say RR-i (RR: Receiver Ready). The receiver then moves its window
starting from the packet with the sequence number i. Upon receiving RR-i the sender
moves its window starting from the packet with the sequence number i. If a receiver
receives a damaged packet (say, with the sequence number j) in its current window, it
receives and discards all the remaining packets in the current window and it sends out a
negative acknowledgement, say REJ-j (REJ: Reject). The receiver then moves its window
starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2CO318 - Systems and Network Programming Lab and Project II
Semester 6, Aug-Sep 2014
Project II: Developing a reliable data transfer protocol for computer networks
and investigating its performance
Project Details:
In this project, you are required to develop a hypothetical reliable data transfer protocol for
computer networks (using socket programming with C or other language) and to investigate its
performance. That is, you will be building a simulator for the reliable data transfer protocol,
which can be used for investigating its performance.
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announced later)
Report submission (not more than 10 pages for Part-I and Part-II): at the DEMO
Marks: Part-I = 60% and Part-II = 40% (based on the DEMO and the report)
Example-Problems (Solutions given)
1. Develop a socket program in UNIX/Linux that uses (i) TCP as the transport protocol and
(ii) UDP as the transport protocol for transferring a short message between a client and
server. The client sends a string (input by the user) to the server and the server prints the
string on the screen after receiving it.
2. Develop a TCP-based client-server socket program for transferring a large message. The
message transmitted from the client to server is read from a large file (size is about 30000
bytes). The entire message is sent by the client as a single data-unit. After receiving the
file, the server sends an ACK message to the receiver. Verify that the file has been sent
completely and correctly by comparing the received file with the original file (“diff”
command could be used). Measure the message transfer time and throughput.
3. This problem is similar to problem (2) above, but the message is split into short data-units
which are sent one by one without waiting for any acknowledgement between
transmissions of two successive data-units. Verify that the file has been sent completely
and correctly by comparing the received file with the original file. Measure the message
Page 1 of 2transfer time and throughput. Repeat it for different (at least six) data-unit sizes (say, from
100 bytes to 1000 bytes).
4. This problem is similar to problem (3) above, but it uses UDP as the transport protocol.
5. This problem is similar to problem (4) above, but the file is transferred using stop-and-
wait flow control protocol.
Project Assignment
Part-I
A hypothetical reliable data transfer protocol: A jumping window based Go-back-N
ARQ protocol for file transfer using UDP
In this protocol, a window of size W is used. The sender continuously sends W packets
corresponding to the current window, and then waits for an acknowledgement. The
receiver receives W packets. If all the packets are error-free, it sends out a positive
acknowledgement, say RR-i (RR: Receiver Ready). The receiver then moves its window
starting from the packet with the sequence number i. Upon receiving RR-i the sender
moves its window starting from the packet with the sequence number i. If a receiver
receives a damaged packet (say, with the sequence number j) in its current window, it
receives and discards all the remaining packets in the current window and it sends out a
negative acknowledgement, say REJ-j (REJ: Reject). The receiver then moves its window
starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announced later)
Report submission (not more than 10 pages for Part-I and Part-II): at the DEMO
Marks: Part-I = 60% and Part-II = 40% (based on the DEMO and the report)
Example-Problems (Solutions given)
1. Develop a socket program in UNIX/Linux that uses (i) TCP as the transport protocol and
(ii) UDP as the transport protocol for transferring a short message between a client and
server. The client sends a string (input by the user) to the server and the server prints the
string on the screen after receiving it.
2. Develop a TCP-based client-server socket program for transferring a large message. The
message transmitted from the client to server is read from a large file (size is about 30000
bytes). The entire message is sent by the client as a single data-unit. After receiving the
file, the server sends an ACK message to the receiver. Verify that the file has been sent
completely and correctly by comparing the received file with the original file (“diff”
command could be used). Measure the message transfer time and throughput.
3. This problem is similar to problem (2) above, but the message is split into short data-units
which are sent one by one without waiting for any acknowledgement between
transmissions of two successive data-units. Verify that the file has been sent completely
and correctly by comparing the received file with the original file. Measure the message
Page 1 of 2transfer time and throughput. Repeat it for different (at least six) data-unit sizes (say, from
100 bytes to 1000 bytes).
4. This problem is similar to problem (3) above, but it uses UDP as the transport protocol.
5. This problem is similar to problem (4) above, but the file is transferred using stop-and-
wait flow control protocol.
Project Assignment
Part-I
A hypothetical reliable data transfer protocol: A jumping window based Go-back-N
ARQ protocol for file transfer using UDP
In this protocol, a window of size W is used. The sender continuously sends W packets
corresponding to the current window, and then waits for an acknowledgement. The
receiver receives W packets. If all the packets are error-free, it sends out a positive
acknowledgement, say RR-i (RR: Receiver Ready). The receiver then moves its window
starting from the packet with the sequence number i. Upon receiving RR-i the sender
moves its window starting from the packet with the sequence number i. If a receiver
receives a damaged packet (say, with the sequence number j) in its current window, it
receives and discards all the remaining packets in the current window and it sends out a
negative acknowledgement, say REJ-j (REJ: Reject). The receiver then moves its window
starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2CO318 - Systems and Network Programming Lab and Project II
Semester 6, Aug-Sep 2014
Project II: Developing a reliable data transfer protocol for computer networks
and investigating its performance
Project Details:
In this project, you are required to develop a hypothetical reliable data transfer protocol for
computer networks (using socket programming with C or other language) and to investigate its
performance. That is, you will be building a simulator for the reliable data transfer protocol,
which can be used for investigating its performance.
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announced later)
Report submission (not more than 10 pages for Part-I and Part-II): at the DEMO
Marks: Part-I = 60% and Part-II = 40% (based on the DEMO and the report)
Example-Problems (Solutions given)
1. Develop a socket program in UNIX/Linux that uses (i) TCP as the transport protocol and
(ii) UDP as the transport protocol for transferring a short message between a client and
server. The client sends a string (input by the user) to the server and the server prints the
string on the screen after receiving it.
2. Develop a TCP-based client-server socket program for transferring a large message. The
message transmitted from the client to server is read from a large file (size is about 30000
bytes). The entire message is sent by the client as a single data-unit. After receiving the
file, the server sends an ACK message to the receiver. Verify that the file has been sent
completely and correctly by comparing the received file with the original file (“diff”
command could be used). Measure the message transfer time and throughput.
3. This problem is similar to problem (2) above, but the message is split into short data-units
which are sent one by one without waiting for any acknowledgement between
transmissions of two successive data-units. Verify that the file has been sent completely
and correctly by comparing the received file with the original file. Measure the message
Page 1 of 2transfer time and throughput. Repeat it for different (at least six) data-unit sizes (say, from
100 bytes to 1000 bytes).
4. This problem is similar to problem (3) above, but it uses UDP as the transport protocol.
5. This problem is similar to problem (4) above, but the file is transferred using stop-and-
wait flow control protocol.
Project Assignment
Part-I
A hypothetical reliable data transfer protocol: A jumping window based Go-back-N
ARQ protocol for file transfer using UDP
In this protocol, a window of size W is used. The sender continuously sends W packets
corresponding to the current window, and then waits for an acknowledgement. The
receiver receives W packets. If all the packets are error-free, it sends out a positive
acknowledgement, say RR-i (RR: Receiver Ready). The receiver then moves its window
starting from the packet with the sequence number i. Upon receiving RR-i the sender
moves its window starting from the packet with the sequence number i. If a receiver
receives a damaged packet (say, with the sequence number j) in its current window, it
receives and discards all the remaining packets in the current window and it sends out a
negative acknowledgement, say REJ-j (REJ: Reject). The receiver then moves its window
starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2CO318 - Systems and Network Programming Lab and Project II
Semester 6, Aug-Sep 2014
Project II: Developing a reliable data transfer protocol for computer networks
and investigating its performance
Project Details:
In this project, you are required to develop a hypothetical reliable data transfer protocol for
computer networks (using socket programming with C or other language) and to investigate its
performance. That is, you will be building a simulator for the reliable data transfer protocol,
which can be used for investigating its performance.
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announced later)
Report submission (not more than 10 pages for Part-I and Part-II): at the DEMO
Marks: Part-I = 60% and Part-II = 40% (based on the DEMO and the report)
Example-Problems (Solutions given)
1. Develop a socket program in UNIX/Linux that uses (i) TCP as the transport protocol and
(ii) UDP as the transport protocol for transferring a short message between a client and
server. The client sends a string (input by the user) to the server and the server prints the
string on the screen after receiving it.
2. Develop a TCP-based client-server socket program for transferring a large message. The
message transmitted from the client to server is read from a large file (size is about 30000
bytes). The entire message is sent by the client as a single data-unit. After receiving the
file, the server sends an ACK message to the receiver. Verify that the file has been sent
completely and correctly by comparing the received file with the original file (“diff”
command could be used). Measure the message transfer time and throughput.
3. This problem is similar to problem (2) above, but the message is split into short data-units
which are sent one by one without waiting for any acknowledgement between
transmissions of two successive data-units. Verify that the file has been sent completely
and correctly by comparing the received file with the original file. Measure the message
Page 1 of 2transfer time and throughput. Repeat it for different (at least six) data-unit sizes (say, from
100 bytes to 1000 bytes).
4. This problem is similar to problem (3) above, but it uses UDP as the transport protocol.
5. This problem is similar to problem (4) above, but the file is transferred using stop-and-
wait flow control protocol.
Project Assignment
Part-I
A hypothetical reliable data transfer protocol: A jumping window based Go-back-N
ARQ protocol for file transfer using UDP
In this protocol, a window of size W is used. The sender continuously sends W packets
corresponding to the current window, and then waits for an acknowledgement. The
receiver receives W packets. If all the packets are error-free, it sends out a positive
acknowledgement, say RR-i (RR: Receiver Ready). The receiver then moves its window
starting from the packet with the sequence number i. Upon receiving RR-i the sender
moves its window starting from the packet with the sequence number i. If a receiver
receives a damaged packet (say, with the sequence number j) in its current window, it
receives and discards all the remaining packets in the current window and it sends out a
negative acknowledgement, say REJ-j (REJ: Reject). The receiver then moves its window
starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announced later)
Report submission (not more than 10 pages for Part-I and Part-II): at the DEMO
Marks: Part-I = 60% and Part-II = 40% (based on the DEMO and the report)
Example-Problems (Solutions given)
1. Develop a socket program in UNIX/Linux that uses (i) TCP as the transport protocol and
(ii) UDP as the transport protocol for transferring a short message between a client and
server. The client sends a string (input by the user) to the server and the server prints the
string on the screen after receiving it.
2. Develop a TCP-based client-server socket program for transferring a large message. The
message transmitted from the client to server is read from a large file (size is about 30000
bytes). The entire message is sent by the client as a single data-unit. After receiving the
file, the server sends an ACK message to the receiver. Verify that the file has been sent
completely and correctly by comparing the received file with the original file (“diff”
command could be used). Measure the message transfer time and throughput.
3. This problem is similar to problem (2) above, but the message is split into short data-units
which are sent one by one without waiting for any acknowledgement between
transmissions of two successive data-units. Verify that the file has been sent completely
and correctly by comparing the received file with the original file. Measure the message
Page 1 of 2transfer time and throughput. Repeat it for different (at least six) data-unit sizes (say, from
100 bytes to 1000 bytes).
4. This problem is similar to problem (3) above, but it uses UDP as the transport protocol.
5. This problem is similar to problem (4) above, but the file is transferred using stop-and-
wait flow control protocol.
Project Assignment
Part-I
A hypothetical reliable data transfer protocol: A jumping window based Go-back-N
ARQ protocol for file transfer using UDP
In this protocol, a window of size W is used. The sender continuously sends W packets
corresponding to the current window, and then waits for an acknowledgement. The
receiver receives W packets. If all the packets are error-free, it sends out a positive
acknowledgement, say RR-i (RR: Receiver Ready). The receiver then moves its window
starting from the packet with the sequence number i. Upon receiving RR-i the sender
moves its window starting from the packet with the sequence number i. If a receiver
receives a damaged packet (say, with the sequence number j) in its current window, it
receives and discards all the remaining packets in the current window and it sends out a
negative acknowledgement, say REJ-j (REJ: Reject). The receiver then moves its window
starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2CO318 - Systems and Network Programming Lab and Project II
Semester 6, Aug-Sep 2014
Project II: Developing a reliable data transfer protocol for computer networks
and investigating its performance
Project Details:
In this project, you are required to develop a hypothetical reliable data transfer protocol for
computer networks (using socket programming with C or other language) and to investigate its
performance. That is, you will be building a simulator for the reliable data transfer protocol,
which can be used for investigating its performance.
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announced later)
Report submission (not more than 10 pages for Part-I and Part-II): at the DEMO
Marks: Part-I = 60% and Part-II = 40% (based on the DEMO and the report)
Example-Problems (Solutions given)
1. Develop a socket program in UNIX/Linux that uses (i) TCP as the transport protocol and
(ii) UDP as the transport protocol for transferring a short message between a client and
server. The client sends a string (input by the user) to the server and the server prints the
string on the screen after receiving it.
2. Develop a TCP-based client-server socket program for transferring a large message. The
message transmitted from the client to server is read from a large file (size is about 30000
bytes). The entire message is sent by the client as a single data-unit. After receiving the
file, the server sends an ACK message to the receiver. Verify that the file has been sent
completely and correctly by comparing the received file with the original file (“diff”
command could be used). Measure the message transfer time and throughput.
3. This problem is similar to problem (2) above, but the message is split into short data-units
which are sent one by one without waiting for any acknowledgement between
transmissions of two successive data-units. Verify that the file has been sent completely
and correctly by comparing the received file with the original file. Measure the message
Page 1 of 2transfer time and throughput. Repeat it for different (at least six) data-unit sizes (say, from
100 bytes to 1000 bytes).
4. This problem is similar to problem (3) above, but it uses UDP as the transport protocol.
5. This problem is similar to problem (4) above, but the file is transferred using stop-and-
wait flow control protocol.
Project Assignment
Part-I
A hypothetical reliable data transfer protocol: A jumping window based Go-back-N
ARQ protocol for file transfer using UDP
In this protocol, a window of size W is used. The sender continuously sends W packets
corresponding to the current window, and then waits for an acknowledgement. The
receiver receives W packets. If all the packets are error-free, it sends out a positive
acknowledgement, say RR-i (RR: Receiver Ready). The receiver then moves its window
starting from the packet with the sequence number i. Upon receiving RR-i the sender
moves its window starting from the packet with the sequence number i. If a receiver
receives a damaged packet (say, with the sequence number j) in its current window, it
receives and discards all the remaining packets in the current window and it sends out a
negative acknowledgement, say REJ-j (REJ: Reject). The receiver then moves its window
starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2CO318 - Systems and Network Programming Lab and Project II
Semester 6, Aug-Sep 2014
Project II: Developing a reliable data transfer protocol for computer networks
and investigating its performance
Project Details:
In this project, you are required to develop a hypothetical reliable data transfer protocol for
computer networks (using socket programming with C or other language) and to investigate its
performance. That is, you will be building a simulator for the reliable data transfer protocol,
which can be used for investigating its performance.
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announced later)
Report submission (not more than 10 pages for Part-I and Part-II): at the DEMO
Marks: Part-I = 60% and Part-II = 40% (based on the DEMO and the report)
Example-Problems (Solutions given)
1. Develop a socket program in UNIX/Linux that uses (i) TCP as the transport protocol and
(ii) UDP as the transport protocol for transferring a short message between a client and
server. The client sends a string (input by the user) to the server and the server prints the
string on the screen after receiving it.
2. Develop a TCP-based client-server socket program for transferring a large message. The
message transmitted from the client to server is read from a large file (size is about 30000
bytes). The entire message is sent by the client as a single data-unit. After receiving the
file, the server sends an ACK message to the receiver. Verify that the file has been sent
completely and correctly by comparing the received file with the original file (“diff”
command could be used). Measure the message transfer time and throughput.
3. This problem is similar to problem (2) above, but the message is split into short data-units
which are sent one by one without waiting for any acknowledgement between
transmissions of two successive data-units. Verify that the file has been sent completely
and correctly by comparing the received file with the original file. Measure the message
Page 1 of 2transfer time and throughput. Repeat it for different (at least six) data-unit sizes (say, from
100 bytes to 1000 bytes).
4. This problem is similar to problem (3) above, but it uses UDP as the transport protocol.
5. This problem is similar to problem (4) above, but the file is transferred using stop-and-
wait flow control protocol.
Project Assignment
Part-I
A hypothetical reliable data transfer protocol: A jumping window based Go-back-N
ARQ protocol for file transfer using UDP
In this protocol, a window of size W is used. The sender continuously sends W packets
corresponding to the current window, and then waits for an acknowledgement. The
receiver receives W packets. If all the packets are error-free, it sends out a positive
acknowledgement, say RR-i (RR: Receiver Ready). The receiver then moves its window
starting from the packet with the sequence number i. Upon receiving RR-i the sender
moves its window starting from the packet with the sequence number i. If a receiver
receives a damaged packet (say, with the sequence number j) in its current window, it
receives and discards all the remaining packets in the current window and it sends out a
negative acknowledgement, say REJ-j (REJ: Reject). The receiver then moves its window
starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announced later)
Report submission (not more than 10 pages for Part-I and Part-II): at the DEMO
Marks: Part-I = 60% and Part-II = 40% (based on the DEMO and the report)
Example-Problems (Solutions given)
1. Develop a socket program in UNIX/Linux that uses (i) TCP as the transport protocol and
(ii) UDP as the transport protocol for transferring a short message between a client and
server. The client sends a string (input by the user) to the server and the server prints the
string on the screen after receiving it.
2. Develop a TCP-based client-server socket program for transferring a large message. The
message transmitted from the client to server is read from a large file (size is about 30000
bytes). The entire message is sent by the client as a single data-unit. After receiving the
file, the server sends an ACK message to the receiver. Verify that the file has been sent
completely and correctly by comparing the received file with the original file (“diff”
command could be used). Measure the message transfer time and throughput.
3. This problem is similar to problem (2) above, but the message is split into short data-units
which are sent one by one without waiting for any acknowledgement between
transmissions of two successive data-units. Verify that the file has been sent completely
and correctly by comparing the received file with the original file. Measure the message
Page 1 of 2transfer time and throughput. Repeat it for different (at least six) data-unit sizes (say, from
100 bytes to 1000 bytes).
4. This problem is similar to problem (3) above, but it uses UDP as the transport protocol.
5. This problem is similar to problem (4) above, but the file is transferred using stop-and-
wait flow control protocol.
Project Assignment
Part-I
A hypothetical reliable data transfer protocol: A jumping window based Go-back-N
ARQ protocol for file transfer using UDP
In this protocol, a window of size W is used. The sender continuously sends W packets
corresponding to the current window, and then waits for an acknowledgement. The
receiver receives W packets. If all the packets are error-free, it sends out a positive
acknowledgement, say RR-i (RR: Receiver Ready). The receiver then moves its window
starting from the packet with the sequence number i. Upon receiving RR-i the sender
moves its window starting from the packet with the sequence number i. If a receiver
receives a damaged packet (say, with the sequence number j) in its current window, it
receives and discards all the remaining packets in the current window and it sends out a
negative acknowledgement, say REJ-j (REJ: Reject). The receiver then moves its window
starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration shouldstarting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2CO318 - Systems and Network Programming Lab and Project II
Semester 6, Aug-Sep 2014
Project II: Developing a reliable data transfer protocol for computer networks
and investigating its performance
Project Details:
In this project, you are required to develop a hypothetical reliable data transfer protocol for
computer networks (using socket programming with C or other language) and to investigate its
performance. That is, you will be building a simulator for the reliable data transfer protocol,
which can be used for investigating its performance.
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announced later)
Report submission (not more than 10 pages for Part-I and Part-II): at the DEMO
Marks: Part-I = 60% and Part-II = 40% (based on the DEMO and the report)
Example-Problems (Solutions given)
1. Develop a socket program in UNIX/Linux that uses (i) TCP as the transport protocol and
(ii) UDP as the transport protocol for transferring a short message between a client and
server. The client sends a string (input by the user) to the server and the server prints the
string on the screen after receiving it.
2. Develop a TCP-based client-server socket program for transferring a large message. The
message transmitted from the client to server is read from a large file (size is about 30000
bytes). The entire message is sent by the client as a single data-unit. After receiving the
file, the server sends an ACK message to the receiver. Verify that the file has been sent
completely and correctly by comparing the received file with the original file (“diff”
command could be used). Measure the message transfer time and throughput.
3. This problem is similar to problem (2) above, but the message is split into short data-units
which are sent one by one without waiting for any acknowledgement between
transmissions of two successive data-units. Verify that the file has been sent completely
and correctly by comparing the received file with the original file. Measure the message
Page 1 of 2transfer time and throughput. Repeat it for different (at least six) data-unit sizes (say, from
100 bytes to 1000 bytes).
4. This problem is similar to problem (3) above, but it uses UDP as the transport protocol.
5. This problem is similar to problem (4) above, but the file is transferred using stop-and-
wait flow control protocol.
Project Assignment
Part-I
A hypothetical reliable data transfer protocol: A jumping window based Go-back-N
ARQ protocol for file transfer using UDP
In this protocol, a window of size W is used. The sender continuously sends W packets
corresponding to the current window, and then waits for an acknowledgement. The
receiver receives W packets. If all the packets are error-free, it sends out a positive
acknowledgement, say RR-i (RR: Receiver Ready). The receiver then moves its window
starting from the packet with the sequence number i. Upon receiving RR-i the sender
moves its window starting from the packet with the sequence number i. If a receiver
receives a damaged packet (say, with the sequence number j) in its current window, it
receives and discards all the remaining packets in the current window and it sends out a
negative acknowledgement, say REJ-j (REJ: Reject). The receiver then moves its window
starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2CO318 - Systems and Network Programming Lab and Project II
Semester 6, Aug-Sep 2014
Project II: Developing a reliable data transfer protocol for computer networks
and investigating its performance
Project Details:
In this project, you are required to develop a hypothetical reliable data transfer protocol for
computer networks (using socket programming with C or other language) and to investigate its
performance. That is, you will be building a simulator for the reliable data transfer protocol,
which can be used for investigating its performance.
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announced later)
Report submission (not more than 10 pages for Part-I and Part-II): at the DEMO
Marks: Part-I = 60% and Part-II = 40% (based on the DEMO and the report)
Example-Problems (Solutions given)
1. Develop a socket program in UNIX/Linux that uses (i) TCP as the transport protocol and
(ii) UDP as the transport protocol for transferring a short message between a client and
server. The client sends a string (input by the user) to the server and the server prints the
string on the screen after receiving it.
2. Develop a TCP-based client-server socket program for transferring a large message. The
message transmitted from the client to server is read from a large file (size is about 30000
bytes). The entire message is sent by the client as a single data-unit. After receiving the
file, the server sends an ACK message to the receiver. Verify that the file has been sent
completely and correctly by comparing the received file with the original file (“diff”
command could be used). Measure the message transfer time and throughput.
3. This problem is similar to problem (2) above, but the message is split into short data-units
which are sent one by one without waiting for any acknowledgement between
transmissions of two successive data-units. Verify that the file has been sent completely
and correctly by comparing the received file with the original file. Measure the message
Page 1 of 2transfer time and throughput. Repeat it for different (at least six) data-unit sizes (say, from
100 bytes to 1000 bytes).
4. This problem is similar to problem (3) above, but it uses UDP as the transport protocol.
5. This problem is similar to problem (4) above, but the file is transferred using stop-and-
wait flow control protocol.
Project Assignment
Part-I
A hypothetical reliable data transfer protocol: A jumping window based Go-back-N
ARQ protocol for file transfer using UDP
In this protocol, a window of size W is used. The sender continuously sends W packets
corresponding to the current window, and then waits for an acknowledgement. The
receiver receives W packets. If all the packets are error-free, it sends out a positive
acknowledgement, say RR-i (RR: Receiver Ready). The receiver then moves its window
starting from the packet with the sequence number i. Upon receiving RR-i the sender
moves its window starting from the packet with the sequence number i. If a receiver
receives a damaged packet (say, with the sequence number j) in its current window, it
receives and discards all the remaining packets in the current window and it sends out a
negative acknowledgement, say REJ-j (REJ: Reject). The receiver then moves its window
starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announced later)
Report submission (not more than 10 pages for Part-I and Part-II): at the DEMO
Marks: Part-I = 60% and Part-II = 40% (based on the DEMO and the report)
Example-Problems (Solutions given)
1. Develop a socket program in UNIX/Linux that uses (i) TCP as the transport protocol and
(ii) UDP as the transport protocol for transferring a short message between a client and
server. The client sends a string (input by the user) to the server and the server prints the
string on the screen after receiving it.
2. Develop a TCP-based client-server socket program for transferring a large message. The
message transmitted from the client to server is read from a large file (size is about 30000
bytes). The entire message is sent by the client as a single data-unit. After receiving the
file, the server sends an ACK message to the receiver. Verify that the file has been sent
completely and correctly by comparing the received file with the original file (“diff”
command could be used). Measure the message transfer time and throughput.
3. This problem is similar to problem (2) above, but the message is split into short data-units
which are sent one by one without waiting for any acknowledgement between
transmissions of two successive data-units. Verify that the file has been sent completely
and correctly by comparing the received file with the original file. Measure the message
Page 1 of 2transfer time and throughput. Repeat it for different (at least six) data-unit sizes (say, from
100 bytes to 1000 bytes).
4. This problem is similar to problem (3) above, but it uses UDP as the transport protocol.
5. This problem is similar to problem (4) above, but the file is transferred using stop-and-
wait flow control protocol.
Project Assignment
Part-I
A hypothetical reliable data transfer protocol: A jumping window based Go-back-N
ARQ protocol for file transfer using UDP
In this protocol, a window of size W is used. The sender continuously sends W packets
corresponding to the current window, and then waits for an acknowledgement. The
receiver receives W packets. If all the packets are error-free, it sends out a positive
acknowledgement, say RR-i (RR: Receiver Ready). The receiver then moves its window
starting from the packet with the sequence number i. Upon receiving RR-i the sender
moves its window starting from the packet with the sequence number i. If a receiver
receives a damaged packet (say, with the sequence number j) in its current window, it
receives and discards all the remaining packets in the current window and it sends out a
negative acknowledgement, say REJ-j (REJ: Reject). The receiver then moves its window
starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2CO318 - Systems and Network Programming Lab and Project II
Semester 6, Aug-Sep 2014
Project II: Developing a reliable data transfer protocol for computer networks
and investigating its performance
Project Details:
In this project, you are required to develop a hypothetical reliable data transfer protocol for
computer networks (using socket programming with C or other language) and to investigate its
performance. That is, you will be building a simulator for the reliable data transfer protocol,
which can be used for investigating its performance.
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announced later)
Report submission (not more than 10 pages for Part-I and Part-II): at the DEMO
Marks: Part-I = 60% and Part-II = 40% (based on the DEMO and the report)
Example-Problems (Solutions given)
1. Develop a socket program in UNIX/Linux that uses (i) TCP as the transport protocol and
(ii) UDP as the transport protocol for transferring a short message between a client and
server. The client sends a string (input by the user) to the server and the server prints the
string on the screen after receiving it.
2. Develop a TCP-based client-server socket program for transferring a large message. The
message transmitted from the client to server is read from a large file (size is about 30000
bytes). The entire message is sent by the client as a single data-unit. After receiving the
file, the server sends an ACK message to the receiver. Verify that the file has been sent
completely and correctly by comparing the received file with the original file (“diff”
command could be used). Measure the message transfer time and throughput.
3. This problem is similar to problem (2) above, but the message is split into short data-units
which are sent one by one without waiting for any acknowledgement between
transmissions of two successive data-units. Verify that the file has been sent completely
and correctly by comparing the received file with the original file. Measure the message
Page 1 of 2transfer time and throughput. Repeat it for different (at least six) data-unit sizes (say, from
100 bytes to 1000 bytes).
4. This problem is similar to problem (3) above, but it uses UDP as the transport protocol.
5. This problem is similar to problem (4) above, but the file is transferred using stop-and-
wait flow control protocol.
Project Assignment
Part-I
A hypothetical reliable data transfer protocol: A jumping window based Go-back-N
ARQ protocol for file transfer using UDP
In this protocol, a window of size W is used. The sender continuously sends W packets
corresponding to the current window, and then waits for an acknowledgement. The
receiver receives W packets. If all the packets are error-free, it sends out a positive
acknowledgement, say RR-i (RR: Receiver Ready). The receiver then moves its window
starting from the packet with the sequence number i. Upon receiving RR-i the sender
moves its window starting from the packet with the sequence number i. If a receiver
receives a damaged packet (say, with the sequence number j) in its current window, it
receives and discards all the remaining packets in the current window and it sends out a
negative acknowledgement, say REJ-j (REJ: Reject). The receiver then moves its window
starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2CO318 - Systems and Network Programming Lab and Project II
Semester 6, Aug-Sep 2014
Project II: Developing a reliable data transfer protocol for computer networks
and investigating its performance
Project Details:
In this project, you are required to develop a hypothetical reliable data transfer protocol for
computer networks (using socket programming with C or other language) and to investigate its
performance. That is, you will be building a simulator for the reliable data transfer protocol,
which can be used for investigating its performance.
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announced later)
Report submission (not more than 10 pages for Part-I and Part-II): at the DEMO
Marks: Part-I = 60% and Part-II = 40% (based on the DEMO and the report)
Example-Problems (Solutions given)
1. Develop a socket program in UNIX/Linux that uses (i) TCP as the transport protocol and
(ii) UDP as the transport protocol for transferring a short message between a client and
server. The client sends a string (input by the user) to the server and the server prints the
string on the screen after receiving it.
2. Develop a TCP-based client-server socket program for transferring a large message. The
message transmitted from the client to server is read from a large file (size is about 30000
bytes). The entire message is sent by the client as a single data-unit. After receiving the
file, the server sends an ACK message to the receiver. Verify that the file has been sent
completely and correctly by comparing the received file with the original file (“diff”
command could be used). Measure the message transfer time and throughput.
3. This problem is similar to problem (2) above, but the message is split into short data-units
which are sent one by one without waiting for any acknowledgement between
transmissions of two successive data-units. Verify that the file has been sent completely
and correctly by comparing the received file with the original file. Measure the message
Page 1 of 2transfer time and throughput. Repeat it for different (at least six) data-unit sizes (say, from
100 bytes to 1000 bytes).
4. This problem is similar to problem (3) above, but it uses UDP as the transport protocol.
5. This problem is similar to problem (4) above, but the file is transferred using stop-and-
wait flow control protocol.
Project Assignment
Part-I
A hypothetical reliable data transfer protocol: A jumping window based Go-back-N
ARQ protocol for file transfer using UDP
In this protocol, a window of size W is used. The sender continuously sends W packets
corresponding to the current window, and then waits for an acknowledgement. The
receiver receives W packets. If all the packets are error-free, it sends out a positive
acknowledgement, say RR-i (RR: Receiver Ready). The receiver then moves its window
starting from the packet with the sequence number i. Upon receiving RR-i the sender
moves its window starting from the packet with the sequence number i. If a receiver
receives a damaged packet (say, with the sequence number j) in its current window, it
receives and discards all the remaining packets in the current window and it sends out a
negative acknowledgement, say REJ-j (REJ: Reject). The receiver then moves its window
starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announced later)
Report submission (not more than 10 pages for Part-I and Part-II): at the DEMO
Marks: Part-I = 60% and Part-II = 40% (based on the DEMO and the report)
Example-Problems (Solutions given)
1. Develop a socket program in UNIX/Linux that uses (i) TCP as the transport protocol and
(ii) UDP as the transport protocol for transferring a short message between a client and
server. The client sends a string (input by the user) to the server and the server prints the
string on the screen after receiving it.
2. Develop a TCP-based client-server socket program for transferring a large message. The
message transmitted from the client to server is read from a large file (size is about 30000
bytes). The entire message is sent by the client as a single data-unit. After receiving the
file, the server sends an ACK message to the receiver. Verify that the file has been sent
completely and correctly by comparing the received file with the original file (“diff”
command could be used). Measure the message transfer time and throughput.
3. This problem is similar to problem (2) above, but the message is split into short data-units
which are sent one by one without waiting for any acknowledgement between
transmissions of two successive data-units. Verify that the file has been sent completely
and correctly by comparing the received file with the original file. Measure the message
Page 1 of 2transfer time and throughput. Repeat it for different (at least six) data-unit sizes (say, from
100 bytes to 1000 bytes).
4. This problem is similar to problem (3) above, but it uses UDP as the transport protocol.
5. This problem is similar to problem (4) above, but the file is transferred using stop-and-
wait flow control protocol.
Project Assignment
Part-I
A hypothetical reliable data transfer protocol: A jumping window based Go-back-N
ARQ protocol for file transfer using UDP
In this protocol, a window of size W is used. The sender continuously sends W packets
corresponding to the current window, and then waits for an acknowledgement. The
receiver receives W packets. If all the packets are error-free, it sends out a positive
acknowledgement, say RR-i (RR: Receiver Ready). The receiver then moves its window
starting from the packet with the sequence number i. Upon receiving RR-i the sender
moves its window starting from the packet with the sequence number i. If a receiver
receives a damaged packet (say, with the sequence number j) in its current window, it
receives and discards all the remaining packets in the current window and it sends out a
negative acknowledgement, say REJ-j (REJ: Reject). The receiver then moves its window
starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2CO318 - Systems and Network Programming Lab and Project II
Semester 6, Aug-Sep 2014
Project II: Developing a reliable data transfer protocol for computer networks
and investigating its performance
Project Details:
In this project, you are required to develop a hypothetical reliable data transfer protocol for
computer networks (using socket programming with C or other language) and to investigate its
performance. That is, you will be building a simulator for the reliable data transfer protocol,
which can be used for investigating its performance.
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announced later)
Report submission (not more than 10 pages for Part-I and Part-II): at the DEMO
Marks: Part-I = 60% and Part-II = 40% (based on the DEMO and the report)
Example-Problems (Solutions given)
1. Develop a socket program in UNIX/Linux that uses (i) TCP as the transport protocol and
(ii) UDP as the transport protocol for transferring a short message between a client and
server. The client sends a string (input by the user) to the server and the server prints the
string on the screen after receiving it.
2. Develop a TCP-based client-server socket program for transferring a large message. The
message transmitted from the client to server is read from a large file (size is about 30000
bytes). The entire message is sent by the client as a single data-unit. After receiving the
file, the server sends an ACK message to the receiver. Verify that the file has been sent
completely and correctly by comparing the received file with the original file (“diff”
command could be used). Measure the message transfer time and throughput.
3. This problem is similar to problem (2) above, but the message is split into short data-units
which are sent one by one without waiting for any acknowledgement between
transmissions of two successive data-units. Verify that the file has been sent completely
and correctly by comparing the received file with the original file. Measure the message
Page 1 of 2transfer time and throughput. Repeat it for different (at least six) data-unit sizes (say, from
100 bytes to 1000 bytes).
4. This problem is similar to problem (3) above, but it uses UDP as the transport protocol.
5. This problem is similar to problem (4) above, but the file is transferred using stop-and-
wait flow control protocol.
Project Assignment
Part-I
A hypothetical reliable data transfer protocol: A jumping window based Go-back-N
ARQ protocol for file transfer using UDP
In this protocol, a window of size W is used. The sender continuously sends W packets
corresponding to the current window, and then waits for an acknowledgement. The
receiver receives W packets. If all the packets are error-free, it sends out a positive
acknowledgement, say RR-i (RR: Receiver Ready). The receiver then moves its window
starting from the packet with the sequence number i. Upon receiving RR-i the sender
moves its window starting from the packet with the sequence number i. If a receiver
receives a damaged packet (say, with the sequence number j) in its current window, it
receives and discards all the remaining packets in the current window and it sends out a
negative acknowledgement, say REJ-j (REJ: Reject). The receiver then moves its window
starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2CO318 - Systems and Network Programming Lab and Project II
Semester 6, Aug-Sep 2014
Project II: Developing a reliable data transfer protocol for computer networks
and investigating its performance
Project Details:
In this project, you are required to develop a hypothetical reliable data transfer protocol for
computer networks (using socket programming with C or other language) and to investigate its
performance. That is, you will be building a simulator for the reliable data transfer protocol,
which can be used for investigating its performance.
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announced later)
Report submission (not more than 10 pages for Part-I and Part-II): at the DEMO
Marks: Part-I = 60% and Part-II = 40% (based on the DEMO and the report)
Example-Problems (Solutions given)
1. Develop a socket program in UNIX/Linux that uses (i) TCP as the transport protocol and
(ii) UDP as the transport protocol for transferring a short message between a client and
server. The client sends a string (input by the user) to the server and the server prints the
string on the screen after receiving it.
2. Develop a TCP-based client-server socket program for transferring a large message. The
message transmitted from the client to server is read from a large file (size is about 30000
bytes). The entire message is sent by the client as a single data-unit. After receiving the
file, the server sends an ACK message to the receiver. Verify that the file has been sent
completely and correctly by comparing the received file with the original file (“diff”
command could be used). Measure the message transfer time and throughput.
3. This problem is similar to problem (2) above, but the message is split into short data-units
which are sent one by one without waiting for any acknowledgement between
transmissions of two successive data-units. Verify that the file has been sent completely
and correctly by comparing the received file with the original file. Measure the message
Page 1 of 2transfer time and throughput. Repeat it for different (at least six) data-unit sizes (say, from
100 bytes to 1000 bytes).
4. This problem is similar to problem (3) above, but it uses UDP as the transport protocol.
5. This problem is similar to problem (4) above, but the file is transferred using stop-and-
wait flow control protocol.
Project Assignment
Part-I
A hypothetical reliable data transfer protocol: A jumping window based Go-back-N
ARQ protocol for file transfer using UDP
In this protocol, a window of size W is used. The sender continuously sends W packets
corresponding to the current window, and then waits for an acknowledgement. The
receiver receives W packets. If all the packets are error-free, it sends out a positive
acknowledgement, say RR-i (RR: Receiver Ready). The receiver then moves its window
starting from the packet with the sequence number i. Upon receiving RR-i the sender
moves its window starting from the packet with the sequence number i. If a receiver
receives a damaged packet (say, with the sequence number j) in its current window, it
receives and discards all the remaining packets in the current window and it sends out a
negative acknowledgement, say REJ-j (REJ: Reject). The receiver then moves its window
starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announced later)
Report submission (not more than 10 pages for Part-I and Part-II): at the DEMO
Marks: Part-I = 60% and Part-II = 40% (based on the DEMO and the report)
Example-Problems (Solutions given)
1. Develop a socket program in UNIX/Linux that uses (i) TCP as the transport protocol and
(ii) UDP as the transport protocol for transferring a short message between a client and
server. The client sends a string (input by the user) to the server and the server prints the
string on the screen after receiving it.
2. Develop a TCP-based client-server socket program for transferring a large message. The
message transmitted from the client to server is read from a large file (size is about 30000
bytes). The entire message is sent by the client as a single data-unit. After receiving the
file, the server sends an ACK message to the receiver. Verify that the file has been sent
completely and correctly by comparing the received file with the original file (“diff”
command could be used). Measure the message transfer time and throughput.
3. This problem is similar to problem (2) above, but the message is split into short data-units
which are sent one by one without waiting for any acknowledgement between
transmissions of two successive data-units. Verify that the file has been sent completely
and correctly by comparing the received file with the original file. Measure the message
Page 1 of 2transfer time and throughput. Repeat it for different (at least six) data-unit sizes (say, from
100 bytes to 1000 bytes).
4. This problem is similar to problem (3) above, but it uses UDP as the transport protocol.
5. This problem is similar to problem (4) above, but the file is transferred using stop-and-
wait flow control protocol.
Project Assignment
Part-I
A hypothetical reliable data transfer protocol: A jumping window based Go-back-N
ARQ protocol for file transfer using UDP
In this protocol, a window of size W is used. The sender continuously sends W packets
corresponding to the current window, and then waits for an acknowledgement. The
receiver receives W packets. If all the packets are error-free, it sends out a positive
acknowledgement, say RR-i (RR: Receiver Ready). The receiver then moves its window
starting from the packet with the sequence number i. Upon receiving RR-i the sender
moves its window starting from the packet with the sequence number i. If a receiver
receives a damaged packet (say, with the sequence number j) in its current window, it
receives and discards all the remaining packets in the current window and it sends out a
negative acknowledgement, say REJ-j (REJ: Reject). The receiver then moves its window
starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2CO318 - Systems and Network Programming Lab and Project II
Semester 6, Aug-Sep 2014
Project II: Developing a reliable data transfer protocol for computer networks
and investigating its performance
Project Details:
In this project, you are required to develop a hypothetical reliable data transfer protocol for
computer networks (using socket programming with C or other language) and to investigate its
performance. That is, you will be building a simulator for the reliable data transfer protocol,
which can be used for investigating its performance.
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announced later)
Report submission (not more than 10 pages for Part-I and Part-II): at the DEMO
Marks: Part-I = 60% and Part-II = 40% (based on the DEMO and the report)
Example-Problems (Solutions given)
1. Develop a socket program in UNIX/Linux that uses (i) TCP as the transport protocol and
(ii) UDP as the transport protocol for transferring a short message between a client and
server. The client sends a string (input by the user) to the server and the server prints the
string on the screen after receiving it.
2. Develop a TCP-based client-server socket program for transferring a large message. The
message transmitted from the client to server is read from a large file (size is about 30000
bytes). The entire message is sent by the client as a single data-unit. After receiving the
file, the server sends an ACK message to the receiver. Verify that the file has been sent
completely and correctly by comparing the received file with the original file (“diff”
command could be used). Measure the message transfer time and throughput.
3. This problem is similar to problem (2) above, but the message is split into short data-units
which are sent one by one without waiting for any acknowledgement between
transmissions of two successive data-units. Verify that the file has been sent completely
and correctly by comparing the received file with the original file. Measure the message
Page 1 of 2transfer time and throughput. Repeat it for different (at least six) data-unit sizes (say, from
100 bytes to 1000 bytes).
4. This problem is similar to problem (3) above, but it uses UDP as the transport protocol.
5. This problem is similar to problem (4) above, but the file is transferred using stop-and-
wait flow control protocol.
Project Assignment
Part-I
A hypothetical reliable data transfer protocol: A jumping window based Go-back-N
ARQ protocol for file transfer using UDP
In this protocol, a window of size W is used. The sender continuously sends W packets
corresponding to the current window, and then waits for an acknowledgement. The
receiver receives W packets. If all the packets are error-free, it sends out a positive
acknowledgement, say RR-i (RR: Receiver Ready). The receiver then moves its window
starting from the packet with the sequence number i. Upon receiving RR-i the sender
moves its window starting from the packet with the sequence number i. If a receiver
receives a damaged packet (say, with the sequence number j) in its current window, it
receives and discards all the remaining packets in the current window and it sends out a
negative acknowledgement, say REJ-j (REJ: Reject). The receiver then moves its window
starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2CO318 - Systems and Network Programming Lab and Project II
Semester 6, Aug-Sep 2014
Project II: Developing a reliable data transfer protocol for computer networks
and investigating its performance
Project Details:
In this project, you are required to develop a hypothetical reliable data transfer protocol for
computer networks (using socket programming with C or other language) and to investigate its
performance. That is, you will be building a simulator for the reliable data transfer protocol,
which can be used for investigating its performance.
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announced later)
Report submission (not more than 10 pages for Part-I and Part-II): at the DEMO
Marks: Part-I = 60% and Part-II = 40% (based on the DEMO and the report)
Example-Problems (Solutions given)
1. Develop a socket program in UNIX/Linux that uses (i) TCP as the transport protocol and
(ii) UDP as the transport protocol for transferring a short message between a client and
server. The client sends a string (input by the user) to the server and the server prints the
string on the screen after receiving it.
2. Develop a TCP-based client-server socket program for transferring a large message. The
message transmitted from the client to server is read from a large file (size is about 30000
bytes). The entire message is sent by the client as a single data-unit. After receiving the
file, the server sends an ACK message to the receiver. Verify that the file has been sent
completely and correctly by comparing the received file with the original file (“diff”
command could be used). Measure the message transfer time and throughput.
3. This problem is similar to problem (2) above, but the message is split into short data-units
which are sent one by one without waiting for any acknowledgement between
transmissions of two successive data-units. Verify that the file has been sent completely
and correctly by comparing the received file with the original file. Measure the message
Page 1 of 2transfer time and throughput. Repeat it for different (at least six) data-unit sizes (say, from
100 bytes to 1000 bytes).
4. This problem is similar to problem (3) above, but it uses UDP as the transport protocol.
5. This problem is similar to problem (4) above, but the file is transferred using stop-and-
wait flow control protocol.
Project Assignment
Part-I
A hypothetical reliable data transfer protocol: A jumping window based Go-back-N
ARQ protocol for file transfer using UDP
In this protocol, a window of size W is used. The sender continuously sends W packets
corresponding to the current window, and then waits for an acknowledgement. The
receiver receives W packets. If all the packets are error-free, it sends out a positive
acknowledgement, say RR-i (RR: Receiver Ready). The receiver then moves its window
starting from the packet with the sequence number i. Upon receiving RR-i the sender
moves its window starting from the packet with the sequence number i. If a receiver
receives a damaged packet (say, with the sequence number j) in its current window, it
receives and discards all the remaining packets in the current window and it sends out a
negative acknowledgement, say REJ-j (REJ: Reject). The receiver then moves its window
starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announced later)
Report submission (not more than 10 pages for Part-I and Part-II): at the DEMO
Marks: Part-I = 60% and Part-II = 40% (based on the DEMO and the report)
Example-Problems (Solutions given)
1. Develop a socket program in UNIX/Linux that uses (i) TCP as the transport protocol and
(ii) UDP as the transport protocol for transferring a short message between a client and
server. The client sends a string (input by the user) to the server and the server prints the
string on the screen after receiving it.
2. Develop a TCP-based client-server socket program for transferring a large message. The
message transmitted from the client to server is read from a large file (size is about 30000
bytes). The entire message is sent by the client as a single data-unit. After receiving the
file, the server sends an ACK message to the receiver. Verify that the file has been sent
completely and correctly by comparing the received file with the original file (“diff”
command could be used). Measure the message transfer time and throughput.
3. This problem is similar to problem (2) above, but the message is split into short data-units
which are sent one by one without waiting for any acknowledgement between
transmissions of two successive data-units. Verify that the file has been sent completely
and correctly by comparing the received file with the original file. Measure the message
Page 1 of 2transfer time and throughput. Repeat it for different (at least six) data-unit sizes (say, from
100 bytes to 1000 bytes).
4. This problem is similar to problem (3) above, but it uses UDP as the transport protocol.
5. This problem is similar to problem (4) above, but the file is transferred using stop-and-
wait flow control protocol.
Project Assignment
Part-I
A hypothetical reliable data transfer protocol: A jumping window based Go-back-N
ARQ protocol for file transfer using UDP
In this protocol, a window of size W is used. The sender continuously sends W packets
corresponding to the current window, and then waits for an acknowledgement. The
receiver receives W packets. If all the packets are error-free, it sends out a positive
acknowledgement, say RR-i (RR: Receiver Ready). The receiver then moves its window
starting from the packet with the sequence number i. Upon receiving RR-i the sender
moves its window starting from the packet with the sequence number i. If a receiver
receives a damaged packet (say, with the sequence number j) in its current window, it
receives and discards all the remaining packets in the current window and it sends out a
negative acknowledgement, say REJ-j (REJ: Reject). The receiver then moves its window
starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2CO318 - Systems and Network Programming Lab and Project II
Semester 6, Aug-Sep 2014
Project II: Developing a reliable data transfer protocol for computer networks
and investigating its performance
Project Details:
In this project, you are required to develop a hypothetical reliable data transfer protocol for
computer networks (using socket programming with C or other language) and to investigate its
performance. That is, you will be building a simulator for the reliable data transfer protocol,
which can be used for investigating its performance.
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announced later)
Report submission (not more than 10 pages for Part-I and Part-II): at the DEMO
Marks: Part-I = 60% and Part-II = 40% (based on the DEMO and the report)
Example-Problems (Solutions given)
1. Develop a socket program in UNIX/Linux that uses (i) TCP as the transport protocol and
(ii) UDP as the transport protocol for transferring a short message between a client and
server. The client sends a string (input by the user) to the server and the server prints the
string on the screen after receiving it.
2. Develop a TCP-based client-server socket program for transferring a large message. The
message transmitted from the client to server is read from a large file (size is about 30000
bytes). The entire message is sent by the client as a single data-unit. After receiving the
file, the server sends an ACK message to the receiver. Verify that the file has been sent
completely and correctly by comparing the received file with the original file (“diff”
command could be used). Measure the message transfer time and throughput.
3. This problem is similar to problem (2) above, but the message is split into short data-units
which are sent one by one without waiting for any acknowledgement between
transmissions of two successive data-units. Verify that the file has been sent completely
and correctly by comparing the received file with the original file. Measure the message
Page 1 of 2transfer time and throughput. Repeat it for different (at least six) data-unit sizes (say, from
100 bytes to 1000 bytes).
4. This problem is similar to problem (3) above, but it uses UDP as the transport protocol.
5. This problem is similar to problem (4) above, but the file is transferred using stop-and-
wait flow control protocol.
Project Assignment
Part-I
A hypothetical reliable data transfer protocol: A jumping window based Go-back-N
ARQ protocol for file transfer using UDP
In this protocol, a window of size W is used. The sender continuously sends W packets
corresponding to the current window, and then waits for an acknowledgement. The
receiver receives W packets. If all the packets are error-free, it sends out a positive
acknowledgement, say RR-i (RR: Receiver Ready). The receiver then moves its window
starting from the packet with the sequence number i. Upon receiving RR-i the sender
moves its window starting from the packet with the sequence number i. If a receiver
receives a damaged packet (say, with the sequence number j) in its current window, it
receives and discards all the remaining packets in the current window and it sends out a
negative acknowledgement, say REJ-j (REJ: Reject). The receiver then moves its window
starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2CO318 - Systems and Network Programming Lab and Project II
Semester 6, Aug-Sep 2014
Project II: Developing a reliable data transfer protocol for computer networks
and investigating its performance
Project Details:
In this project, you are required to develop a hypothetical reliable data transfer protocol for
computer networks (using socket programming with C or other language) and to investigate its
performance. That is, you will be building a simulator for the reliable data transfer protocol,
which can be used for investigating its performance.
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announced later)
Report submission (not more than 10 pages for Part-I and Part-II): at the DEMO
Marks: Part-I = 60% and Part-II = 40% (based on the DEMO and the report)
Example-Problems (Solutions given)
1. Develop a socket program in UNIX/Linux that uses (i) TCP as the transport protocol and
(ii) UDP as the transport protocol for transferring a short message between a client and
server. The client sends a string (input by the user) to the server and the server prints the
string on the screen after receiving it.
2. Develop a TCP-based client-server socket program for transferring a large message. The
message transmitted from the client to server is read from a large file (size is about 30000
bytes). The entire message is sent by the client as a single data-unit. After receiving the
file, the server sends an ACK message to the receiver. Verify that the file has been sent
completely and correctly by comparing the received file with the original file (“diff”
command could be used). Measure the message transfer time and throughput.
3. This problem is similar to problem (2) above, but the message is split into short data-units
which are sent one by one without waiting for any acknowledgement between
transmissions of two successive data-units. Verify that the file has been sent completely
and correctly by comparing the received file with the original file. Measure the message
Page 1 of 2transfer time and throughput. Repeat it for different (at least six) data-unit sizes (say, from
100 bytes to 1000 bytes).
4. This problem is similar to problem (3) above, but it uses UDP as the transport protocol.
5. This problem is similar to problem (4) above, but the file is transferred using stop-and-
wait flow control protocol.
Project Assignment
Part-I
A hypothetical reliable data transfer protocol: A jumping window based Go-back-N
ARQ protocol for file transfer using UDP
In this protocol, a window of size W is used. The sender continuously sends W packets
corresponding to the current window, and then waits for an acknowledgement. The
receiver receives W packets. If all the packets are error-free, it sends out a positive
acknowledgement, say RR-i (RR: Receiver Ready). The receiver then moves its window
starting from the packet with the sequence number i. Upon receiving RR-i the sender
moves its window starting from the packet with the sequence number i. If a receiver
receives a damaged packet (say, with the sequence number j) in its current window, it
receives and discards all the remaining packets in the current window and it sends out a
negative acknowledgement, say REJ-j (REJ: Reject). The receiver then moves its window
starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announced later)
Report submission (not more than 10 pages for Part-I and Part-II): at the DEMO
Marks: Part-I = 60% and Part-II = 40% (based on the DEMO and the report)
Example-Problems (Solutions given)
1. Develop a socket program in UNIX/Linux that uses (i) TCP as the transport protocol and
(ii) UDP as the transport protocol for transferring a short message between a client and
server. The client sends a string (input by the user) to the server and the server prints the
string on the screen after receiving it.
2. Develop a TCP-based client-server socket program for transferring a large message. The
message transmitted from the client to server is read from a large file (size is about 30000
bytes). The entire message is sent by the client as a single data-unit. After receiving the
file, the server sends an ACK message to the receiver. Verify that the file has been sent
completely and correctly by comparing the received file with the original file (“diff”
command could be used). Measure the message transfer time and throughput.
3. This problem is similar to problem (2) above, but the message is split into short data-units
which are sent one by one without waiting for any acknowledgement between
transmissions of two successive data-units. Verify that the file has been sent completely
and correctly by comparing the received file with the original file. Measure the message
Page 1 of 2transfer time and throughput. Repeat it for different (at least six) data-unit sizes (say, from
100 bytes to 1000 bytes).
4. This problem is similar to problem (3) above, but it uses UDP as the transport protocol.
5. This problem is similar to problem (4) above, but the file is transferred using stop-and-
wait flow control protocol.
Project Assignment
Part-I
A hypothetical reliable data transfer protocol: A jumping window based Go-back-N
ARQ protocol for file transfer using UDP
In this protocol, a window of size W is used. The sender continuously sends W packets
corresponding to the current window, and then waits for an acknowledgement. The
receiver receives W packets. If all the packets are error-free, it sends out a positive
acknowledgement, say RR-i (RR: Receiver Ready). The receiver then moves its window
starting from the packet with the sequence number i. Upon receiving RR-i the sender
moves its window starting from the packet with the sequence number i. If a receiver
receives a damaged packet (say, with the sequence number j) in its current window, it
receives and discards all the remaining packets in the current window and it sends out a
negative acknowledgement, say REJ-j (REJ: Reject). The receiver then moves its window
starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2he packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2CO318 - Systems and Network Programming Lab and Project II
Semester 6, Aug-Sep 2014
Project II: Developing a reliable data transfer protocol for computer networks
and investigating its performance
Project Details:
In this project, you are required to develop a hypothetical reliable data transfer protocol for
computer networks (using socket programming with C or other language) and to investigate its
performance. That is, you will be building a simulator for the reliable data transfer protocol,
which can be used for investigating its performance.
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announced later)
Report submission (not more than 10 pages for Part-I and Part-II): at the DEMO
Marks: Part-I = 60% and Part-II = 40% (based on the DEMO and the report)
Example-Problems (Solutions given)
1. Develop a socket program in UNIX/Linux that uses (i) TCP as the transport protocol and
(ii) UDP as the transport protocol for transferring a short message between a client and
server. The client sends a string (input by the user) to the server and the server prints the
string on the screen after receiving it.
2. Develop a TCP-based client-server socket program for transferring a large message. The
message transmitted from the client to server is read from a large file (size is about 30000
bytes). The entire message is sent by the client as a single data-unit. After receiving the
file, the server sends an ACK message to the receiver. Verify that the file has been sent
completely and correctly by comparing the received file with the original file (“diff”
command could be used). Measure the message transfer time and throughput.
3. This problem is similar to problem (2) above, but the message is split into short data-units
which are sent one by one without waiting for any acknowledgement between
transmissions of two successive data-units. Verify that the file has been sent completely
and correctly by comparing the received file with the original file. Measure the message
Page 1 of 2transfer time and throughput. Repeat it for different (at least six) data-unit sizes (say, from
100 bytes to 1000 bytes).
4. This problem is similar to problem (3) above, but it uses UDP as the transport protocol.
5. This problem is similar to problem (4) above, but the file is transferred using stop-and-
wait flow control protocol.
Project Assignment
Part-I
A hypothetical reliable data transfer protocol: A jumping window based Go-back-N
ARQ protocol for file transfer using UDP
In this protocol, a window of size W is used. The sender continuously sends W packets
corresponding to the current window, and then waits for an acknowledgement. The
receiver receives W packets. If all the packets are error-free, it sends out a positive
acknowledgement, say RR-i (RR: Receiver Ready). The receiver then moves its window
starting from the packet with the sequence number i. Upon receiving RR-i the sender
moves its window starting from the packet with the sequence number i. If a receiver
receives a damaged packet (say, with the sequence number j) in its current window, it
receives and discards all the remaining packets in the current window and it sends out a
negative acknowledgement, say REJ-j (REJ: Reject). The receiver then moves its window
starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2CO318 - Systems and Network Programming Lab and Project II
Semester 6, Aug-Sep 2014
Project II: Developing a reliable data transfer protocol for computer networks
and investigating its performance
Project Details:
In this project, you are required to develop a hypothetical reliable data transfer protocol for
computer networks (using socket programming with C or other language) and to investigate its
performance. That is, you will be building a simulator for the reliable data transfer protocol,
which can be used for investigating its performance.
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announced later)
Report submission (not more than 10 pages for Part-I and Part-II): at the DEMO
Marks: Part-I = 60% and Part-II = 40% (based on the DEMO and the report)
Example-Problems (Solutions given)
1. Develop a socket program in UNIX/Linux that uses (i) TCP as the transport protocol and
(ii) UDP as the transport protocol for transferring a short message between a client and
server. The client sends a string (input by the user) to the server and the server prints the
string on the screen after receiving it.
2. Develop a TCP-based client-server socket program for transferring a large message. The
message transmitted from the client to server is read from a large file (size is about 30000
bytes). The entire message is sent by the client as a single data-unit. After receiving the
file, the server sends an ACK message to the receiver. Verify that the file has been sent
completely and correctly by comparing the received file with the original file (“diff”
command could be used). Measure the message transfer time and throughput.
3. This problem is similar to problem (2) above, but the message is split into short data-units
which are sent one by one without waiting for any acknowledgement between
transmissions of two successive data-units. Verify that the file has been sent completely
and correctly by comparing the received file with the original file. Measure the message
Page 1 of 2transfer time and throughput. Repeat it for different (at least six) data-unit sizes (say, from
100 bytes to 1000 bytes).
4. This problem is similar to problem (3) above, but it uses UDP as the transport protocol.
5. This problem is similar to problem (4) above, but the file is transferred using stop-and-
wait flow control protocol.
Project Assignment
Part-I
A hypothetical reliable data transfer protocol: A jumping window based Go-back-N
ARQ protocol for file transfer using UDP
In this protocol, a window of size W is used. The sender continuously sends W packets
corresponding to the current window, and then waits for an acknowledgement. The
receiver receives W packets. If all the packets are error-free, it sends out a positive
acknowledgement, say RR-i (RR: Receiver Ready). The receiver then moves its window
starting from the packet with the sequence number i. Upon receiving RR-i the sender
moves its window starting from the packet with the sequence number i. If a receiver
receives a damaged packet (say, with the sequence number j) in its current window, it
receives and discards all the remaining packets in the current window and it sends out a
negative acknowledgement, say REJ-j (REJ: Reject). The receiver then moves its window
starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announced later)
Report submission (not more than 10 pages for Part-I and Part-II): at the DEMO
Marks: Part-I = 60% and Part-II = 40% (based on the DEMO and the report)
Example-Problems (Solutions given)
1. Develop a socket program in UNIX/Linux that uses (i) TCP as the transport protocol and
(ii) UDP as the transport protocol for transferring a short message between a client and
server. The client sends a string (input by the user) to the server and the server prints the
string on the screen after receiving it.
2. Develop a TCP-based client-server socket program for transferring a large message. The
message transmitted from the client to server is read from a large file (size is about 30000
bytes). The entire message is sent by the client as a single data-unit. After receiving the
file, the server sends an ACK message to the receiver. Verify that the file has been sent
completely and correctly by comparing the received file with the original file (“diff”
command could be used). Measure the message transfer time and throughput.
3. This problem is similar to problem (2) above, but the message is split into short data-units
which are sent one by one without waiting for any acknowledgement between
transmissions of two successive data-units. Verify that the file has been sent completely
and correctly by comparing the received file with the original file. Measure the message
Page 1 of 2transfer time and throughput. Repeat it for different (at least six) data-unit sizes (say, from
100 bytes to 1000 bytes).
4. This problem is similar to problem (3) above, but it uses UDP as the transport protocol.
5. This problem is similar to problem (4) above, but the file is transferred using stop-and-
wait flow control protocol.
Project Assignment
Part-I
A hypothetical reliable data transfer protocol: A jumping window based Go-back-N
ARQ protocol for file transfer using UDP
In this protocol, a window of size W is used. The sender continuously sends W packets
corresponding to the current window, and then waits for an acknowledgement. The
receiver receives W packets. If all the packets are error-free, it sends out a positive
acknowledgement, say RR-i (RR: Receiver Ready). The receiver then moves its window
starting from the packet with the sequence number i. Upon receiving RR-i the sender
moves its window starting from the packet with the sequence number i. If a receiver
receives a damaged packet (say, with the sequence number j) in its current window, it
receives and discards all the remaining packets in the current window and it sends out a
negative acknowledgement, say REJ-j (REJ: Reject). The receiver then moves its window
starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2CO318 - Systems and Network Programming Lab and Project II
Semester 6, Aug-Sep 2014
Project II: Developing a reliable data transfer protocol for computer networks
and investigating its performance
Project Details:
In this project, you are required to develop a hypothetical reliable data transfer protocol for
computer networks (using socket programming with C or other language) and to investigate its
performance. That is, you will be building a simulator for the reliable data transfer protocol,
which can be used for investigating its performance.
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announced later)
Report submission (not more than 10 pages for Part-I and Part-II): at the DEMO
Marks: Part-I = 60% and Part-II = 40% (based on the DEMO and the report)
Example-Problems (Solutions given)
1. Develop a socket program in UNIX/Linux that uses (i) TCP as the transport protocol and
(ii) UDP as the transport protocol for transferring a short message between a client and
server. The client sends a string (input by the user) to the server and the server prints the
string on the screen after receiving it.
2. Develop a TCP-based client-server socket program for transferring a large message. The
message transmitted from the client to server is read from a large file (size is about 30000
bytes). The entire message is sent by the client as a single data-unit. After receiving the
file, the server sends an ACK message to the receiver. Verify that the file has been sent
completely and correctly by comparing the received file with the original file (“diff”
command could be used). Measure the message transfer time and throughput.
3. This problem is similar to problem (2) above, but the message is split into short data-units
which are sent one by one without waiting for any acknowledgement between
transmissions of two successive data-units. Verify that the file has been sent completely
and correctly by comparing the received file with the original file. Measure the message
Page 1 of 2transfer time and throughput. Repeat it for different (at least six) data-unit sizes (say, from
100 bytes to 1000 bytes).
4. This problem is similar to problem (3) above, but it uses UDP as the transport protocol.
5. This problem is similar to problem (4) above, but the file is transferred using stop-and-
wait flow control protocol.
Project Assignment
Part-I
A hypothetical reliable data transfer protocol: A jumping window based Go-back-N
ARQ protocol for file transfer using UDP
In this protocol, a window of size W is used. The sender continuously sends W packets
corresponding to the current window, and then waits for an acknowledgement. The
receiver receives W packets. If all the packets are error-free, it sends out a positive
acknowledgement, say RR-i (RR: Receiver Ready). The receiver then moves its window
starting from the packet with the sequence number i. Upon receiving RR-i the sender
moves its window starting from the packet with the sequence number i. If a receiver
receives a damaged packet (say, with the sequence number j) in its current window, it
receives and discards all the remaining packets in the current window and it sends out a
negative acknowledgement, say REJ-j (REJ: Reject). The receiver then moves its window
starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2CO318 - Systems and Network Programming Lab and Project II
Semester 6, Aug-Sep 2014
Project II: Developing a reliable data transfer protocol for computer networks
and investigating its performance
Project Details:
In this project, you are required to develop a hypothetical reliable data transfer protocol for
computer networks (using socket programming with C or other language) and to investigate its
performance. That is, you will be building a simulator for the reliable data transfer protocol,
which can be used for investigating its performance.
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announced later)
Report submission (not more than 10 pages for Part-I and Part-II): at the DEMO
Marks: Part-I = 60% and Part-II = 40% (based on the DEMO and the report)
Example-Problems (Solutions given)
1. Develop a socket program in UNIX/Linux that uses (i) TCP as the transport protocol and
(ii) UDP as the transport protocol for transferring a short message between a client and
server. The client sends a string (input by the user) to the server and the server prints the
string on the screen after receiving it.
2. Develop a TCP-based client-server socket program for transferring a large message. The
message transmitted from the client to server is read from a large file (size is about 30000
bytes). The entire message is sent by the client as a single data-unit. After receiving the
file, the server sends an ACK message to the receiver. Verify that the file has been sent
completely and correctly by comparing the received file with the original file (“diff”
command could be used). Measure the message transfer time and throughput.
3. This problem is similar to problem (2) above, but the message is split into short data-units
which are sent one by one without waiting for any acknowledgement between
transmissions of two successive data-units. Verify that the file has been sent completely
and correctly by comparing the received file with the original file. Measure the message
Page 1 of 2transfer time and throughput. Repeat it for different (at least six) data-unit sizes (say, from
100 bytes to 1000 bytes).
4. This problem is similar to problem (3) above, but it uses UDP as the transport protocol.
5. This problem is similar to problem (4) above, but the file is transferred using stop-and-
wait flow control protocol.
Project Assignment
Part-I
A hypothetical reliable data transfer protocol: A jumping window based Go-back-N
ARQ protocol for file transfer using UDP
In this protocol, a window of size W is used. The sender continuously sends W packets
corresponding to the current window, and then waits for an acknowledgement. The
receiver receives W packets. If all the packets are error-free, it sends out a positive
acknowledgement, say RR-i (RR: Receiver Ready). The receiver then moves its window
starting from the packet with the sequence number i. Upon receiving RR-i the sender
moves its window starting from the packet with the sequence number i. If a receiver
receives a damaged packet (say, with the sequence number j) in its current window, it
receives and discards all the remaining packets in the current window and it sends out a
negative acknowledgement, say REJ-j (REJ: Reject). The receiver then moves its window
starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announced later)
Report submission (not more than 10 pages for Part-I and Part-II): at the DEMO
Marks: Part-I = 60% and Part-II = 40% (based on the DEMO and the report)
Example-Problems (Solutions given)
1. Develop a socket program in UNIX/Linux that uses (i) TCP as the transport protocol and
(ii) UDP as the transport protocol for transferring a short message between a client and
server. The client sends a string (input by the user) to the server and the server prints the
string on the screen after receiving it.
2. Develop a TCP-based client-server socket program for transferring a large message. The
message transmitted from the client to server is read from a large file (size is about 30000
bytes). The entire message is sent by the client as a single data-unit. After receiving the
file, the server sends an ACK message to the receiver. Verify that the file has been sent
completely and correctly by comparing the received file with the original file (“diff”
command could be used). Measure the message transfer time and throughput.
3. This problem is similar to problem (2) above, but the message is split into short data-units
which are sent one by one without waiting for any acknowledgement between
transmissions of two successive data-units. Verify that the file has been sent completely
and correctly by comparing the received file with the original file. Measure the message
Page 1 of 2transfer time and throughput. Repeat it for different (at least six) data-unit sizes (say, from
100 bytes to 1000 bytes).
4. This problem is similar to problem (3) above, but it uses UDP as the transport protocol.
5. This problem is similar to problem (4) above, but the file is transferred using stop-and-
wait flow control protocol.
Project Assignment
Part-I
A hypothetical reliable data transfer protocol: A jumping window based Go-back-N
ARQ protocol for file transfer using UDP
In this protocol, a window of size W is used. The sender continuously sends W packets
corresponding to the current window, and then waits for an acknowledgement. The
receiver receives W packets. If all the packets are error-free, it sends out a positive
acknowledgement, say RR-i (RR: Receiver Ready). The receiver then moves its window
starting from the packet with the sequence number i. Upon receiving RR-i the sender
moves its window starting from the packet with the sequence number i. If a receiver
receives a damaged packet (say, with the sequence number j) in its current window, it
receives and discards all the remaining packets in the current window and it sends out a
negative acknowledgement, say REJ-j (REJ: Reject). The receiver then moves its window
starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2CO318 - Systems and Network Programming Lab and Project II
Semester 6, Aug-Sep 2014
Project II: Developing a reliable data transfer protocol for computer networks
and investigating its performance
Project Details:
In this project, you are required to develop a hypothetical reliable data transfer protocol for
computer networks (using socket programming with C or other language) and to investigate its
performance. That is, you will be building a simulator for the reliable data transfer protocol,
which can be used for investigating its performance.
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announced later)
Report submission (not more than 10 pages for Part-I and Part-II): at the DEMO
Marks: Part-I = 60% and Part-II = 40% (based on the DEMO and the report)
Example-Problems (Solutions given)
1. Develop a socket program in UNIX/Linux that uses (i) TCP as the transport protocol and
(ii) UDP as the transport protocol for transferring a short message between a client and
server. The client sends a string (input by the user) to the server and the server prints the
string on the screen after receiving it.
2. Develop a TCP-based client-server socket program for transferring a large message. The
message transmitted from the client to server is read from a large file (size is about 30000
bytes). The entire message is sent by the client as a single data-unit. After receiving the
file, the server sends an ACK message to the receiver. Verify that the file has been sent
completely and correctly by comparing the received file with the original file (“diff”
command could be used). Measure the message transfer time and throughput.
3. This problem is similar to problem (2) above, but the message is split into short data-units
which are sent one by one without waiting for any acknowledgement between
transmissions of two successive data-units. Verify that the file has been sent completely
and correctly by comparing the received file with the original file. Measure the message
Page 1 of 2transfer time and throughput. Repeat it for different (at least six) data-unit sizes (say, from
100 bytes to 1000 bytes).
4. This problem is similar to problem (3) above, but it uses UDP as the transport protocol.
5. This problem is similar to problem (4) above, but the file is transferred using stop-and-
wait flow control protocol.
Project Assignment
Part-I
A hypothetical reliable data transfer protocol: A jumping window based Go-back-N
ARQ protocol for file transfer using UDP
In this protocol, a window of size W is used. The sender continuously sends W packets
corresponding to the current window, and then waits for an acknowledgement. The
receiver receives W packets. If all the packets are error-free, it sends out a positive
acknowledgement, say RR-i (RR: Receiver Ready). The receiver then moves its window
starting from the packet with the sequence number i. Upon receiving RR-i the sender
moves its window starting from the packet with the sequence number i. If a receiver
receives a damaged packet (say, with the sequence number j) in its current window, it
receives and discards all the remaining packets in the current window and it sends out a
negative acknowledgement, say REJ-j (REJ: Reject). The receiver then moves its window
starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2CO318 - Systems and Network Programming Lab and Project II
Semester 6, Aug-Sep 2014
Project II: Developing a reliable data transfer protocol for computer networks
and investigating its performance
Project Details:
In this project, you are required to develop a hypothetical reliable data transfer protocol for
computer networks (using socket programming with C or other language) and to investigate its
performance. That is, you will be building a simulator for the reliable data transfer protocol,
which can be used for investigating its performance.
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announced later)
Report submission (not more than 10 pages for Part-I and Part-II): at the DEMO
Marks: Part-I = 60% and Part-II = 40% (based on the DEMO and the report)
Example-Problems (Solutions given)
1. Develop a socket program in UNIX/Linux that uses (i) TCP as the transport protocol and
(ii) UDP as the transport protocol for transferring a short message between a client and
server. The client sends a string (input by the user) to the server and the server prints the
string on the screen after receiving it.
2. Develop a TCP-based client-server socket program for transferring a large message. The
message transmitted from the client to server is read from a large file (size is about 30000
bytes). The entire message is sent by the client as a single data-unit. After receiving the
file, the server sends an ACK message to the receiver. Verify that the file has been sent
completely and correctly by comparing the received file with the original file (“diff”
command could be used). Measure the message transfer time and throughput.
3. This problem is similar to problem (2) above, but the message is split into short data-units
which are sent one by one without waiting for any acknowledgement between
transmissions of two successive data-units. Verify that the file has been sent completely
and correctly by comparing the received file with the original file. Measure the message
Page 1 of 2transfer time and throughput. Repeat it for different (at least six) data-unit sizes (say, from
100 bytes to 1000 bytes).
4. This problem is similar to problem (3) above, but it uses UDP as the transport protocol.
5. This problem is similar to problem (4) above, but the file is transferred using stop-and-
wait flow control protocol.
Project Assignment
Part-I
A hypothetical reliable data transfer protocol: A jumping window based Go-back-N
ARQ protocol for file transfer using UDP
In this protocol, a window of size W is used. The sender continuously sends W packets
corresponding to the current window, and then waits for an acknowledgement. The
receiver receives W packets. If all the packets are error-free, it sends out a positive
acknowledgement, say RR-i (RR: Receiver Ready). The receiver then moves its window
starting from the packet with the sequence number i. Upon receiving RR-i the sender
moves its window starting from the packet with the sequence number i. If a receiver
receives a damaged packet (say, with the sequence number j) in its current window, it
receives and discards all the remaining packets in the current window and it sends out a
negative acknowledgement, say REJ-j (REJ: Reject). The receiver then moves its window
starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announced later)
Report submission (not more than 10 pages for Part-I and Part-II): at the DEMO
Marks: Part-I = 60% and Part-II = 40% (based on the DEMO and the report)
Example-Problems (Solutions given)
1. Develop a socket program in UNIX/Linux that uses (i) TCP as the transport protocol and
(ii) UDP as the transport protocol for transferring a short message between a client and
server. The client sends a string (input by the user) to the server and the server prints the
string on the screen after receiving it.
2. Develop a TCP-based client-server socket program for transferring a large message. The
message transmitted from the client to server is read from a large file (size is about 30000
bytes). The entire message is sent by the client as a single data-unit. After receiving the
file, the server sends an ACK message to the receiver. Verify that the file has been sent
completely and correctly by comparing the received file with the original file (“diff”
command could be used). Measure the message transfer time and throughput.
3. This problem is similar to problem (2) above, but the message is split into short data-units
which are sent one by one without waiting for any acknowledgement between
transmissions of two successive data-units. Verify that the file has been sent completely
and correctly by comparing the received file with the original file. Measure the message
Page 1 of 2transfer time and throughput. Repeat it for different (at least six) data-unit sizes (say, from
100 bytes to 1000 bytes).
4. This problem is similar to problem (3) above, but it uses UDP as the transport protocol.
5. This problem is similar to problem (4) above, but the file is transferred using stop-and-
wait flow control protocol.
Project Assignment
Part-I
A hypothetical reliable data transfer protocol: A jumping window based Go-back-N
ARQ protocol for file transfer using UDP
In this protocol, a window of size W is used. The sender continuously sends W packets
corresponding to the current window, and then waits for an acknowledgement. The
receiver receives W packets. If all the packets are error-free, it sends out a positive
acknowledgement, say RR-i (RR: Receiver Ready). The receiver then moves its window
starting from the packet with the sequence number i. Upon receiving RR-i the sender
moves its window starting from the packet with the sequence number i. If a receiver
receives a damaged packet (say, with the sequence number j) in its current window, it
receives and discards all the remaining packets in the current window and it sends out a
negative acknowledgement, say REJ-j (REJ: Reject). The receiver then moves its window
starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2CO318 - Systems and Network Programming Lab and Project II
Semester 6, Aug-Sep 2014
Project II: Developing a reliable data transfer protocol for computer networks
and investigating its performance
Project Details:
In this project, you are required to develop a hypothetical reliable data transfer protocol for
computer networks (using socket programming with C or other language) and to investigate its
performance. That is, you will be building a simulator for the reliable data transfer protocol,
which can be used for investigating its performance.
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announced later)
Report submission (not more than 10 pages for Part-I and Part-II): at the DEMO
Marks: Part-I = 60% and Part-II = 40% (based on the DEMO and the report)
Example-Problems (Solutions given)
1. Develop a socket program in UNIX/Linux that uses (i) TCP as the transport protocol and
(ii) UDP as the transport protocol for transferring a short message between a client and
server. The client sends a string (input by the user) to the server and the server prints the
string on the screen after receiving it.
2. Develop a TCP-based client-server socket program for transferring a large message. The
message transmitted from the client to server is read from a large file (size is about 30000
bytes). The entire message is sent by the client as a single data-unit. After receiving the
file, the server sends an ACK message to the receiver. Verify that the file has been sent
completely and correctly by comparing the received file with the original file (“diff”
command could be used). Measure the message transfer time and throughput.
3. This problem is similar to problem (2) above, but the message is split into short data-units
which are sent one by one without waiting for any acknowledgement between
transmissions of two successive data-units. Verify that the file has been sent completely
and correctly by comparing the received file with the original file. Measure the message
Page 1 of 2transfer time and throughput. Repeat it for different (at least six) data-unit sizes (say, from
100 bytes to 1000 bytes).
4. This problem is similar to problem (3) above, but it uses UDP as the transport protocol.
5. This problem is similar to problem (4) above, but the file is transferred using stop-and-
wait flow control protocol.
Project Assignment
Part-I
A hypothetical reliable data transfer protocol: A jumping window based Go-back-N
ARQ protocol for file transfer using UDP
In this protocol, a window of size W is used. The sender continuously sends W packets
corresponding to the current window, and then waits for an acknowledgement. The
receiver receives W packets. If all the packets are error-free, it sends out a positive
acknowledgement, say RR-i (RR: Receiver Ready). The receiver then moves its window
starting from the packet with the sequence number i. Upon receiving RR-i the sender
moves its window starting from the packet with the sequence number i. If a receiver
receives a damaged packet (say, with the sequence number j) in its current window, it
receives and discards all the remaining packets in the current window and it sends out a
negative acknowledgement, say REJ-j (REJ: Reject). The receiver then moves its window
starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2CO318 - Systems and Network Programming Lab and Project II
Semester 6, Aug-Sep 2014
Project II: Developing a reliable data transfer protocol for computer networks
and investigating its performance
Project Details:
In this project, you are required to develop a hypothetical reliable data transfer protocol for
computer networks (using socket programming with C or other language) and to investigate its
performance. That is, you will be building a simulator for the reliable data transfer protocol,
which can be used for investigating its performance.
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announced later)
Report submission (not more than 10 pages for Part-I and Part-II): at the DEMO
Marks: Part-I = 60% and Part-II = 40% (based on the DEMO and the report)
Example-Problems (Solutions given)
1. Develop a socket program in UNIX/Linux that uses (i) TCP as the transport protocol and
(ii) UDP as the transport protocol for transferring a short message between a client and
server. The client sends a string (input by the user) to the server and the server prints the
string on the screen after receiving it.
2. Develop a TCP-based client-server socket program for transferring a large message. The
message transmitted from the client to server is read from a large file (size is about 30000
bytes). The entire message is sent by the client as a single data-unit. After receiving the
file, the server sends an ACK message to the receiver. Verify that the file has been sent
completely and correctly by comparing the received file with the original file (“diff”
command could be used). Measure the message transfer time and throughput.
3. This problem is similar to problem (2) above, but the message is split into short data-units
which are sent one by one without waiting for any acknowledgement between
transmissions of two successive data-units. Verify that the file has been sent completely
and correctly by comparing the received file with the original file. Measure the message
Page 1 of 2transfer time and throughput. Repeat it for different (at least six) data-unit sizes (say, from
100 bytes to 1000 bytes).
4. This problem is similar to problem (3) above, but it uses UDP as the transport protocol.
5. This problem is similar to problem (4) above, but the file is transferred using stop-and-
wait flow control protocol.
Project Assignment
Part-I
A hypothetical reliable data transfer protocol: A jumping window based Go-back-N
ARQ protocol for file transfer using UDP
In this protocol, a window of size W is used. The sender continuously sends W packets
corresponding to the current window, and then waits for an acknowledgement. The
receiver receives W packets. If all the packets are error-free, it sends out a positive
acknowledgement, say RR-i (RR: Receiver Ready). The receiver then moves its window
starting from the packet with the sequence number i. Upon receiving RR-i the sender
moves its window starting from the packet with the sequence number i. If a receiver
receives a damaged packet (say, with the sequence number j) in its current window, it
receives and discards all the remaining packets in the current window and it sends out a
negative acknowledgement, say REJ-j (REJ: Reject). The receiver then moves its window
starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announced later)
Report submission (not more than 10 pages for Part-I and Part-II): at the DEMO
Marks: Part-I = 60% and Part-II = 40% (based on the DEMO and the report)
Example-Problems (Solutions given)
1. Develop a socket program in UNIX/Linux that uses (i) TCP as the transport protocol and
(ii) UDP as the transport protocol for transferring a short message between a client and
server. The client sends a string (input by the user) to the server and the server prints the
string on the screen after receiving it.
2. Develop a TCP-based client-server socket program for transferring a large message. The
message transmitted from the client to server is read from a large file (size is about 30000
bytes). The entire message is sent by the client as a single data-unit. After receiving the
file, the server sends an ACK message to the receiver. Verify that the file has been sent
completely and correctly by comparing the received file with the original file (“diff”
command could be used). Measure the message transfer time and throughput.
3. This problem is similar to problem (2) above, but the message is split into short data-units
which are sent one by one without waiting for any acknowledgement between
transmissions of two successive data-units. Verify that the file has been sent completely
and correctly by comparing the received file with the original file. Measure the message
Page 1 of 2transfer time and throughput. Repeat it for different (at least six) data-unit sizes (say, from
100 bytes to 1000 bytes).
4. This problem is similar to problem (3) above, but it uses UDP as the transport protocol.
5. This problem is similar to problem (4) above, but the file is transferred using stop-and-
wait flow control protocol.
Project Assignment
Part-I
A hypothetical reliable data transfer protocol: A jumping window based Go-back-N
ARQ protocol for file transfer using UDP
In this protocol, a window of size W is used. The sender continuously sends W packets
corresponding to the current window, and then waits for an acknowledgement. The
receiver receives W packets. If all the packets are error-free, it sends out a positive
acknowledgement, say RR-i (RR: Receiver Ready). The receiver then moves its window
starting from the packet with the sequence number i. Upon receiving RR-i the sender
moves its window starting from the packet with the sequence number i. If a receiver
receives a damaged packet (say, with the sequence number j) in its current window, it
receives and discards all the remaining packets in the current window and it sends out a
negative acknowledgement, say REJ-j (REJ: Reject). The receiver then moves its window
starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2CO318 - Systems and Network Programming Lab and Project II
Semester 6, Aug-Sep 2014
Project II: Developing a reliable data transfer protocol for computer networks
and investigating its performance
Project Details:
In this project, you are required to develop a hypothetical reliable data transfer protocol for
computer networks (using socket programming with C or other language) and to investigate its
performance. That is, you will be building a simulator for the reliable data transfer protocol,
which can be used for investigating its performance.
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announced later)
Report submission (not more than 10 pages for Part-I and Part-II): at the DEMO
Marks: Part-I = 60% and Part-II = 40% (based on the DEMO and the report)
Example-Problems (Solutions given)
1. Develop a socket program in UNIX/Linux that uses (i) TCP as the transport protocol and
(ii) UDP as the transport protocol for transferring a short message between a client and
server. The client sends a string (input by the user) to the server and the server prints the
string on the screen after receiving it.
2. Develop a TCP-based client-server socket program for transferring a large message. The
message transmitted from the client to server is read from a large file (size is about 30000
bytes). The entire message is sent by the client as a single data-unit. After receiving the
file, the server sends an ACK message to the receiver. Verify that the file has been sent
completely and correctly by comparing the received file with the original file (“diff”
command could be used). Measure the message transfer time and throughput.
3. This problem is similar to problem (2) above, but the message is split into short data-units
which are sent one by one without waiting for any acknowledgement between
transmissions of two successive data-units. Verify that the file has been sent completely
and correctly by comparing the received file with the original file. Measure the message
Page 1 of 2transfer time and throughput. Repeat it for different (at least six) data-unit sizes (say, from
100 bytes to 1000 bytes).
4. This problem is similar to problem (3) above, but it uses UDP as the transport protocol.
5. This problem is similar to problem (4) above, but the file is transferred using stop-and-
wait flow control protocol.
Project Assignment
Part-I
A hypothetical reliable data transfer protocol: A jumping window based Go-back-N
ARQ protocol for file transfer using UDP
In this protocol, a window of size W is used. The sender continuously sends W packets
corresponding to the current window, and then waits for an acknowledgement. The
receiver receives W packets. If all the packets are error-free, it sends out a positive
acknowledgement, say RR-i (RR: Receiver Ready). The receiver then moves its window
starting from the packet with the sequence number i. Upon receiving RR-i the sender
moves its window starting from the packet with the sequence number i. If a receiver
receives a damaged packet (say, with the sequence number j) in its current window, it
receives and discards all the remaining packets in the current window and it sends out a
negative acknowledgement, say REJ-j (REJ: Reject). The receiver then moves its window
starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2CO318 - Systems and Network Programming Lab and Project II
Semester 6, Aug-Sep 2014
Project II: Developing a reliable data transfer protocol for computer networks
and investigating its performance
Project Details:
In this project, you are required to develop a hypothetical reliable data transfer protocol for
computer networks (using socket programming with C or other language) and to investigate its
performance. That is, you will be building a simulator for the reliable data transfer protocol,
which can be used for investigating its performance.
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announced later)
Report submission (not more than 10 pages for Part-I and Part-II): at the DEMO
Marks: Part-I = 60% and Part-II = 40% (based on the DEMO and the report)
Example-Problems (Solutions given)
1. Develop a socket program in UNIX/Linux that uses (i) TCP as the transport protocol and
(ii) UDP as the transport protocol for transferring a short message between a client and
server. The client sends a string (input by the user) to the server and the server prints the
string on the screen after receiving it.
2. Develop a TCP-based client-server socket program for transferring a large message. The
message transmitted from the client to server is read from a large file (size is about 30000
bytes). The entire message is sent by the client as a single data-unit. After receiving the
file, the server sends an ACK message to the receiver. Verify that the file has been sent
completely and correctly by comparing the received file with the original file (“diff”
command could be used). Measure the message transfer time and throughput.
3. This problem is similar to problem (2) above, but the message is split into short data-units
which are sent one by one without waiting for any acknowledgement between
transmissions of two successive data-units. Verify that the file has been sent completely
and correctly by comparing the received file with the original file. Measure the message
Page 1 of 2transfer time and throughput. Repeat it for different (at least six) data-unit sizes (say, from
100 bytes to 1000 bytes).
4. This problem is similar to problem (3) above, but it uses UDP as the transport protocol.
5. This problem is similar to problem (4) above, but the file is transferred using stop-and-
wait flow control protocol.
Project Assignment
Part-I
A hypothetical reliable data transfer protocol: A jumping window based Go-back-N
ARQ protocol for file transfer using UDP
In this protocol, a window of size W is used. The sender continuously sends W packets
corresponding to the current window, and then waits for an acknowledgement. The
receiver receives W packets. If all the packets are error-free, it sends out a positive
acknowledgement, say RR-i (RR: Receiver Ready). The receiver then moves its window
starting from the packet with the sequence number i. Upon receiving RR-i the sender
moves its window starting from the packet with the sequence number i. If a receiver
receives a damaged packet (say, with the sequence number j) in its current window, it
receives and discards all the remaining packets in the current window and it sends out a
negative acknowledgement, say REJ-j (REJ: Reject). The receiver then moves its window
starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announced later)
Report submission (not more than 10 pages for Part-I and Part-II): at the DEMO
Marks: Part-I = 60% and Part-II = 40% (based on the DEMO and the report)
Example-Problems (Solutions given)
1. Develop a socket program in UNIX/Linux that uses (i) TCP as the transport protocol and
(ii) UDP as the transport protocol for transferring a short message between a client and
server. The client sends a string (input by the user) to the server and the server prints the
string on the screen after receiving it.
2. Develop a TCP-based client-server socket program for transferring a large message. The
message transmitted from the client to server is read from a large file (size is about 30000
bytes). The entire message is sent by the client as a single data-unit. After receiving the
file, the server sends an ACK message to the receiver. Verify that the file has been sent
completely and correctly by comparing the received file with the original file (“diff”
command could be used). Measure the message transfer time and throughput.
3. This problem is similar to problem (2) above, but the message is split into short data-units
which are sent one by one without waiting for any acknowledgement between
transmissions of two successive data-units. Verify that the file has been sent completely
and correctly by comparing the received file with the original file. Measure the message
Page 1 of 2transfer time and throughput. Repeat it for different (at least six) data-unit sizes (say, from
100 bytes to 1000 bytes).
4. This problem is similar to problem (3) above, but it uses UDP as the transport protocol.
5. This problem is similar to problem (4) above, but the file is transferred using stop-and-
wait flow control protocol.
Project Assignment
Part-I
A hypothetical reliable data transfer protocol: A jumping window based Go-back-N
ARQ protocol for file transfer using UDP
In this protocol, a window of size W is used. The sender continuously sends W packets
corresponding to the current window, and then waits for an acknowledgement. The
receiver receives W packets. If all the packets are error-free, it sends out a positive
acknowledgement, say RR-i (RR: Receiver Ready). The receiver then moves its window
starting from the packet with the sequence number i. Upon receiving RR-i the sender
moves its window starting from the packet with the sequence number i. If a receiver
receives a damaged packet (say, with the sequence number j) in its current window, it
receives and discards all the remaining packets in the current window and it sends out a
negative acknowledgement, say REJ-j (REJ: Reject). The receiver then moves its window
starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2m distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration shouldstarting from tstarting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration shouldstarting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2CO318 - Systems and Network Programming Lab and Project II
Semester 6, Aug-Sep 2014
Project II: Developing a reliable data transfer protocol for computer networks
and investigating its performance
Project Details:
In this project, you are required to develop a hypothetical reliable data transfer protocol for
computer networks (using socket programming with C or other language) and to investigate its
performance. That is, you will be building a simulator for the reliable data transfer protocol,
which can be used for investigating its performance.
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announced later)
Report submission (not more than 10 pages for Part-I and Part-II): at the DEMO
Marks: Part-I = 60% and Part-II = 40% (based on the DEMO and the report)
Example-Problems (Solutions given)
1. Develop a socket program in UNIX/Linux that uses (i) TCP as the transport protocol and
(ii) UDP as the transport protocol for transferring a short message between a client and
server. The client sends a string (input by the user) to the server and the server prints the
string on the screen after receiving it.
2. Develop a TCP-based client-server socket program for transferring a large message. The
message transmitted from the client to server is read from a large file (size is about 30000
bytes). The entire message is sent by the client as a single data-unit. After receiving the
file, the server sends an ACK message to the receiver. Verify that the file has been sent
completely and correctly by comparing the received file with the original file (“diff”
command could be used). Measure the message transfer time and throughput.
3. This problem is similar to problem (2) above, but the message is split into short data-units
which are sent one by one without waiting for any acknowledgement between
transmissions of two successive data-units. Verify that the file has been sent completely
and correctly by comparing the received file with the original file. Measure the message
Page 1 of 2transfer time and throughput. Repeat it for different (at least six) data-unit sizes (say, from
100 bytes to 1000 bytes).
4. This problem is similar to problem (3) above, but it uses UDP as the transport protocol.
5. This problem is similar to problem (4) above, but the file is transferred using stop-and-
wait flow control protocol.
Project Assignment
Part-I
A hypothetical reliable data transfer protocol: A jumping window based Go-back-N
ARQ protocol for file transfer using UDP
In this protocol, a window of size W is used. The sender continuously sends W packets
corresponding to the current window, and then waits for an acknowledgement. The
receiver receives W packets. If all the packets are error-free, it sends out a positive
acknowledgement, say RR-i (RR: Receiver Ready). The receiver then moves its window
starting from the packet with the sequence number i. Upon receiving RR-i the sender
moves its window starting from the packet with the sequence number i. If a receiver
receives a damaged packet (say, with the sequence number j) in its current window, it
receives and discards all the remaining packets in the current window and it sends out a
negative acknowledgement, say REJ-j (REJ: Reject). The receiver then moves its window
starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2CO318 - Systems and Network Programming Lab and Project II
Semester 6, Aug-Sep 2014
Project II: Developing a reliable data transfer protocol for computer networks
and investigating its performance
Project Details:
In this project, you are required to develop a hypothetical reliable data transfer protocol for
computer networks (using socket programming with C or other language) and to investigate its
performance. That is, you will be building a simulator for the reliable data transfer protocol,
which can be used for investigating its performance.
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announced later)
Report submission (not more than 10 pages for Part-I and Part-II): at the DEMO
Marks: Part-I = 60% and Part-II = 40% (based on the DEMO and the report)
Example-Problems (Solutions given)
1. Develop a socket program in UNIX/Linux that uses (i) TCP as the transport protocol and
(ii) UDP as the transport protocol for transferring a short message between a client and
server. The client sends a string (input by the user) to the server and the server prints the
string on the screen after receiving it.
2. Develop a TCP-based client-server socket program for transferring a large message. The
message transmitted from the client to server is read from a large file (size is about 30000
bytes). The entire message is sent by the client as a single data-unit. After receiving the
file, the server sends an ACK message to the receiver. Verify that the file has been sent
completely and correctly by comparing the received file with the original file (“diff”
command could be used). Measure the message transfer time and throughput.
3. This problem is similar to problem (2) above, but the message is split into short data-units
which are sent one by one without waiting for any acknowledgement between
transmissions of two successive data-units. Verify that the file has been sent completely
and correctly by comparing the received file with the original file. Measure the message
Page 1 of 2transfer time and throughput. Repeat it for different (at least six) data-unit sizes (say, from
100 bytes to 1000 bytes).
4. This problem is similar to problem (3) above, but it uses UDP as the transport protocol.
5. This problem is similar to problem (4) above, but the file is transferred using stop-and-
wait flow control protocol.
Project Assignment
Part-I
A hypothetical reliable data transfer protocol: A jumping window based Go-back-N
ARQ protocol for file transfer using UDP
In this protocol, a window of size W is used. The sender continuously sends W packets
corresponding to the current window, and then waits for an acknowledgement. The
receiver receives W packets. If all the packets are error-free, it sends out a positive
acknowledgement, say RR-i (RR: Receiver Ready). The receiver then moves its window
starting from the packet with the sequence number i. Upon receiving RR-i the sender
moves its window starting from the packet with the sequence number i. If a receiver
receives a damaged packet (say, with the sequence number j) in its current window, it
receives and discards all the remaining packets in the current window and it sends out a
negative acknowledgement, say REJ-j (REJ: Reject). The receiver then moves its window
starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announced later)
Report submission (not more than 10 pages for Part-I and Part-II): at the DEMO
Marks: Part-I = 60% and Part-II = 40% (based on the DEMO and the report)
Example-Problems (Solutions given)
1. Develop a socket program in UNIX/Linux that uses (i) TCP as the transport protocol and
(ii) UDP as the transport protocol for transferring a short message between a client and
server. The client sends a string (input by the user) to the server and the server prints the
string on the screen after receiving it.
2. Develop a TCP-based client-server socket program for transferring a large message. The
message transmitted from the client to server is read from a large file (size is about 30000
bytes). The entire message is sent by the client as a single data-unit. After receiving the
file, the server sends an ACK message to the receiver. Verify that the file has been sent
completely and correctly by comparing the received file with the original file (“diff”
command could be used). Measure the message transfer time and throughput.
3. This problem is similar to problem (2) above, but the message is split into short data-units
which are sent one by one without waiting for any acknowledgement between
transmissions of two successive data-units. Verify that the file has been sent completely
and correctly by comparing the received file with the original file. Measure the message
Page 1 of 2transfer time and throughput. Repeat it for different (at least six) data-unit sizes (say, from
100 bytes to 1000 bytes).
4. This problem is similar to problem (3) above, but it uses UDP as the transport protocol.
5. This problem is similar to problem (4) above, but the file is transferred using stop-and-
wait flow control protocol.
Project Assignment
Part-I
A hypothetical reliable data transfer protocol: A jumping window based Go-back-N
ARQ protocol for file transfer using UDP
In this protocol, a window of size W is used. The sender continuously sends W packets
corresponding to the current window, and then waits for an acknowledgement. The
receiver receives W packets. If all the packets are error-free, it sends out a positive
acknowledgement, say RR-i (RR: Receiver Ready). The receiver then moves its window
starting from the packet with the sequence number i. Upon receiving RR-i the sender
moves its window starting from the packet with the sequence number i. If a receiver
receives a damaged packet (say, with the sequence number j) in its current window, it
receives and discards all the remaining packets in the current window and it sends out a
negative acknowledgement, say REJ-j (REJ: Reject). The receiver then moves its window
starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2CO318 - Systems and Network Programming Lab and Project II
Semester 6, Aug-Sep 2014
Project II: Developing a reliable data transfer protocol for computer networks
and investigating its performance
Project Details:
In this project, you are required to develop a hypothetical reliable data transfer protocol for
computer networks (using socket programming with C or other language) and to investigate its
performance. That is, you will be building a simulator for the reliable data transfer protocol,
which can be used for investigating its performance.
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announced later)
Report submission (not more than 10 pages for Part-I and Part-II): at the DEMO
Marks: Part-I = 60% and Part-II = 40% (based on the DEMO and the report)
Example-Problems (Solutions given)
1. Develop a socket program in UNIX/Linux that uses (i) TCP as the transport protocol and
(ii) UDP as the transport protocol for transferring a short message between a client and
server. The client sends a string (input by the user) to the server and the server prints the
string on the screen after receiving it.
2. Develop a TCP-based client-server socket program for transferring a large message. The
message transmitted from the client to server is read from a large file (size is about 30000
bytes). The entire message is sent by the client as a single data-unit. After receiving the
file, the server sends an ACK message to the receiver. Verify that the file has been sent
completely and correctly by comparing the received file with the original file (“diff”
command could be used). Measure the message transfer time and throughput.
3. This problem is similar to problem (2) above, but the message is split into short data-units
which are sent one by one without waiting for any acknowledgement between
transmissions of two successive data-units. Verify that the file has been sent completely
and correctly by comparing the received file with the original file. Measure the message
Page 1 of 2transfer time and throughput. Repeat it for different (at least six) data-unit sizes (say, from
100 bytes to 1000 bytes).
4. This problem is similar to problem (3) above, but it uses UDP as the transport protocol.
5. This problem is similar to problem (4) above, but the file is transferred using stop-and-
wait flow control protocol.
Project Assignment
Part-I
A hypothetical reliable data transfer protocol: A jumping window based Go-back-N
ARQ protocol for file transfer using UDP
In this protocol, a window of size W is used. The sender continuously sends W packets
corresponding to the current window, and then waits for an acknowledgement. The
receiver receives W packets. If all the packets are error-free, it sends out a positive
acknowledgement, say RR-i (RR: Receiver Ready). The receiver then moves its window
starting from the packet with the sequence number i. Upon receiving RR-i the sender
moves its window starting from the packet with the sequence number i. If a receiver
receives a damaged packet (say, with the sequence number j) in its current window, it
receives and discards all the remaining packets in the current window and it sends out a
negative acknowledgement, say REJ-j (REJ: Reject). The receiver then moves its window
starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2CO318 - Systems and Network Programming Lab and Project II
Semester 6, Aug-Sep 2014
Project II: Developing a reliable data transfer protocol for computer networks
and investigating its performance
Project Details:
In this project, you are required to develop a hypothetical reliable data transfer protocol for
computer networks (using socket programming with C or other language) and to investigate its
performance. That is, you will be building a simulator for the reliable data transfer protocol,
which can be used for investigating its performance.
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announced later)
Report submission (not more than 10 pages for Part-I and Part-II): at the DEMO
Marks: Part-I = 60% and Part-II = 40% (based on the DEMO and the report)
Example-Problems (Solutions given)
1. Develop a socket program in UNIX/Linux that uses (i) TCP as the transport protocol and
(ii) UDP as the transport protocol for transferring a short message between a client and
server. The client sends a string (input by the user) to the server and the server prints the
string on the screen after receiving it.
2. Develop a TCP-based client-server socket program for transferring a large message. The
message transmitted from the client to server is read from a large file (size is about 30000
bytes). The entire message is sent by the client as a single data-unit. After receiving the
file, the server sends an ACK message to the receiver. Verify that the file has been sent
completely and correctly by comparing the received file with the original file (“diff”
command could be used). Measure the message transfer time and throughput.
3. This problem is similar to problem (2) above, but the message is split into short data-units
which are sent one by one without waiting for any acknowledgement between
transmissions of two successive data-units. Verify that the file has been sent completely
and correctly by comparing the received file with the original file. Measure the message
Page 1 of 2transfer time and throughput. Repeat it for different (at least six) data-unit sizes (say, from
100 bytes to 1000 bytes).
4. This problem is similar to problem (3) above, but it uses UDP as the transport protocol.
5. This problem is similar to problem (4) above, but the file is transferred using stop-and-
wait flow control protocol.
Project Assignment
Part-I
A hypothetical reliable data transfer protocol: A jumping window based Go-back-N
ARQ protocol for file transfer using UDP
In this protocol, a window of size W is used. The sender continuously sends W packets
corresponding to the current window, and then waits for an acknowledgement. The
receiver receives W packets. If all the packets are error-free, it sends out a positive
acknowledgement, say RR-i (RR: Receiver Ready). The receiver then moves its window
starting from the packet with the sequence number i. Upon receiving RR-i the sender
moves its window starting from the packet with the sequence number i. If a receiver
receives a damaged packet (say, with the sequence number j) in its current window, it
receives and discards all the remaining packets in the current window and it sends out a
negative acknowledgement, say REJ-j (REJ: Reject). The receiver then moves its window
starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announced later)
Report submission (not more than 10 pages for Part-I and Part-II): at the DEMO
Marks: Part-I = 60% and Part-II = 40% (based on the DEMO and the report)
Example-Problems (Solutions given)
1. Develop a socket program in UNIX/Linux that uses (i) TCP as the transport protocol and
(ii) UDP as the transport protocol for transferring a short message between a client and
server. The client sends a string (input by the user) to the server and the server prints the
string on the screen after receiving it.
2. Develop a TCP-based client-server socket program for transferring a large message. The
message transmitted from the client to server is read from a large file (size is about 30000
bytes). The entire message is sent by the client as a single data-unit. After receiving the
file, the server sends an ACK message to the receiver. Verify that the file has been sent
completely and correctly by comparing the received file with the original file (“diff”
command could be used). Measure the message transfer time and throughput.
3. This problem is similar to problem (2) above, but the message is split into short data-units
which are sent one by one without waiting for any acknowledgement between
transmissions of two successive data-units. Verify that the file has been sent completely
and correctly by comparing the received file with the original file. Measure the message
Page 1 of 2transfer time and throughput. Repeat it for different (at least six) data-unit sizes (say, from
100 bytes to 1000 bytes).
4. This problem is similar to problem (3) above, but it uses UDP as the transport protocol.
5. This problem is similar to problem (4) above, but the file is transferred using stop-and-
wait flow control protocol.
Project Assignment
Part-I
A hypothetical reliable data transfer protocol: A jumping window based Go-back-N
ARQ protocol for file transfer using UDP
In this protocol, a window of size W is used. The sender continuously sends W packets
corresponding to the current window, and then waits for an acknowledgement. The
receiver receives W packets. If all the packets are error-free, it sends out a positive
acknowledgement, say RR-i (RR: Receiver Ready). The receiver then moves its window
starting from the packet with the sequence number i. Upon receiving RR-i the sender
moves its window starting from the packet with the sequence number i. If a receiver
receives a damaged packet (say, with the sequence number j) in its current window, it
receives and discards all the remaining packets in the current window and it sends out a
negative acknowledgement, say REJ-j (REJ: Reject). The receiver then moves its window
starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2CO318 - Systems and Network Programming Lab and Project II
Semester 6, Aug-Sep 2014
Project II: Developing a reliable data transfer protocol for computer networks
and investigating its performance
Project Details:
In this project, you are required to develop a hypothetical reliable data transfer protocol for
computer networks (using socket programming with C or other language) and to investigate its
performance. That is, you will be building a simulator for the reliable data transfer protocol,
which can be used for investigating its performance.
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announced later)
Report submission (not more than 10 pages for Part-I and Part-II): at the DEMO
Marks: Part-I = 60% and Part-II = 40% (based on the DEMO and the report)
Example-Problems (Solutions given)
1. Develop a socket program in UNIX/Linux that uses (i) TCP as the transport protocol and
(ii) UDP as the transport protocol for transferring a short message between a client and
server. The client sends a string (input by the user) to the server and the server prints the
string on the screen after receiving it.
2. Develop a TCP-based client-server socket program for transferring a large message. The
message transmitted from the client to server is read from a large file (size is about 30000
bytes). The entire message is sent by the client as a single data-unit. After receiving the
file, the server sends an ACK message to the receiver. Verify that the file has been sent
completely and correctly by comparing the received file with the original file (“diff”
command could be used). Measure the message transfer time and throughput.
3. This problem is similar to problem (2) above, but the message is split into short data-units
which are sent one by one without waiting for any acknowledgement between
transmissions of two successive data-units. Verify that the file has been sent completely
and correctly by comparing the received file with the original file. Measure the message
Page 1 of 2transfer time and throughput. Repeat it for different (at least six) data-unit sizes (say, from
100 bytes to 1000 bytes).
4. This problem is similar to problem (3) above, but it uses UDP as the transport protocol.
5. This problem is similar to problem (4) above, but the file is transferred using stop-and-
wait flow control protocol.
Project Assignment
Part-I
A hypothetical reliable data transfer protocol: A jumping window based Go-back-N
ARQ protocol for file transfer using UDP
In this protocol, a window of size W is used. The sender continuously sends W packets
corresponding to the current window, and then waits for an acknowledgement. The
receiver receives W packets. If all the packets are error-free, it sends out a positive
acknowledgement, say RR-i (RR: Receiver Ready). The receiver then moves its window
starting from the packet with the sequence number i. Upon receiving RR-i the sender
moves its window starting from the packet with the sequence number i. If a receiver
receives a damaged packet (say, with the sequence number j) in its current window, it
receives and discards all the remaining packets in the current window and it sends out a
negative acknowledgement, say REJ-j (REJ: Reject). The receiver then moves its window
starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2CO318 - Systems and Network Programming Lab and Project II
Semester 6, Aug-Sep 2014
Project II: Developing a reliable data transfer protocol for computer networks
and investigating its performance
Project Details:
In this project, you are required to develop a hypothetical reliable data transfer protocol for
computer networks (using socket programming with C or other language) and to investigate its
performance. That is, you will be building a simulator for the reliable data transfer protocol,
which can be used for investigating its performance.
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announced later)
Report submission (not more than 10 pages for Part-I and Part-II): at the DEMO
Marks: Part-I = 60% and Part-II = 40% (based on the DEMO and the report)
Example-Problems (Solutions given)
1. Develop a socket program in UNIX/Linux that uses (i) TCP as the transport protocol and
(ii) UDP as the transport protocol for transferring a short message between a client and
server. The client sends a string (input by the user) to the server and the server prints the
string on the screen after receiving it.
2. Develop a TCP-based client-server socket program for transferring a large message. The
message transmitted from the client to server is read from a large file (size is about 30000
bytes). The entire message is sent by the client as a single data-unit. After receiving the
file, the server sends an ACK message to the receiver. Verify that the file has been sent
completely and correctly by comparing the received file with the original file (“diff”
command could be used). Measure the message transfer time and throughput.
3. This problem is similar to problem (2) above, but the message is split into short data-units
which are sent one by one without waiting for any acknowledgement between
transmissions of two successive data-units. Verify that the file has been sent completely
and correctly by comparing the received file with the original file. Measure the message
Page 1 of 2transfer time and throughput. Repeat it for different (at least six) data-unit sizes (say, from
100 bytes to 1000 bytes).
4. This problem is similar to problem (3) above, but it uses UDP as the transport protocol.
5. This problem is similar to problem (4) above, but the file is transferred using stop-and-
wait flow control protocol.
Project Assignment
Part-I
A hypothetical reliable data transfer protocol: A jumping window based Go-back-N
ARQ protocol for file transfer using UDP
In this protocol, a window of size W is used. The sender continuously sends W packets
corresponding to the current window, and then waits for an acknowledgement. The
receiver receives W packets. If all the packets are error-free, it sends out a positive
acknowledgement, say RR-i (RR: Receiver Ready). The receiver then moves its window
starting from the packet with the sequence number i. Upon receiving RR-i the sender
moves its window starting from the packet with the sequence number i. If a receiver
receives a damaged packet (say, with the sequence number j) in its current window, it
receives and discards all the remaining packets in the current window and it sends out a
negative acknowledgement, say REJ-j (REJ: Reject). The receiver then moves its window
starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announced later)
Report submission (not more than 10 pages for Part-I and Part-II): at the DEMO
Marks: Part-I = 60% and Part-II = 40% (based on the DEMO and the report)
Example-Problems (Solutions given)
1. Develop a socket program in UNIX/Linux that uses (i) TCP as the transport protocol and
(ii) UDP as the transport protocol for transferring a short message between a client and
server. The client sends a string (input by the user) to the server and the server prints the
string on the screen after receiving it.
2. Develop a TCP-based client-server socket program for transferring a large message. The
message transmitted from the client to server is read from a large file (size is about 30000
bytes). The entire message is sent by the client as a single data-unit. After receiving the
file, the server sends an ACK message to the receiver. Verify that the file has been sent
completely and correctly by comparing the received file with the original file (“diff”
command could be used). Measure the message transfer time and throughput.
3. This problem is similar to problem (2) above, but the message is split into short data-units
which are sent one by one without waiting for any acknowledgement between
transmissions of two successive data-units. Verify that the file has been sent completely
and correctly by comparing the received file with the original file. Measure the message
Page 1 of 2transfer time and throughput. Repeat it for different (at least six) data-unit sizes (say, from
100 bytes to 1000 bytes).
4. This problem is similar to problem (3) above, but it uses UDP as the transport protocol.
5. This problem is similar to problem (4) above, but the file is transferred using stop-and-
wait flow control protocol.
Project Assignment
Part-I
A hypothetical reliable data transfer protocol: A jumping window based Go-back-N
ARQ protocol for file transfer using UDP
In this protocol, a window of size W is used. The sender continuously sends W packets
corresponding to the current window, and then waits for an acknowledgement. The
receiver receives W packets. If all the packets are error-free, it sends out a positive
acknowledgement, say RR-i (RR: Receiver Ready). The receiver then moves its window
starting from the packet with the sequence number i. Upon receiving RR-i the sender
moves its window starting from the packet with the sequence number i. If a receiver
receives a damaged packet (say, with the sequence number j) in its current window, it
receives and discards all the remaining packets in the current window and it sends out a
negative acknowledgement, say REJ-j (REJ: Reject). The receiver then moves its window
starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2CO318 - Systems and Network Programming Lab and Project II
Semester 6, Aug-Sep 2014
Project II: Developing a reliable data transfer protocol for computer networks
and investigating its performance
Project Details:
In this project, you are required to develop a hypothetical reliable data transfer protocol for
computer networks (using socket programming with C or other language) and to investigate its
performance. That is, you will be building a simulator for the reliable data transfer protocol,
which can be used for investigating its performance.
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announced later)
Report submission (not more than 10 pages for Part-I and Part-II): at the DEMO
Marks: Part-I = 60% and Part-II = 40% (based on the DEMO and the report)
Example-Problems (Solutions given)
1. Develop a socket program in UNIX/Linux that uses (i) TCP as the transport protocol and
(ii) UDP as the transport protocol for transferring a short message between a client and
server. The client sends a string (input by the user) to the server and the server prints the
string on the screen after receiving it.
2. Develop a TCP-based client-server socket program for transferring a large message. The
message transmitted from the client to server is read from a large file (size is about 30000
bytes). The entire message is sent by the client as a single data-unit. After receiving the
file, the server sends an ACK message to the receiver. Verify that the file has been sent
completely and correctly by comparing the received file with the original file (“diff”
command could be used). Measure the message transfer time and throughput.
3. This problem is similar to problem (2) above, but the message is split into short data-units
which are sent one by one without waiting for any acknowledgement between
transmissions of two successive data-units. Verify that the file has been sent completely
and correctly by comparing the received file with the original file. Measure the message
Page 1 of 2transfer time and throughput. Repeat it for different (at least six) data-unit sizes (say, from
100 bytes to 1000 bytes).
4. This problem is similar to problem (3) above, but it uses UDP as the transport protocol.
5. This problem is similar to problem (4) above, but the file is transferred using stop-and-
wait flow control protocol.
Project Assignment
Part-I
A hypothetical reliable data transfer protocol: A jumping window based Go-back-N
ARQ protocol for file transfer using UDP
In this protocol, a window of size W is used. The sender continuously sends W packets
corresponding to the current window, and then waits for an acknowledgement. The
receiver receives W packets. If all the packets are error-free, it sends out a positive
acknowledgement, say RR-i (RR: Receiver Ready). The receiver then moves its window
starting from the packet with the sequence number i. Upon receiving RR-i the sender
moves its window starting from the packet with the sequence number i. If a receiver
receives a damaged packet (say, with the sequence number j) in its current window, it
receives and discards all the remaining packets in the current window and it sends out a
negative acknowledgement, say REJ-j (REJ: Reject). The receiver then moves its window
starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2CO318 - Systems and Network Programming Lab and Project II
Semester 6, Aug-Sep 2014
Project II: Developing a reliable data transfer protocol for computer networks
and investigating its performance
Project Details:
In this project, you are required to develop a hypothetical reliable data transfer protocol for
computer networks (using socket programming with C or other language) and to investigate its
performance. That is, you will be building a simulator for the reliable data transfer protocol,
which can be used for investigating its performance.
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announced later)
Report submission (not more than 10 pages for Part-I and Part-II): at the DEMO
Marks: Part-I = 60% and Part-II = 40% (based on the DEMO and the report)
Example-Problems (Solutions given)
1. Develop a socket program in UNIX/Linux that uses (i) TCP as the transport protocol and
(ii) UDP as the transport protocol for transferring a short message between a client and
server. The client sends a string (input by the user) to the server and the server prints the
string on the screen after receiving it.
2. Develop a TCP-based client-server socket program for transferring a large message. The
message transmitted from the client to server is read from a large file (size is about 30000
bytes). The entire message is sent by the client as a single data-unit. After receiving the
file, the server sends an ACK message to the receiver. Verify that the file has been sent
completely and correctly by comparing the received file with the original file (“diff”
command could be used). Measure the message transfer time and throughput.
3. This problem is similar to problem (2) above, but the message is split into short data-units
which are sent one by one without waiting for any acknowledgement between
transmissions of two successive data-units. Verify that the file has been sent completely
and correctly by comparing the received file with the original file. Measure the message
Page 1 of 2transfer time and throughput. Repeat it for different (at least six) data-unit sizes (say, from
100 bytes to 1000 bytes).
4. This problem is similar to problem (3) above, but it uses UDP as the transport protocol.
5. This problem is similar to problem (4) above, but the file is transferred using stop-and-
wait flow control protocol.
Project Assignment
Part-I
A hypothetical reliable data transfer protocol: A jumping window based Go-back-N
ARQ protocol for file transfer using UDP
In this protocol, a window of size W is used. The sender continuously sends W packets
corresponding to the current window, and then waits for an acknowledgement. The
receiver receives W packets. If all the packets are error-free, it sends out a positive
acknowledgement, say RR-i (RR: Receiver Ready). The receiver then moves its window
starting from the packet with the sequence number i. Upon receiving RR-i the sender
moves its window starting from the packet with the sequence number i. If a receiver
receives a damaged packet (say, with the sequence number j) in its current window, it
receives and discards all the remaining packets in the current window and it sends out a
negative acknowledgement, say REJ-j (REJ: Reject). The receiver then moves its window
starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announced later)
Report submission (not more than 10 pages for Part-I and Part-II): at the DEMO
Marks: Part-I = 60% and Part-II = 40% (based on the DEMO and the report)
Example-Problems (Solutions given)
1. Develop a socket program in UNIX/Linux that uses (i) TCP as the transport protocol and
(ii) UDP as the transport protocol for transferring a short message between a client and
server. The client sends a string (input by the user) to the server and the server prints the
string on the screen after receiving it.
2. Develop a TCP-based client-server socket program for transferring a large message. The
message transmitted from the client to server is read from a large file (size is about 30000
bytes). The entire message is sent by the client as a single data-unit. After receiving the
file, the server sends an ACK message to the receiver. Verify that the file has been sent
completely and correctly by comparing the received file with the original file (“diff”
command could be used). Measure the message transfer time and throughput.
3. This problem is similar to problem (2) above, but the message is split into short data-units
which are sent one by one without waiting for any acknowledgement between
transmissions of two successive data-units. Verify that the file has been sent completely
and correctly by comparing the received file with the original file. Measure the message
Page 1 of 2transfer time and throughput. Repeat it for different (at least six) data-unit sizes (say, from
100 bytes to 1000 bytes).
4. This problem is similar to problem (3) above, but it uses UDP as the transport protocol.
5. This problem is similar to problem (4) above, but the file is transferred using stop-and-
wait flow control protocol.
Project Assignment
Part-I
A hypothetical reliable data transfer protocol: A jumping window based Go-back-N
ARQ protocol for file transfer using UDP
In this protocol, a window of size W is used. The sender continuously sends W packets
corresponding to the current window, and then waits for an acknowledgement. The
receiver receives W packets. If all the packets are error-free, it sends out a positive
acknowledgement, say RR-i (RR: Receiver Ready). The receiver then moves its window
starting from the packet with the sequence number i. Upon receiving RR-i the sender
moves its window starting from the packet with the sequence number i. If a receiver
receives a damaged packet (say, with the sequence number j) in its current window, it
receives and discards all the remaining packets in the current window and it sends out a
negative acknowledgement, say REJ-j (REJ: Reject). The receiver then moves its window
starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2CO318 - Systems and Network Programming Lab and Project II
Semester 6, Aug-Sep 2014
Project II: Developing a reliable data transfer protocol for computer networks
and investigating its performance
Project Details:
In this project, you are required to develop a hypothetical reliable data transfer protocol for
computer networks (using socket programming with C or other language) and to investigate its
performance. That is, you will be building a simulator for the reliable data transfer protocol,
which can be used for investigating its performance.
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announced later)
Report submission (not more than 10 pages for Part-I and Part-II): at the DEMO
Marks: Part-I = 60% and Part-II = 40% (based on the DEMO and the report)
Example-Problems (Solutions given)
1. Develop a socket program in UNIX/Linux that uses (i) TCP as the transport protocol and
(ii) UDP as the transport protocol for transferring a short message between a client and
server. The client sends a string (input by the user) to the server and the server prints the
string on the screen after receiving it.
2. Develop a TCP-based client-server socket program for transferring a large message. The
message transmitted from the client to server is read from a large file (size is about 30000
bytes). The entire message is sent by the client as a single data-unit. After receiving the
file, the server sends an ACK message to the receiver. Verify that the file has been sent
completely and correctly by comparing the received file with the original file (“diff”
command could be used). Measure the message transfer time and throughput.
3. This problem is similar to problem (2) above, but the message is split into short data-units
which are sent one by one without waiting for any acknowledgement between
transmissions of two successive data-units. Verify that the file has been sent completely
and correctly by comparing the received file with the original file. Measure the message
Page 1 of 2transfer time and throughput. Repeat it for different (at least six) data-unit sizes (say, from
100 bytes to 1000 bytes).
4. This problem is similar to problem (3) above, but it uses UDP as the transport protocol.
5. This problem is similar to problem (4) above, but the file is transferred using stop-and-
wait flow control protocol.
Project Assignment
Part-I
A hypothetical reliable data transfer protocol: A jumping window based Go-back-N
ARQ protocol for file transfer using UDP
In this protocol, a window of size W is used. The sender continuously sends W packets
corresponding to the current window, and then waits for an acknowledgement. The
receiver receives W packets. If all the packets are error-free, it sends out a positive
acknowledgement, say RR-i (RR: Receiver Ready). The receiver then moves its window
starting from the packet with the sequence number i. Upon receiving RR-i the sender
moves its window starting from the packet with the sequence number i. If a receiver
receives a damaged packet (say, with the sequence number j) in its current window, it
receives and discards all the remaining packets in the current window and it sends out a
negative acknowledgement, say REJ-j (REJ: Reject). The receiver then moves its window
starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2CO318 - Systems and Network Programming Lab and Project II
Semester 6, Aug-Sep 2014
Project II: Developing a reliable data transfer protocol for computer networks
and investigating its performance
Project Details:
In this project, you are required to develop a hypothetical reliable data transfer protocol for
computer networks (using socket programming with C or other language) and to investigate its
performance. That is, you will be building a simulator for the reliable data transfer protocol,
which can be used for investigating its performance.
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announced later)
Report submission (not more than 10 pages for Part-I and Part-II): at the DEMO
Marks: Part-I = 60% and Part-II = 40% (based on the DEMO and the report)
Example-Problems (Solutions given)
1. Develop a socket program in UNIX/Linux that uses (i) TCP as the transport protocol and
(ii) UDP as the transport protocol for transferring a short message between a client and
server. The client sends a string (input by the user) to the server and the server prints the
string on the screen after receiving it.
2. Develop a TCP-based client-server socket program for transferring a large message. The
message transmitted from the client to server is read from a large file (size is about 30000
bytes). The entire message is sent by the client as a single data-unit. After receiving the
file, the server sends an ACK message to the receiver. Verify that the file has been sent
completely and correctly by comparing the received file with the original file (“diff”
command could be used). Measure the message transfer time and throughput.
3. This problem is similar to problem (2) above, but the message is split into short data-units
which are sent one by one without waiting for any acknowledgement between
transmissions of two successive data-units. Verify that the file has been sent completely
and correctly by comparing the received file with the original file. Measure the message
Page 1 of 2transfer time and throughput. Repeat it for different (at least six) data-unit sizes (say, from
100 bytes to 1000 bytes).
4. This problem is similar to problem (3) above, but it uses UDP as the transport protocol.
5. This problem is similar to problem (4) above, but the file is transferred using stop-and-
wait flow control protocol.
Project Assignment
Part-I
A hypothetical reliable data transfer protocol: A jumping window based Go-back-N
ARQ protocol for file transfer using UDP
In this protocol, a window of size W is used. The sender continuously sends W packets
corresponding to the current window, and then waits for an acknowledgement. The
receiver receives W packets. If all the packets are error-free, it sends out a positive
acknowledgement, say RR-i (RR: Receiver Ready). The receiver then moves its window
starting from the packet with the sequence number i. Upon receiving RR-i the sender
moves its window starting from the packet with the sequence number i. If a receiver
receives a damaged packet (say, with the sequence number j) in its current window, it
receives and discards all the remaining packets in the current window and it sends out a
negative acknowledgement, say REJ-j (REJ: Reject). The receiver then moves its window
starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announced later)
Report submission (not more than 10 pages for Part-I and Part-II): at the DEMO
Marks: Part-I = 60% and Part-II = 40% (based on the DEMO and the report)
Example-Problems (Solutions given)
1. Develop a socket program in UNIX/Linux that uses (i) TCP as the transport protocol and
(ii) UDP as the transport protocol for transferring a short message between a client and
server. The client sends a string (input by the user) to the server and the server prints the
string on the screen after receiving it.
2. Develop a TCP-based client-server socket program for transferring a large message. The
message transmitted from the client to server is read from a large file (size is about 30000
bytes). The entire message is sent by the client as a single data-unit. After receiving the
file, the server sends an ACK message to the receiver. Verify that the file has been sent
completely and correctly by comparing the received file with the original file (“diff”
command could be used). Measure the message transfer time and throughput.
3. This problem is similar to problem (2) above, but the message is split into short data-units
which are sent one by one without waiting for any acknowledgement between
transmissions of two successive data-units. Verify that the file has been sent completely
and correctly by comparing the received file with the original file. Measure the message
Page 1 of 2transfer time and throughput. Repeat it for different (at least six) data-unit sizes (say, from
100 bytes to 1000 bytes).
4. This problem is similar to problem (3) above, but it uses UDP as the transport protocol.
5. This problem is similar to problem (4) above, but the file is transferred using stop-and-
wait flow control protocol.
Project Assignment
Part-I
A hypothetical reliable data transfer protocol: A jumping window based Go-back-N
ARQ protocol for file transfer using UDP
In this protocol, a window of size W is used. The sender continuously sends W packets
corresponding to the current window, and then waits for an acknowledgement. The
receiver receives W packets. If all the packets are error-free, it sends out a positive
acknowledgement, say RR-i (RR: Receiver Ready). The receiver then moves its window
starting from the packet with the sequence number i. Upon receiving RR-i the sender
moves its window starting from the packet with the sequence number i. If a receiver
receives a damaged packet (say, with the sequence number j) in its current window, it
receives and discards all the remaining packets in the current window and it sends out a
negative acknowledgement, say REJ-j (REJ: Reject). The receiver then moves its window
starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration shouldstarting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2CO318 - Systems and Network Programming Lab and Project II
Semester 6, Aug-Sep 2014
Project II: Developing a reliable data transfer protocol for computer networks
and investigating its performance
Project Details:
In this project, you are required to develop a hypothetical reliable data transfer protocol for
computer networks (using socket programming with C or other language) and to investigate its
performance. That is, you will be building a simulator for the reliable data transfer protocol,
which can be used for investigating its performance.
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announced later)
Report submission (not more than 10 pages for Part-I and Part-II): at the DEMO
Marks: Part-I = 60% and Part-II = 40% (based on the DEMO and the report)
Example-Problems (Solutions given)
1. Develop a socket program in UNIX/Linux that uses (i) TCP as the transport protocol and
(ii) UDP as the transport protocol for transferring a short message between a client and
server. The client sends a string (input by the user) to the server and the server prints the
string on the screen after receiving it.
2. Develop a TCP-based client-server socket program for transferring a large message. The
message transmitted from the client to server is read from a large file (size is about 30000
bytes). The entire message is sent by the client as a single data-unit. After receiving the
file, the server sends an ACK message to the receiver. Verify that the file has been sent
completely and correctly by comparing the received file with the original file (“diff”
command could be used). Measure the message transfer time and throughput.
3. This problem is similar to problem (2) above, but the message is split into short data-units
which are sent one by one without waiting for any acknowledgement between
transmissions of two successive data-units. Verify that the file has been sent completely
and correctly by comparing the received file with the original file. Measure the message
Page 1 of 2transfer time and throughput. Repeat it for different (at least six) data-unit sizes (say, from
100 bytes to 1000 bytes).
4. This problem is similar to problem (3) above, but it uses UDP as the transport protocol.
5. This problem is similar to problem (4) above, but the file is transferred using stop-and-
wait flow control protocol.
Project Assignment
Part-I
A hypothetical reliable data transfer protocol: A jumping window based Go-back-N
ARQ protocol for file transfer using UDP
In this protocol, a window of size W is used. The sender continuously sends W packets
corresponding to the current window, and then waits for an acknowledgement. The
receiver receives W packets. If all the packets are error-free, it sends out a positive
acknowledgement, say RR-i (RR: Receiver Ready). The receiver then moves its window
starting from the packet with the sequence number i. Upon receiving RR-i the sender
moves its window starting from the packet with the sequence number i. If a receiver
receives a damaged packet (say, with the sequence number j) in its current window, it
receives and discards all the remaining packets in the current window and it sends out a
negative acknowledgement, say REJ-j (REJ: Reject). The receiver then moves its window
starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2CO318 - Systems and Network Programming Lab and Project II
Semester 6, Aug-Sep 2014
Project II: Developing a reliable data transfer protocol for computer networks
and investigating its performance
Project Details:
In this project, you are required to develop a hypothetical reliable data transfer protocol for
computer networks (using socket programming with C or other language) and to investigate its
performance. That is, you will be building a simulator for the reliable data transfer protocol,
which can be used for investigating its performance.
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announced later)
Report submission (not more than 10 pages for Part-I and Part-II): at the DEMO
Marks: Part-I = 60% and Part-II = 40% (based on the DEMO and the report)
Example-Problems (Solutions given)
1. Develop a socket program in UNIX/Linux that uses (i) TCP as the transport protocol and
(ii) UDP as the transport protocol for transferring a short message between a client and
server. The client sends a string (input by the user) to the server and the server prints the
string on the screen after receiving it.
2. Develop a TCP-based client-server socket program for transferring a large message. The
message transmitted from the client to server is read from a large file (size is about 30000
bytes). The entire message is sent by the client as a single data-unit. After receiving the
file, the server sends an ACK message to the receiver. Verify that the file has been sent
completely and correctly by comparing the received file with the original file (“diff”
command could be used). Measure the message transfer time and throughput.
3. This problem is similar to problem (2) above, but the message is split into short data-units
which are sent one by one without waiting for any acknowledgement between
transmissions of two successive data-units. Verify that the file has been sent completely
and correctly by comparing the received file with the original file. Measure the message
Page 1 of 2transfer time and throughput. Repeat it for different (at least six) data-unit sizes (say, from
100 bytes to 1000 bytes).
4. This problem is similar to problem (3) above, but it uses UDP as the transport protocol.
5. This problem is similar to problem (4) above, but the file is transferred using stop-and-
wait flow control protocol.
Project Assignment
Part-I
A hypothetical reliable data transfer protocol: A jumping window based Go-back-N
ARQ protocol for file transfer using UDP
In this protocol, a window of size W is used. The sender continuously sends W packets
corresponding to the current window, and then waits for an acknowledgement. The
receiver receives W packets. If all the packets are error-free, it sends out a positive
acknowledgement, say RR-i (RR: Receiver Ready). The receiver then moves its window
starting from the packet with the sequence number i. Upon receiving RR-i the sender
moves its window starting from the packet with the sequence number i. If a receiver
receives a damaged packet (say, with the sequence number j) in its current window, it
receives and discards all the remaining packets in the current window and it sends out a
negative acknowledgement, say REJ-j (REJ: Reject). The receiver then moves its window
starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announced later)
Report submission (not more than 10 pages for Part-I and Part-II): at the DEMO
Marks: Part-I = 60% and Part-II = 40% (based on the DEMO and the report)
Example-Problems (Solutions given)
1. Develop a socket program in UNIX/Linux that uses (i) TCP as the transport protocol and
(ii) UDP as the transport protocol for transferring a short message between a client and
server. The client sends a string (input by the user) to the server and the server prints the
string on the screen after receiving it.
2. Develop a TCP-based client-server socket program for transferring a large message. The
message transmitted from the client to server is read from a large file (size is about 30000
bytes). The entire message is sent by the client as a single data-unit. After receiving the
file, the server sends an ACK message to the receiver. Verify that the file has been sent
completely and correctly by comparing the received file with the original file (“diff”
command could be used). Measure the message transfer time and throughput.
3. This problem is similar to problem (2) above, but the message is split into short data-units
which are sent one by one without waiting for any acknowledgement between
transmissions of two successive data-units. Verify that the file has been sent completely
and correctly by comparing the received file with the original file. Measure the message
Page 1 of 2transfer time and throughput. Repeat it for different (at least six) data-unit sizes (say, from
100 bytes to 1000 bytes).
4. This problem is similar to problem (3) above, but it uses UDP as the transport protocol.
5. This problem is similar to problem (4) above, but the file is transferred using stop-and-
wait flow control protocol.
Project Assignment
Part-I
A hypothetical reliable data transfer protocol: A jumping window based Go-back-N
ARQ protocol for file transfer using UDP
In this protocol, a window of size W is used. The sender continuously sends W packets
corresponding to the current window, and then waits for an acknowledgement. The
receiver receives W packets. If all the packets are error-free, it sends out a positive
acknowledgement, say RR-i (RR: Receiver Ready). The receiver then moves its window
starting from the packet with the sequence number i. Upon receiving RR-i the sender
moves its window starting from the packet with the sequence number i. If a receiver
receives a damaged packet (say, with the sequence number j) in its current window, it
receives and discards all the remaining packets in the current window and it sends out a
negative acknowledgement, say REJ-j (REJ: Reject). The receiver then moves its window
starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2CO318 - Systems and Network Programming Lab and Project II
Semester 6, Aug-Sep 2014
Project II: Developing a reliable data transfer protocol for computer networks
and investigating its performance
Project Details:
In this project, you are required to develop a hypothetical reliable data transfer protocol for
computer networks (using socket programming with C or other language) and to investigate its
performance. That is, you will be building a simulator for the reliable data transfer protocol,
which can be used for investigating its performance.
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announced later)
Report submission (not more than 10 pages for Part-I and Part-II): at the DEMO
Marks: Part-I = 60% and Part-II = 40% (based on the DEMO and the report)
Example-Problems (Solutions given)
1. Develop a socket program in UNIX/Linux that uses (i) TCP as the transport protocol and
(ii) UDP as the transport protocol for transferring a short message between a client and
server. The client sends a string (input by the user) to the server and the server prints the
string on the screen after receiving it.
2. Develop a TCP-based client-server socket program for transferring a large message. The
message transmitted from the client to server is read from a large file (size is about 30000
bytes). The entire message is sent by the client as a single data-unit. After receiving the
file, the server sends an ACK message to the receiver. Verify that the file has been sent
completely and correctly by comparing the received file with the original file (“diff”
command could be used). Measure the message transfer time and throughput.
3. This problem is similar to problem (2) above, but the message is split into short data-units
which are sent one by one without waiting for any acknowledgement between
transmissions of two successive data-units. Verify that the file has been sent completely
and correctly by comparing the received file with the original file. Measure the message
Page 1 of 2transfer time and throughput. Repeat it for different (at least six) data-unit sizes (say, from
100 bytes to 1000 bytes).
4. This problem is similar to problem (3) above, but it uses UDP as the transport protocol.
5. This problem is similar to problem (4) above, but the file is transferred using stop-and-
wait flow control protocol.
Project Assignment
Part-I
A hypothetical reliable data transfer protocol: A jumping window based Go-back-N
ARQ protocol for file transfer using UDP
In this protocol, a window of size W is used. The sender continuously sends W packets
corresponding to the current window, and then waits for an acknowledgement. The
receiver receives W packets. If all the packets are error-free, it sends out a positive
acknowledgement, say RR-i (RR: Receiver Ready). The receiver then moves its window
starting from the packet with the sequence number i. Upon receiving RR-i the sender
moves its window starting from the packet with the sequence number i. If a receiver
receives a damaged packet (say, with the sequence number j) in its current window, it
receives and discards all the remaining packets in the current window and it sends out a
negative acknowledgement, say REJ-j (REJ: Reject). The receiver then moves its window
starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2CO318 - Systems and Network Programming Lab and Project II
Semester 6, Aug-Sep 2014
Project II: Developing a reliable data transfer protocol for computer networks
and investigating its performance
Project Details:
In this project, you are required to develop a hypothetical reliable data transfer protocol for
computer networks (using socket programming with C or other language) and to investigate its
performance. That is, you will be building a simulator for the reliable data transfer protocol,
which can be used for investigating its performance.
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announced later)
Report submission (not more than 10 pages for Part-I and Part-II): at the DEMO
Marks: Part-I = 60% and Part-II = 40% (based on the DEMO and the report)
Example-Problems (Solutions given)
1. Develop a socket program in UNIX/Linux that uses (i) TCP as the transport protocol and
(ii) UDP as the transport protocol for transferring a short message between a client and
server. The client sends a string (input by the user) to the server and the server prints the
string on the screen after receiving it.
2. Develop a TCP-based client-server socket program for transferring a large message. The
message transmitted from the client to server is read from a large file (size is about 30000
bytes). The entire message is sent by the client as a single data-unit. After receiving the
file, the server sends an ACK message to the receiver. Verify that the file has been sent
completely and correctly by comparing the received file with the original file (“diff”
command could be used). Measure the message transfer time and throughput.
3. This problem is similar to problem (2) above, but the message is split into short data-units
which are sent one by one without waiting for any acknowledgement between
transmissions of two successive data-units. Verify that the file has been sent completely
and correctly by comparing the received file with the original file. Measure the message
Page 1 of 2transfer time and throughput. Repeat it for different (at least six) data-unit sizes (say, from
100 bytes to 1000 bytes).
4. This problem is similar to problem (3) above, but it uses UDP as the transport protocol.
5. This problem is similar to problem (4) above, but the file is transferred using stop-and-
wait flow control protocol.
Project Assignment
Part-I
A hypothetical reliable data transfer protocol: A jumping window based Go-back-N
ARQ protocol for file transfer using UDP
In this protocol, a window of size W is used. The sender continuously sends W packets
corresponding to the current window, and then waits for an acknowledgement. The
receiver receives W packets. If all the packets are error-free, it sends out a positive
acknowledgement, say RR-i (RR: Receiver Ready). The receiver then moves its window
starting from the packet with the sequence number i. Upon receiving RR-i the sender
moves its window starting from the packet with the sequence number i. If a receiver
receives a damaged packet (say, with the sequence number j) in its current window, it
receives and discards all the remaining packets in the current window and it sends out a
negative acknowledgement, say REJ-j (REJ: Reject). The receiver then moves its window
starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announced later)
Report submission (not more than 10 pages for Part-I and Part-II): at the DEMO
Marks: Part-I = 60% and Part-II = 40% (based on the DEMO and the report)
Example-Problems (Solutions given)
1. Develop a socket program in UNIX/Linux that uses (i) TCP as the transport protocol and
(ii) UDP as the transport protocol for transferring a short message between a client and
server. The client sends a string (input by the user) to the server and the server prints the
string on the screen after receiving it.
2. Develop a TCP-based client-server socket program for transferring a large message. The
message transmitted from the client to server is read from a large file (size is about 30000
bytes). The entire message is sent by the client as a single data-unit. After receiving the
file, the server sends an ACK message to the receiver. Verify that the file has been sent
completely and correctly by comparing the received file with the original file (“diff”
command could be used). Measure the message transfer time and throughput.
3. This problem is similar to problem (2) above, but the message is split into short data-units
which are sent one by one without waiting for any acknowledgement between
transmissions of two successive data-units. Verify that the file has been sent completely
and correctly by comparing the received file with the original file. Measure the message
Page 1 of 2transfer time and throughput. Repeat it for different (at least six) data-unit sizes (say, from
100 bytes to 1000 bytes).
4. This problem is similar to problem (3) above, but it uses UDP as the transport protocol.
5. This problem is similar to problem (4) above, but the file is transferred using stop-and-
wait flow control protocol.
Project Assignment
Part-I
A hypothetical reliable data transfer protocol: A jumping window based Go-back-N
ARQ protocol for file transfer using UDP
In this protocol, a window of size W is used. The sender continuously sends W packets
corresponding to the current window, and then waits for an acknowledgement. The
receiver receives W packets. If all the packets are error-free, it sends out a positive
acknowledgement, say RR-i (RR: Receiver Ready). The receiver then moves its window
starting from the packet with the sequence number i. Upon receiving RR-i the sender
moves its window starting from the packet with the sequence number i. If a receiver
receives a damaged packet (say, with the sequence number j) in its current window, it
receives and discards all the remaining packets in the current window and it sends out a
negative acknowledgement, say REJ-j (REJ: Reject). The receiver then moves its window
starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2CO318 - Systems and Network Programming Lab and Project II
Semester 6, Aug-Sep 2014
Project II: Developing a reliable data transfer protocol for computer networks
and investigating its performance
Project Details:
In this project, you are required to develop a hypothetical reliable data transfer protocol for
computer networks (using socket programming with C or other language) and to investigate its
performance. That is, you will be building a simulator for the reliable data transfer protocol,
which can be used for investigating its performance.
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announced later)
Report submission (not more than 10 pages for Part-I and Part-II): at the DEMO
Marks: Part-I = 60% and Part-II = 40% (based on the DEMO and the report)
Example-Problems (Solutions given)
1. Develop a socket program in UNIX/Linux that uses (i) TCP as the transport protocol and
(ii) UDP as the transport protocol for transferring a short message between a client and
server. The client sends a string (input by the user) to the server and the server prints the
string on the screen after receiving it.
2. Develop a TCP-based client-server socket program for transferring a large message. The
message transmitted from the client to server is read from a large file (size is about 30000
bytes). The entire message is sent by the client as a single data-unit. After receiving the
file, the server sends an ACK message to the receiver. Verify that the file has been sent
completely and correctly by comparing the received file with the original file (“diff”
command could be used). Measure the message transfer time and throughput.
3. This problem is similar to problem (2) above, but the message is split into short data-units
which are sent one by one without waiting for any acknowledgement between
transmissions of two successive data-units. Verify that the file has been sent completely
and correctly by comparing the received file with the original file. Measure the message
Page 1 of 2transfer time and throughput. Repeat it for different (at least six) data-unit sizes (say, from
100 bytes to 1000 bytes).
4. This problem is similar to problem (3) above, but it uses UDP as the transport protocol.
5. This problem is similar to problem (4) above, but the file is transferred using stop-and-
wait flow control protocol.
Project Assignment
Part-I
A hypothetical reliable data transfer protocol: A jumping window based Go-back-N
ARQ protocol for file transfer using UDP
In this protocol, a window of size W is used. The sender continuously sends W packets
corresponding to the current window, and then waits for an acknowledgement. The
receiver receives W packets. If all the packets are error-free, it sends out a positive
acknowledgement, say RR-i (RR: Receiver Ready). The receiver then moves its window
starting from the packet with the sequence number i. Upon receiving RR-i the sender
moves its window starting from the packet with the sequence number i. If a receiver
receives a damaged packet (say, with the sequence number j) in its current window, it
receives and discards all the remaining packets in the current window and it sends out a
negative acknowledgement, say REJ-j (REJ: Reject). The receiver then moves its window
starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2CO318 - Systems and Network Programming Lab and Project II
Semester 6, Aug-Sep 2014
Project II: Developing a reliable data transfer protocol for computer networks
and investigating its performance
Project Details:
In this project, you are required to develop a hypothetical reliable data transfer protocol for
computer networks (using socket programming with C or other language) and to investigate its
performance. That is, you will be building a simulator for the reliable data transfer protocol,
which can be used for investigating its performance.
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announced later)
Report submission (not more than 10 pages for Part-I and Part-II): at the DEMO
Marks: Part-I = 60% and Part-II = 40% (based on the DEMO and the report)
Example-Problems (Solutions given)
1. Develop a socket program in UNIX/Linux that uses (i) TCP as the transport protocol and
(ii) UDP as the transport protocol for transferring a short message between a client and
server. The client sends a string (input by the user) to the server and the server prints the
string on the screen after receiving it.
2. Develop a TCP-based client-server socket program for transferring a large message. The
message transmitted from the client to server is read from a large file (size is about 30000
bytes). The entire message is sent by the client as a single data-unit. After receiving the
file, the server sends an ACK message to the receiver. Verify that the file has been sent
completely and correctly by comparing the received file with the original file (“diff”
command could be used). Measure the message transfer time and throughput.
3. This problem is similar to problem (2) above, but the message is split into short data-units
which are sent one by one without waiting for any acknowledgement between
transmissions of two successive data-units. Verify that the file has been sent completely
and correctly by comparing the received file with the original file. Measure the message
Page 1 of 2transfer time and throughput. Repeat it for different (at least six) data-unit sizes (say, from
100 bytes to 1000 bytes).
4. This problem is similar to problem (3) above, but it uses UDP as the transport protocol.
5. This problem is similar to problem (4) above, but the file is transferred using stop-and-
wait flow control protocol.
Project Assignment
Part-I
A hypothetical reliable data transfer protocol: A jumping window based Go-back-N
ARQ protocol for file transfer using UDP
In this protocol, a window of size W is used. The sender continuously sends W packets
corresponding to the current window, and then waits for an acknowledgement. The
receiver receives W packets. If all the packets are error-free, it sends out a positive
acknowledgement, say RR-i (RR: Receiver Ready). The receiver then moves its window
starting from the packet with the sequence number i. Upon receiving RR-i the sender
moves its window starting from the packet with the sequence number i. If a receiver
receives a damaged packet (say, with the sequence number j) in its current window, it
receives and discards all the remaining packets in the current window and it sends out a
negative acknowledgement, say REJ-j (REJ: Reject). The receiver then moves its window
starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announced later)
Report submission (not more than 10 pages for Part-I and Part-II): at the DEMO
Marks: Part-I = 60% and Part-II = 40% (based on the DEMO and the report)
Example-Problems (Solutions given)
1. Develop a socket program in UNIX/Linux that uses (i) TCP as the transport protocol and
(ii) UDP as the transport protocol for transferring a short message between a client and
server. The client sends a string (input by the user) to the server and the server prints the
string on the screen after receiving it.
2. Develop a TCP-based client-server socket program for transferring a large message. The
message transmitted from the client to server is read from a large file (size is about 30000
bytes). The entire message is sent by the client as a single data-unit. After receiving the
file, the server sends an ACK message to the receiver. Verify that the file has been sent
completely and correctly by comparing the received file with the original file (“diff”
command could be used). Measure the message transfer time and throughput.
3. This problem is similar to problem (2) above, but the message is split into short data-units
which are sent one by one without waiting for any acknowledgement between
transmissions of two successive data-units. Verify that the file has been sent completely
and correctly by comparing the received file with the original file. Measure the message
Page 1 of 2transfer time and throughput. Repeat it for different (at least six) data-unit sizes (say, from
100 bytes to 1000 bytes).
4. This problem is similar to problem (3) above, but it uses UDP as the transport protocol.
5. This problem is similar to problem (4) above, but the file is transferred using stop-and-
wait flow control protocol.
Project Assignment
Part-I
A hypothetical reliable data transfer protocol: A jumping window based Go-back-N
ARQ protocol for file transfer using UDP
In this protocol, a window of size W is used. The sender continuously sends W packets
corresponding to the current window, and then waits for an acknowledgement. The
receiver receives W packets. If all the packets are error-free, it sends out a positive
acknowledgement, say RR-i (RR: Receiver Ready). The receiver then moves its window
starting from the packet with the sequence number i. Upon receiving RR-i the sender
moves its window starting from the packet with the sequence number i. If a receiver
receives a damaged packet (say, with the sequence number j) in its current window, it
receives and discards all the remaining packets in the current window and it sends out a
negative acknowledgement, say REJ-j (REJ: Reject). The receiver then moves its window
starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2CO318 - Systems and Network Programming Lab and Project II
Semester 6, Aug-Sep 2014
Project II: Developing a reliable data transfer protocol for computer networks
and investigating its performance
Project Details:
In this project, you are required to develop a hypothetical reliable data transfer protocol for
computer networks (using socket programming with C or other language) and to investigate its
performance. That is, you will be building a simulator for the reliable data transfer protocol,
which can be used for investigating its performance.
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announced later)
Report submission (not more than 10 pages for Part-I and Part-II): at the DEMO
Marks: Part-I = 60% and Part-II = 40% (based on the DEMO and the report)
Example-Problems (Solutions given)
1. Develop a socket program in UNIX/Linux that uses (i) TCP as the transport protocol and
(ii) UDP as the transport protocol for transferring a short message between a client and
server. The client sends a string (input by the user) to the server and the server prints the
string on the screen after receiving it.
2. Develop a TCP-based client-server socket program for transferring a large message. The
message transmitted from the client to server is read from a large file (size is about 30000
bytes). The entire message is sent by the client as a single data-unit. After receiving the
file, the server sends an ACK message to the receiver. Verify that the file has been sent
completely and correctly by comparing the received file with the original file (“diff”
command could be used). Measure the message transfer time and throughput.
3. This problem is similar to problem (2) above, but the message is split into short data-units
which are sent one by one without waiting for any acknowledgement between
transmissions of two successive data-units. Verify that the file has been sent completely
and correctly by comparing the received file with the original file. Measure the message
Page 1 of 2transfer time and throughput. Repeat it for different (at least six) data-unit sizes (say, from
100 bytes to 1000 bytes).
4. This problem is similar to problem (3) above, but it uses UDP as the transport protocol.
5. This problem is similar to problem (4) above, but the file is transferred using stop-and-
wait flow control protocol.
Project Assignment
Part-I
A hypothetical reliable data transfer protocol: A jumping window based Go-back-N
ARQ protocol for file transfer using UDP
In this protocol, a window of size W is used. The sender continuously sends W packets
corresponding to the current window, and then waits for an acknowledgement. The
receiver receives W packets. If all the packets are error-free, it sends out a positive
acknowledgement, say RR-i (RR: Receiver Ready). The receiver then moves its window
starting from the packet with the sequence number i. Upon receiving RR-i the sender
moves its window starting from the packet with the sequence number i. If a receiver
receives a damaged packet (say, with the sequence number j) in its current window, it
receives and discards all the remaining packets in the current window and it sends out a
negative acknowledgement, say REJ-j (REJ: Reject). The receiver then moves its window
starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2CO318 - Systems and Network Programming Lab and Project II
Semester 6, Aug-Sep 2014
Project II: Developing a reliable data transfer protocol for computer networks
and investigating its performance
Project Details:
In this project, you are required to develop a hypothetical reliable data transfer protocol for
computer networks (using socket programming with C or other language) and to investigate its
performance. That is, you will be building a simulator for the reliable data transfer protocol,
which can be used for investigating its performance.
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announced later)
Report submission (not more than 10 pages for Part-I and Part-II): at the DEMO
Marks: Part-I = 60% and Part-II = 40% (based on the DEMO and the report)
Example-Problems (Solutions given)
1. Develop a socket program in UNIX/Linux that uses (i) TCP as the transport protocol and
(ii) UDP as the transport protocol for transferring a short message between a client and
server. The client sends a string (input by the user) to the server and the server prints the
string on the screen after receiving it.
2. Develop a TCP-based client-server socket program for transferring a large message. The
message transmitted from the client to server is read from a large file (size is about 30000
bytes). The entire message is sent by the client as a single data-unit. After receiving the
file, the server sends an ACK message to the receiver. Verify that the file has been sent
completely and correctly by comparing the received file with the original file (“diff”
command could be used). Measure the message transfer time and throughput.
3. This problem is similar to problem (2) above, but the message is split into short data-units
which are sent one by one without waiting for any acknowledgement between
transmissions of two successive data-units. Verify that the file has been sent completely
and correctly by comparing the received file with the original file. Measure the message
Page 1 of 2transfer time and throughput. Repeat it for different (at least six) data-unit sizes (say, from
100 bytes to 1000 bytes).
4. This problem is similar to problem (3) above, but it uses UDP as the transport protocol.
5. This problem is similar to problem (4) above, but the file is transferred using stop-and-
wait flow control protocol.
Project Assignment
Part-I
A hypothetical reliable data transfer protocol: A jumping window based Go-back-N
ARQ protocol for file transfer using UDP
In this protocol, a window of size W is used. The sender continuously sends W packets
corresponding to the current window, and then waits for an acknowledgement. The
receiver receives W packets. If all the packets are error-free, it sends out a positive
acknowledgement, say RR-i (RR: Receiver Ready). The receiver then moves its window
starting from the packet with the sequence number i. Upon receiving RR-i the sender
moves its window starting from the packet with the sequence number i. If a receiver
receives a damaged packet (say, with the sequence number j) in its current window, it
receives and discards all the remaining packets in the current window and it sends out a
negative acknowledgement, say REJ-j (REJ: Reject). The receiver then moves its window
starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announced later)
Report submission (not more than 10 pages for Part-I and Part-II): at the DEMO
Marks: Part-I = 60% and Part-II = 40% (based on the DEMO and the report)
Example-Problems (Solutions given)
1. Develop a socket program in UNIX/Linux that uses (i) TCP as the transport protocol and
(ii) UDP as the transport protocol for transferring a short message between a client and
server. The client sends a string (input by the user) to the server and the server prints the
string on the screen after receiving it.
2. Develop a TCP-based client-server socket program for transferring a large message. The
message transmitted from the client to server is read from a large file (size is about 30000
bytes). The entire message is sent by the client as a single data-unit. After receiving the
file, the server sends an ACK message to the receiver. Verify that the file has been sent
completely and correctly by comparing the received file with the original file (“diff”
command could be used). Measure the message transfer time and throughput.
3. This problem is similar to problem (2) above, but the message is split into short data-units
which are sent one by one without waiting for any acknowledgement between
transmissions of two successive data-units. Verify that the file has been sent completely
and correctly by comparing the received file with the original file. Measure the message
Page 1 of 2transfer time and throughput. Repeat it for different (at least six) data-unit sizes (say, from
100 bytes to 1000 bytes).
4. This problem is similar to problem (3) above, but it uses UDP as the transport protocol.
5. This problem is similar to problem (4) above, but the file is transferred using stop-and-
wait flow control protocol.
Project Assignment
Part-I
A hypothetical reliable data transfer protocol: A jumping window based Go-back-N
ARQ protocol for file transfer using UDP
In this protocol, a window of size W is used. The sender continuously sends W packets
corresponding to the current window, and then waits for an acknowledgement. The
receiver receives W packets. If all the packets are error-free, it sends out a positive
acknowledgement, say RR-i (RR: Receiver Ready). The receiver then moves its window
starting from the packet with the sequence number i. Upon receiving RR-i the sender
moves its window starting from the packet with the sequence number i. If a receiver
receives a damaged packet (say, with the sequence number j) in its current window, it
receives and discards all the remaining packets in the current window and it sends out a
negative acknowledgement, say REJ-j (REJ: Reject). The receiver then moves its window
starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2CO318 - Systems and Network Programming Lab and Project II
Semester 6, Aug-Sep 2014
Project II: Developing a reliable data transfer protocol for computer networks
and investigating its performance
Project Details:
In this project, you are required to develop a hypothetical reliable data transfer protocol for
computer networks (using socket programming with C or other language) and to investigate its
performance. That is, you will be building a simulator for the reliable data transfer protocol,
which can be used for investigating its performance.
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announced later)
Report submission (not more than 10 pages for Part-I and Part-II): at the DEMO
Marks: Part-I = 60% and Part-II = 40% (based on the DEMO and the report)
Example-Problems (Solutions given)
1. Develop a socket program in UNIX/Linux that uses (i) TCP as the transport protocol and
(ii) UDP as the transport protocol for transferring a short message between a client and
server. The client sends a string (input by the user) to the server and the server prints the
string on the screen after receiving it.
2. Develop a TCP-based client-server socket program for transferring a large message. The
message transmitted from the client to server is read from a large file (size is about 30000
bytes). The entire message is sent by the client as a single data-unit. After receiving the
file, the server sends an ACK message to the receiver. Verify that the file has been sent
completely and correctly by comparing the received file with the original file (“diff”
command could be used). Measure the message transfer time and throughput.
3. This problem is similar to problem (2) above, but the message is split into short data-units
which are sent one by one without waiting for any acknowledgement between
transmissions of two successive data-units. Verify that the file has been sent completely
and correctly by comparing the received file with the original file. Measure the message
Page 1 of 2transfer time and throughput. Repeat it for different (at least six) data-unit sizes (say, from
100 bytes to 1000 bytes).
4. This problem is similar to problem (3) above, but it uses UDP as the transport protocol.
5. This problem is similar to problem (4) above, but the file is transferred using stop-and-
wait flow control protocol.
Project Assignment
Part-I
A hypothetical reliable data transfer protocol: A jumping window based Go-back-N
ARQ protocol for file transfer using UDP
In this protocol, a window of size W is used. The sender continuously sends W packets
corresponding to the current window, and then waits for an acknowledgement. The
receiver receives W packets. If all the packets are error-free, it sends out a positive
acknowledgement, say RR-i (RR: Receiver Ready). The receiver then moves its window
starting from the packet with the sequence number i. Upon receiving RR-i the sender
moves its window starting from the packet with the sequence number i. If a receiver
receives a damaged packet (say, with the sequence number j) in its current window, it
receives and discards all the remaining packets in the current window and it sends out a
negative acknowledgement, say REJ-j (REJ: Reject). The receiver then moves its window
starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2CO318 - Systems and Network Programming Lab and Project II
Semester 6, Aug-Sep 2014
Project II: Developing a reliable data transfer protocol for computer networks
and investigating its performance
Project Details:
In this project, you are required to develop a hypothetical reliable data transfer protocol for
computer networks (using socket programming with C or other language) and to investigate its
performance. That is, you will be building a simulator for the reliable data transfer protocol,
which can be used for investigating its performance.
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announced later)
Report submission (not more than 10 pages for Part-I and Part-II): at the DEMO
Marks: Part-I = 60% and Part-II = 40% (based on the DEMO and the report)
Example-Problems (Solutions given)
1. Develop a socket program in UNIX/Linux that uses (i) TCP as the transport protocol and
(ii) UDP as the transport protocol for transferring a short message between a client and
server. The client sends a string (input by the user) to the server and the server prints the
string on the screen after receiving it.
2. Develop a TCP-based client-server socket program for transferring a large message. The
message transmitted from the client to server is read from a large file (size is about 30000
bytes). The entire message is sent by the client as a single data-unit. After receiving the
file, the server sends an ACK message to the receiver. Verify that the file has been sent
completely and correctly by comparing the received file with the original file (“diff”
command could be used). Measure the message transfer time and throughput.
3. This problem is similar to problem (2) above, but the message is split into short data-units
which are sent one by one without waiting for any acknowledgement between
transmissions of two successive data-units. Verify that the file has been sent completely
and correctly by comparing the received file with the original file. Measure the message
Page 1 of 2transfer time and throughput. Repeat it for different (at least six) data-unit sizes (say, from
100 bytes to 1000 bytes).
4. This problem is similar to problem (3) above, but it uses UDP as the transport protocol.
5. This problem is similar to problem (4) above, but the file is transferred using stop-and-
wait flow control protocol.
Project Assignment
Part-I
A hypothetical reliable data transfer protocol: A jumping window based Go-back-N
ARQ protocol for file transfer using UDP
In this protocol, a window of size W is used. The sender continuously sends W packets
corresponding to the current window, and then waits for an acknowledgement. The
receiver receives W packets. If all the packets are error-free, it sends out a positive
acknowledgement, say RR-i (RR: Receiver Ready). The receiver then moves its window
starting from the packet with the sequence number i. Upon receiving RR-i the sender
moves its window starting from the packet with the sequence number i. If a receiver
receives a damaged packet (say, with the sequence number j) in its current window, it
receives and discards all the remaining packets in the current window and it sends out a
negative acknowledgement, say REJ-j (REJ: Reject). The receiver then moves its window
starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announced later)
Report submission (not more than 10 pages for Part-I and Part-II): at the DEMO
Marks: Part-I = 60% and Part-II = 40% (based on the DEMO and the report)
Example-Problems (Solutions given)
1. Develop a socket program in UNIX/Linux that uses (i) TCP as the transport protocol and
(ii) UDP as the transport protocol for transferring a short message between a client and
server. The client sends a string (input by the user) to the server and the server prints the
string on the screen after receiving it.
2. Develop a TCP-based client-server socket program for transferring a large message. The
message transmitted from the client to server is read from a large file (size is about 30000
bytes). The entire message is sent by the client as a single data-unit. After receiving the
file, the server sends an ACK message to the receiver. Verify that the file has been sent
completely and correctly by comparing the received file with the original file (“diff”
command could be used). Measure the message transfer time and throughput.
3. This problem is similar to problem (2) above, but the message is split into short data-units
which are sent one by one without waiting for any acknowledgement between
transmissions of two successive data-units. Verify that the file has been sent completely
and correctly by comparing the received file with the original file. Measure the message
Page 1 of 2transfer time and throughput. Repeat it for different (at least six) data-unit sizes (say, from
100 bytes to 1000 bytes).
4. This problem is similar to problem (3) above, but it uses UDP as the transport protocol.
5. This problem is similar to problem (4) above, but the file is transferred using stop-and-
wait flow control protocol.
Project Assignment
Part-I
A hypothetical reliable data transfer protocol: A jumping window based Go-back-N
ARQ protocol for file transfer using UDP
In this protocol, a window of size W is used. The sender continuously sends W packets
corresponding to the current window, and then waits for an acknowledgement. The
receiver receives W packets. If all the packets are error-free, it sends out a positive
acknowledgement, say RR-i (RR: Receiver Ready). The receiver then moves its window
starting from the packet with the sequence number i. Upon receiving RR-i the sender
moves its window starting from the packet with the sequence number i. If a receiver
receives a damaged packet (say, with the sequence number j) in its current window, it
receives and discards all the remaining packets in the current window and it sends out a
negative acknowledgement, say REJ-j (REJ: Reject). The receiver then moves its window
starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration shouldstarting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2CO318 - Systems and Network Programming Lab and Project II
Semester 6, Aug-Sep 2014
Project II: Developing a reliable data transfer protocol for computer networks
and investigating its performance
Project Details:
In this project, you are required to develop a hypothetical reliable data transfer protocol for
computer networks (using socket programming with C or other language) and to investigate its
performance. That is, you will be building a simulator for the reliable data transfer protocol,
which can be used for investigating its performance.
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announced later)
Report submission (not more than 10 pages for Part-I and Part-II): at the DEMO
Marks: Part-I = 60% and Part-II = 40% (based on the DEMO and the report)
Example-Problems (Solutions given)
1. Develop a socket program in UNIX/Linux that uses (i) TCP as the transport protocol and
(ii) UDP as the transport protocol for transferring a short message between a client and
server. The client sends a string (input by the user) to the server and the server prints the
string on the screen after receiving it.
2. Develop a TCP-based client-server socket program for transferring a large message. The
message transmitted from the client to server is read from a large file (size is about 30000
bytes). The entire message is sent by the client as a single data-unit. After receiving the
file, the server sends an ACK message to the receiver. Verify that the file has been sent
completely and correctly by comparing the received file with the original file (“diff”
command could be used). Measure the message transfer time and throughput.
3. This problem is similar to problem (2) above, but the message is split into short data-units
which are sent one by one without waiting for any acknowledgement between
transmissions of two successive data-units. Verify that the file has been sent completely
and correctly by comparing the received file with the original file. Measure the message
Page 1 of 2transfer time and throughput. Repeat it for different (at least six) data-unit sizes (say, from
100 bytes to 1000 bytes).
4. This problem is similar to problem (3) above, but it uses UDP as the transport protocol.
5. This problem is similar to problem (4) above, but the file is transferred using stop-and-
wait flow control protocol.
Project Assignment
Part-I
A hypothetical reliable data transfer protocol: A jumping window based Go-back-N
ARQ protocol for file transfer using UDP
In this protocol, a window of size W is used. The sender continuously sends W packets
corresponding to the current window, and then waits for an acknowledgement. The
receiver receives W packets. If all the packets are error-free, it sends out a positive
acknowledgement, say RR-i (RR: Receiver Ready). The receiver then moves its window
starting from the packet with the sequence number i. Upon receiving RR-i the sender
moves its window starting from the packet with the sequence number i. If a receiver
receives a damaged packet (say, with the sequence number j) in its current window, it
receives and discards all the remaining packets in the current window and it sends out a
negative acknowledgement, say REJ-j (REJ: Reject). The receiver then moves its window
starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2CO318 - Systems and Network Programming Lab and Project II
Semester 6, Aug-Sep 2014
Project II: Developing a reliable data transfer protocol for computer networks
and investigating its performance
Project Details:
In this project, you are required to develop a hypothetical reliable data transfer protocol for
computer networks (using socket programming with C or other language) and to investigate its
performance. That is, you will be building a simulator for the reliable data transfer protocol,
which can be used for investigating its performance.
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announced later)
Report submission (not more than 10 pages for Part-I and Part-II): at the DEMO
Marks: Part-I = 60% and Part-II = 40% (based on the DEMO and the report)
Example-Problems (Solutions given)
1. Develop a socket program in UNIX/Linux that uses (i) TCP as the transport protocol and
(ii) UDP as the transport protocol for transferring a short message between a client and
server. The client sends a string (input by the user) to the server and the server prints the
string on the screen after receiving it.
2. Develop a TCP-based client-server socket program for transferring a large message. The
message transmitted from the client to server is read from a large file (size is about 30000
bytes). The entire message is sent by the client as a single data-unit. After receiving the
file, the server sends an ACK message to the receiver. Verify that the file has been sent
completely and correctly by comparing the received file with the original file (“diff”
command could be used). Measure the message transfer time and throughput.
3. This problem is similar to problem (2) above, but the message is split into short data-units
which are sent one by one without waiting for any acknowledgement between
transmissions of two successive data-units. Verify that the file has been sent completely
and correctly by comparing the received file with the original file. Measure the message
Page 1 of 2transfer time and throughput. Repeat it for different (at least six) data-unit sizes (say, from
100 bytes to 1000 bytes).
4. This problem is similar to problem (3) above, but it uses UDP as the transport protocol.
5. This problem is similar to problem (4) above, but the file is transferred using stop-and-
wait flow control protocol.
Project Assignment
Part-I
A hypothetical reliable data transfer protocol: A jumping window based Go-back-N
ARQ protocol for file transfer using UDP
In this protocol, a window of size W is used. The sender continuously sends W packets
corresponding to the current window, and then waits for an acknowledgement. The
receiver receives W packets. If all the packets are error-free, it sends out a positive
acknowledgement, say RR-i (RR: Receiver Ready). The receiver then moves its window
starting from the packet with the sequence number i. Upon receiving RR-i the sender
moves its window starting from the packet with the sequence number i. If a receiver
receives a damaged packet (say, with the sequence number j) in its current window, it
receives and discards all the remaining packets in the current window and it sends out a
negative acknowledgement, say REJ-j (REJ: Reject). The receiver then moves its window
starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announced later)
Report submission (not more than 10 pages for Part-I and Part-II): at the DEMO
Marks: Part-I = 60% and Part-II = 40% (based on the DEMO and the report)
Example-Problems (Solutions given)
1. Develop a socket program in UNIX/Linux that uses (i) TCP as the transport protocol and
(ii) UDP as the transport protocol for transferring a short message between a client and
server. The client sends a string (input by the user) to the server and the server prints the
string on the screen after receiving it.
2. Develop a TCP-based client-server socket program for transferring a large message. The
message transmitted from the client to server is read from a large file (size is about 30000
bytes). The entire message is sent by the client as a single data-unit. After receiving the
file, the server sends an ACK message to the receiver. Verify that the file has been sent
completely and correctly by comparing the received file with the original file (“diff”
command could be used). Measure the message transfer time and throughput.
3. This problem is similar to problem (2) above, but the message is split into short data-units
which are sent one by one without waiting for any acknowledgement between
transmissions of two successive data-units. Verify that the file has been sent completely
and correctly by comparing the received file with the original file. Measure the message
Page 1 of 2transfer time and throughput. Repeat it for different (at least six) data-unit sizes (say, from
100 bytes to 1000 bytes).
4. This problem is similar to problem (3) above, but it uses UDP as the transport protocol.
5. This problem is similar to problem (4) above, but the file is transferred using stop-and-
wait flow control protocol.
Project Assignment
Part-I
A hypothetical reliable data transfer protocol: A jumping window based Go-back-N
ARQ protocol for file transfer using UDP
In this protocol, a window of size W is used. The sender continuously sends W packets
corresponding to the current window, and then waits for an acknowledgement. The
receiver receives W packets. If all the packets are error-free, it sends out a positive
acknowledgement, say RR-i (RR: Receiver Ready). The receiver then moves its window
starting from the packet with the sequence number i. Upon receiving RR-i the sender
moves its window starting from the packet with the sequence number i. If a receiver
receives a damaged packet (say, with the sequence number j) in its current window, it
receives and discards all the remaining packets in the current window and it sends out a
negative acknowledgement, say REJ-j (REJ: Reject). The receiver then moves its window
starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2CO318 - Systems and Network Programming Lab and Project II
Semester 6, Aug-Sep 2014
Project II: Developing a reliable data transfer protocol for computer networks
and investigating its performance
Project Details:
In this project, you are required to develop a hypothetical reliable data transfer protocol for
computer networks (using socket programming with C or other language) and to investigate its
performance. That is, you will be building a simulator for the reliable data transfer protocol,
which can be used for investigating its performance.
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announced later)
Report submission (not more than 10 pages for Part-I and Part-II): at the DEMO
Marks: Part-I = 60% and Part-II = 40% (based on the DEMO and the report)
Example-Problems (Solutions given)
1. Develop a socket program in UNIX/Linux that uses (i) TCP as the transport protocol and
(ii) UDP as the transport protocol for transferring a short message between a client and
server. The client sends a string (input by the user) to the server and the server prints the
string on the screen after receiving it.
2. Develop a TCP-based client-server socket program for transferring a large message. The
message transmitted from the client to server is read from a large file (size is about 30000
bytes). The entire message is sent by the client as a single data-unit. After receiving the
file, the server sends an ACK message to the receiver. Verify that the file has been sent
completely and correctly by comparing the received file with the original file (“diff”
command could be used). Measure the message transfer time and throughput.
3. This problem is similar to problem (2) above, but the message is split into short data-units
which are sent one by one without waiting for any acknowledgement between
transmissions of two successive data-units. Verify that the file has been sent completely
and correctly by comparing the received file with the original file. Measure the message
Page 1 of 2transfer time and throughput. Repeat it for different (at least six) data-unit sizes (say, from
100 bytes to 1000 bytes).
4. This problem is similar to problem (3) above, but it uses UDP as the transport protocol.
5. This problem is similar to problem (4) above, but the file is transferred using stop-and-
wait flow control protocol.
Project Assignment
Part-I
A hypothetical reliable data transfer protocol: A jumping window based Go-back-N
ARQ protocol for file transfer using UDP
In this protocol, a window of size W is used. The sender continuously sends W packets
corresponding to the current window, and then waits for an acknowledgement. The
receiver receives W packets. If all the packets are error-free, it sends out a positive
acknowledgement, say RR-i (RR: Receiver Ready). The receiver then moves its window
starting from the packet with the sequence number i. Upon receiving RR-i the sender
moves its window starting from the packet with the sequence number i. If a receiver
receives a damaged packet (say, with the sequence number j) in its current window, it
receives and discards all the remaining packets in the current window and it sends out a
negative acknowledgement, say REJ-j (REJ: Reject). The receiver then moves its window
starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2CO318 - Systems and Network Programming Lab and Project II
Semester 6, Aug-Sep 2014
Project II: Developing a reliable data transfer protocol for computer networks
and investigating its performance
Project Details:
In this project, you are required to develop a hypothetical reliable data transfer protocol for
computer networks (using socket programming with C or other language) and to investigate its
performance. That is, you will be building a simulator for the reliable data transfer protocol,
which can be used for investigating its performance.
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announced later)
Report submission (not more than 10 pages for Part-I and Part-II): at the DEMO
Marks: Part-I = 60% and Part-II = 40% (based on the DEMO and the report)
Example-Problems (Solutions given)
1. Develop a socket program in UNIX/Linux that uses (i) TCP as the transport protocol and
(ii) UDP as the transport protocol for transferring a short message between a client and
server. The client sends a string (input by the user) to the server and the server prints the
string on the screen after receiving it.
2. Develop a TCP-based client-server socket program for transferring a large message. The
message transmitted from the client to server is read from a large file (size is about 30000
bytes). The entire message is sent by the client as a single data-unit. After receiving the
file, the server sends an ACK message to the receiver. Verify that the file has been sent
completely and correctly by comparing the received file with the original file (“diff”
command could be used). Measure the message transfer time and throughput.
3. This problem is similar to problem (2) above, but the message is split into short data-units
which are sent one by one without waiting for any acknowledgement between
transmissions of two successive data-units. Verify that the file has been sent completely
and correctly by comparing the received file with the original file. Measure the message
Page 1 of 2transfer time and throughput. Repeat it for different (at least six) data-unit sizes (say, from
100 bytes to 1000 bytes).
4. This problem is similar to problem (3) above, but it uses UDP as the transport protocol.
5. This problem is similar to problem (4) above, but the file is transferred using stop-and-
wait flow control protocol.
Project Assignment
Part-I
A hypothetical reliable data transfer protocol: A jumping window based Go-back-N
ARQ protocol for file transfer using UDP
In this protocol, a window of size W is used. The sender continuously sends W packets
corresponding to the current window, and then waits for an acknowledgement. The
receiver receives W packets. If all the packets are error-free, it sends out a positive
acknowledgement, say RR-i (RR: Receiver Ready). The receiver then moves its window
starting from the packet with the sequence number i. Upon receiving RR-i the sender
moves its window starting from the packet with the sequence number i. If a receiver
receives a damaged packet (say, with the sequence number j) in its current window, it
receives and discards all the remaining packets in the current window and it sends out a
negative acknowledgement, say REJ-j (REJ: Reject). The receiver then moves its window
starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announced later)
Report submission (not more than 10 pages for Part-I and Part-II): at the DEMO
Marks: Part-I = 60% and Part-II = 40% (based on the DEMO and the report)
Example-Problems (Solutions given)
1. Develop a socket program in UNIX/Linux that uses (i) TCP as the transport protocol and
(ii) UDP as the transport protocol for transferring a short message between a client and
server. The client sends a string (input by the user) to the server and the server prints the
string on the screen after receiving it.
2. Develop a TCP-based client-server socket program for transferring a large message. The
message transmitted from the client to server is read from a large file (size is about 30000
bytes). The entire message is sent by the client as a single data-unit. After receiving the
file, the server sends an ACK message to the receiver. Verify that the file has been sent
completely and correctly by comparing the received file with the original file (“diff”
command could be used). Measure the message transfer time and throughput.
3. This problem is similar to problem (2) above, but the message is split into short data-units
which are sent one by one without waiting for any acknowledgement between
transmissions of two successive data-units. Verify that the file has been sent completely
and correctly by comparing the received file with the original file. Measure the message
Page 1 of 2transfer time and throughput. Repeat it for different (at least six) data-unit sizes (say, from
100 bytes to 1000 bytes).
4. This problem is similar to problem (3) above, but it uses UDP as the transport protocol.
5. This problem is similar to problem (4) above, but the file is transferred using stop-and-
wait flow control protocol.
Project Assignment
Part-I
A hypothetical reliable data transfer protocol: A jumping window based Go-back-N
ARQ protocol for file transfer using UDP
In this protocol, a window of size W is used. The sender continuously sends W packets
corresponding to the current window, and then waits for an acknowledgement. The
receiver receives W packets. If all the packets are error-free, it sends out a positive
acknowledgement, say RR-i (RR: Receiver Ready). The receiver then moves its window
starting from the packet with the sequence number i. Upon receiving RR-i the sender
moves its window starting from the packet with the sequence number i. If a receiver
receives a damaged packet (say, with the sequence number j) in its current window, it
receives and discards all the remaining packets in the current window and it sends out a
negative acknowledgement, say REJ-j (REJ: Reject). The receiver then moves its window
starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2CO318 - Systems and Network Programming Lab and Project II
Semester 6, Aug-Sep 2014
Project II: Developing a reliable data transfer protocol for computer networks
and investigating its performance
Project Details:
In this project, you are required to develop a hypothetical reliable data transfer protocol for
computer networks (using socket programming with C or other language) and to investigate its
performance. That is, you will be building a simulator for the reliable data transfer protocol,
which can be used for investigating its performance.
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announced later)
Report submission (not more than 10 pages for Part-I and Part-II): at the DEMO
Marks: Part-I = 60% and Part-II = 40% (based on the DEMO and the report)
Example-Problems (Solutions given)
1. Develop a socket program in UNIX/Linux that uses (i) TCP as the transport protocol and
(ii) UDP as the transport protocol for transferring a short message between a client and
server. The client sends a string (input by the user) to the server and the server prints the
string on the screen after receiving it.
2. Develop a TCP-based client-server socket program for transferring a large message. The
message transmitted from the client to server is read from a large file (size is about 30000
bytes). The entire message is sent by the client as a single data-unit. After receiving the
file, the server sends an ACK message to the receiver. Verify that the file has been sent
completely and correctly by comparing the received file with the original file (“diff”
command could be used). Measure the message transfer time and throughput.
3. This problem is similar to problem (2) above, but the message is split into short data-units
which are sent one by one without waiting for any acknowledgement between
transmissions of two successive data-units. Verify that the file has been sent completely
and correctly by comparing the received file with the original file. Measure the message
Page 1 of 2transfer time and throughput. Repeat it for different (at least six) data-unit sizes (say, from
100 bytes to 1000 bytes).
4. This problem is similar to problem (3) above, but it uses UDP as the transport protocol.
5. This problem is similar to problem (4) above, but the file is transferred using stop-and-
wait flow control protocol.
Project Assignment
Part-I
A hypothetical reliable data transfer protocol: A jumping window based Go-back-N
ARQ protocol for file transfer using UDP
In this protocol, a window of size W is used. The sender continuously sends W packets
corresponding to the current window, and then waits for an acknowledgement. The
receiver receives W packets. If all the packets are error-free, it sends out a positive
acknowledgement, say RR-i (RR: Receiver Ready). The receiver then moves its window
starting from the packet with the sequence number i. Upon receiving RR-i the sender
moves its window starting from the packet with the sequence number i. If a receiver
receives a damaged packet (say, with the sequence number j) in its current window, it
receives and discards all the remaining packets in the current window and it sends out a
negative acknowledgement, say REJ-j (REJ: Reject). The receiver then moves its window
starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2CO318 - Systems and Network Programming Lab and Project II
Semester 6, Aug-Sep 2014
Project II: Developing a reliable data transfer protocol for computer networks
and investigating its performance
Project Details:
In this project, you are required to develop a hypothetical reliable data transfer protocol for
computer networks (using socket programming with C or other language) and to investigate its
performance. That is, you will be building a simulator for the reliable data transfer protocol,
which can be used for investigating its performance.
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announced later)
Report submission (not more than 10 pages for Part-I and Part-II): at the DEMO
Marks: Part-I = 60% and Part-II = 40% (based on the DEMO and the report)
Example-Problems (Solutions given)
1. Develop a socket program in UNIX/Linux that uses (i) TCP as the transport protocol and
(ii) UDP as the transport protocol for transferring a short message between a client and
server. The client sends a string (input by the user) to the server and the server prints the
string on the screen after receiving it.
2. Develop a TCP-based client-server socket program for transferring a large message. The
message transmitted from the client to server is read from a large file (size is about 30000
bytes). The entire message is sent by the client as a single data-unit. After receiving the
file, the server sends an ACK message to the receiver. Verify that the file has been sent
completely and correctly by comparing the received file with the original file (“diff”
command could be used). Measure the message transfer time and throughput.
3. This problem is similar to problem (2) above, but the message is split into short data-units
which are sent one by one without waiting for any acknowledgement between
transmissions of two successive data-units. Verify that the file has been sent completely
and correctly by comparing the received file with the original file. Measure the message
Page 1 of 2transfer time and throughput. Repeat it for different (at least six) data-unit sizes (say, from
100 bytes to 1000 bytes).
4. This problem is similar to problem (3) above, but it uses UDP as the transport protocol.
5. This problem is similar to problem (4) above, but the file is transferred using stop-and-
wait flow control protocol.
Project Assignment
Part-I
A hypothetical reliable data transfer protocol: A jumping window based Go-back-N
ARQ protocol for file transfer using UDP
In this protocol, a window of size W is used. The sender continuously sends W packets
corresponding to the current window, and then waits for an acknowledgement. The
receiver receives W packets. If all the packets are error-free, it sends out a positive
acknowledgement, say RR-i (RR: Receiver Ready). The receiver then moves its window
starting from the packet with the sequence number i. Upon receiving RR-i the sender
moves its window starting from the packet with the sequence number i. If a receiver
receives a damaged packet (say, with the sequence number j) in its current window, it
receives and discards all the remaining packets in the current window and it sends out a
negative acknowledgement, say REJ-j (REJ: Reject). The receiver then moves its window
starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announced later)
Report submission (not more than 10 pages for Part-I and Part-II): at the DEMO
Marks: Part-I = 60% and Part-II = 40% (based on the DEMO and the report)
Example-Problems (Solutions given)
1. Develop a socket program in UNIX/Linux that uses (i) TCP as the transport protocol and
(ii) UDP as the transport protocol for transferring a short message between a client and
server. The client sends a string (input by the user) to the server and the server prints the
string on the screen after receiving it.
2. Develop a TCP-based client-server socket program for transferring a large message. The
message transmitted from the client to server is read from a large file (size is about 30000
bytes). The entire message is sent by the client as a single data-unit. After receiving the
file, the server sends an ACK message to the receiver. Verify that the file has been sent
completely and correctly by comparing the received file with the original file (“diff”
command could be used). Measure the message transfer time and throughput.
3. This problem is similar to problem (2) above, but the message is split into short data-units
which are sent one by one without waiting for any acknowledgement between
transmissions of two successive data-units. Verify that the file has been sent completely
and correctly by comparing the received file with the original file. Measure the message
Page 1 of 2transfer time and throughput. Repeat it for different (at least six) data-unit sizes (say, from
100 bytes to 1000 bytes).
4. This problem is similar to problem (3) above, but it uses UDP as the transport protocol.
5. This problem is similar to problem (4) above, but the file is transferred using stop-and-
wait flow control protocol.
Project Assignment
Part-I
A hypothetical reliable data transfer protocol: A jumping window based Go-back-N
ARQ protocol for file transfer using UDP
In this protocol, a window of size W is used. The sender continuously sends W packets
corresponding to the current window, and then waits for an acknowledgement. The
receiver receives W packets. If all the packets are error-free, it sends out a positive
acknowledgement, say RR-i (RR: Receiver Ready). The receiver then moves its window
starting from the packet with the sequence number i. Upon receiving RR-i the sender
moves its window starting from the packet with the sequence number i. If a receiver
receives a damaged packet (say, with the sequence number j) in its current window, it
receives and discards all the remaining packets in the current window and it sends out a
negative acknowledgement, say REJ-j (REJ: Reject). The receiver then moves its window
starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2CO318 - Systems and Network Programming Lab and Project II
Semester 6, Aug-Sep 2014
Project II: Developing a reliable data transfer protocol for computer networks
and investigating its performance
Project Details:
In this project, you are required to develop a hypothetical reliable data transfer protocol for
computer networks (using socket programming with C or other language) and to investigate its
performance. That is, you will be building a simulator for the reliable data transfer protocol,
which can be used for investigating its performance.
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announced later)
Report submission (not more than 10 pages for Part-I and Part-II): at the DEMO
Marks: Part-I = 60% and Part-II = 40% (based on the DEMO and the report)
Example-Problems (Solutions given)
1. Develop a socket program in UNIX/Linux that uses (i) TCP as the transport protocol and
(ii) UDP as the transport protocol for transferring a short message between a client and
server. The client sends a string (input by the user) to the server and the server prints the
string on the screen after receiving it.
2. Develop a TCP-based client-server socket program for transferring a large message. The
message transmitted from the client to server is read from a large file (size is about 30000
bytes). The entire message is sent by the client as a single data-unit. After receiving the
file, the server sends an ACK message to the receiver. Verify that the file has been sent
completely and correctly by comparing the received file with the original file (“diff”
command could be used). Measure the message transfer time and throughput.
3. This problem is similar to problem (2) above, but the message is split into short data-units
which are sent one by one without waiting for any acknowledgement between
transmissions of two successive data-units. Verify that the file has been sent completely
and correctly by comparing the received file with the original file. Measure the message
Page 1 of 2transfer time and throughput. Repeat it for different (at least six) data-unit sizes (say, from
100 bytes to 1000 bytes).
4. This problem is similar to problem (3) above, but it uses UDP as the transport protocol.
5. This problem is similar to problem (4) above, but the file is transferred using stop-and-
wait flow control protocol.
Project Assignment
Part-I
A hypothetical reliable data transfer protocol: A jumping window based Go-back-N
ARQ protocol for file transfer using UDP
In this protocol, a window of size W is used. The sender continuously sends W packets
corresponding to the current window, and then waits for an acknowledgement. The
receiver receives W packets. If all the packets are error-free, it sends out a positive
acknowledgement, say RR-i (RR: Receiver Ready). The receiver then moves its window
starting from the packet with the sequence number i. Upon receiving RR-i the sender
moves its window starting from the packet with the sequence number i. If a receiver
receives a damaged packet (say, with the sequence number j) in its current window, it
receives and discards all the remaining packets in the current window and it sends out a
negative acknowledgement, say REJ-j (REJ: Reject). The receiver then moves its window
starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2CO318 - Systems and Network Programming Lab and Project II
Semester 6, Aug-Sep 2014
Project II: Developing a reliable data transfer protocol for computer networks
and investigating its performance
Project Details:
In this project, you are required to develop a hypothetical reliable data transfer protocol for
computer networks (using socket programming with C or other language) and to investigate its
performance. That is, you will be building a simulator for the reliable data transfer protocol,
which can be used for investigating its performance.
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announced later)
Report submission (not more than 10 pages for Part-I and Part-II): at the DEMO
Marks: Part-I = 60% and Part-II = 40% (based on the DEMO and the report)
Example-Problems (Solutions given)
1. Develop a socket program in UNIX/Linux that uses (i) TCP as the transport protocol and
(ii) UDP as the transport protocol for transferring a short message between a client and
server. The client sends a string (input by the user) to the server and the server prints the
string on the screen after receiving it.
2. Develop a TCP-based client-server socket program for transferring a large message. The
message transmitted from the client to server is read from a large file (size is about 30000
bytes). The entire message is sent by the client as a single data-unit. After receiving the
file, the server sends an ACK message to the receiver. Verify that the file has been sent
completely and correctly by comparing the received file with the original file (“diff”
command could be used). Measure the message transfer time and throughput.
3. This problem is similar to problem (2) above, but the message is split into short data-units
which are sent one by one without waiting for any acknowledgement between
transmissions of two successive data-units. Verify that the file has been sent completely
and correctly by comparing the received file with the original file. Measure the message
Page 1 of 2transfer time and throughput. Repeat it for different (at least six) data-unit sizes (say, from
100 bytes to 1000 bytes).
4. This problem is similar to problem (3) above, but it uses UDP as the transport protocol.
5. This problem is similar to problem (4) above, but the file is transferred using stop-and-
wait flow control protocol.
Project Assignment
Part-I
A hypothetical reliable data transfer protocol: A jumping window based Go-back-N
ARQ protocol for file transfer using UDP
In this protocol, a window of size W is used. The sender continuously sends W packets
corresponding to the current window, and then waits for an acknowledgement. The
receiver receives W packets. If all the packets are error-free, it sends out a positive
acknowledgement, say RR-i (RR: Receiver Ready). The receiver then moves its window
starting from the packet with the sequence number i. Upon receiving RR-i the sender
moves its window starting from the packet with the sequence number i. If a receiver
receives a damaged packet (say, with the sequence number j) in its current window, it
receives and discards all the remaining packets in the current window and it sends out a
negative acknowledgement, say REJ-j (REJ: Reject). The receiver then moves its window
starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announced later)
Report submission (not more than 10 pages for Part-I and Part-II): at the DEMO
Marks: Part-I = 60% and Part-II = 40% (based on the DEMO and the report)
Example-Problems (Solutions given)
1. Develop a socket program in UNIX/Linux that uses (i) TCP as the transport protocol and
(ii) UDP as the transport protocol for transferring a short message between a client and
server. The client sends a string (input by the user) to the server and the server prints the
string on the screen after receiving it.
2. Develop a TCP-based client-server socket program for transferring a large message. The
message transmitted from the client to server is read from a large file (size is about 30000
bytes). The entire message is sent by the client as a single data-unit. After receiving the
file, the server sends an ACK message to the receiver. Verify that the file has been sent
completely and correctly by comparing the received file with the original file (“diff”
command could be used). Measure the message transfer time and throughput.
3. This problem is similar to problem (2) above, but the message is split into short data-units
which are sent one by one without waiting for any acknowledgement between
transmissions of two successive data-units. Verify that the file has been sent completely
and correctly by comparing the received file with the original file. Measure the message
Page 1 of 2transfer time and throughput. Repeat it for different (at least six) data-unit sizes (say, from
100 bytes to 1000 bytes).
4. This problem is similar to problem (3) above, but it uses UDP as the transport protocol.
5. This problem is similar to problem (4) above, but the file is transferred using stop-and-
wait flow control protocol.
Project Assignment
Part-I
A hypothetical reliable data transfer protocol: A jumping window based Go-back-N
ARQ protocol for file transfer using UDP
In this protocol, a window of size W is used. The sender continuously sends W packets
corresponding to the current window, and then waits for an acknowledgement. The
receiver receives W packets. If all the packets are error-free, it sends out a positive
acknowledgement, say RR-i (RR: Receiver Ready). The receiver then moves its window
starting from the packet with the sequence number i. Upon receiving RR-i the sender
moves its window starting from the packet with the sequence number i. If a receiver
receives a damaged packet (say, with the sequence number j) in its current window, it
receives and discards all the remaining packets in the current window and it sends out a
negative acknowledgement, say REJ-j (REJ: Reject). The receiver then moves its window
starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2CO318 - Systems and Network Programming Lab and Project II
Semester 6, Aug-Sep 2014
Project II: Developing a reliable data transfer protocol for computer networks
and investigating its performance
Project Details:
In this project, you are required to develop a hypothetical reliable data transfer protocol for
computer networks (using socket programming with C or other language) and to investigate its
performance. That is, you will be building a simulator for the reliable data transfer protocol,
which can be used for investigating its performance.
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announced later)
Report submission (not more than 10 pages for Part-I and Part-II): at the DEMO
Marks: Part-I = 60% and Part-II = 40% (based on the DEMO and the report)
Example-Problems (Solutions given)
1. Develop a socket program in UNIX/Linux that uses (i) TCP as the transport protocol and
(ii) UDP as the transport protocol for transferring a short message between a client and
server. The client sends a string (input by the user) to the server and the server prints the
string on the screen after receiving it.
2. Develop a TCP-based client-server socket program for transferring a large message. The
message transmitted from the client to server is read from a large file (size is about 30000
bytes). The entire message is sent by the client as a single data-unit. After receiving the
file, the server sends an ACK message to the receiver. Verify that the file has been sent
completely and correctly by comparing the received file with the original file (“diff”
command could be used). Measure the message transfer time and throughput.
3. This problem is similar to problem (2) above, but the message is split into short data-units
which are sent one by one without waiting for any acknowledgement between
transmissions of two successive data-units. Verify that the file has been sent completely
and correctly by comparing the received file with the original file. Measure the message
Page 1 of 2transfer time and throughput. Repeat it for different (at least six) data-unit sizes (say, from
100 bytes to 1000 bytes).
4. This problem is similar to problem (3) above, but it uses UDP as the transport protocol.
5. This problem is similar to problem (4) above, but the file is transferred using stop-and-
wait flow control protocol.
Project Assignment
Part-I
A hypothetical reliable data transfer protocol: A jumping window based Go-back-N
ARQ protocol for file transfer using UDP
In this protocol, a window of size W is used. The sender continuously sends W packets
corresponding to the current window, and then waits for an acknowledgement. The
receiver receives W packets. If all the packets are error-free, it sends out a positive
acknowledgement, say RR-i (RR: Receiver Ready). The receiver then moves its window
starting from the packet with the sequence number i. Upon receiving RR-i the sender
moves its window starting from the packet with the sequence number i. If a receiver
receives a damaged packet (say, with the sequence number j) in its current window, it
receives and discards all the remaining packets in the current window and it sends out a
negative acknowledgement, say REJ-j (REJ: Reject). The receiver then moves its window
starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2CO318 - Systems and Network Programming Lab and Project II
Semester 6, Aug-Sep 2014
Project II: Developing a reliable data transfer protocol for computer networks
and investigating its performance
Project Details:
In this project, you are required to develop a hypothetical reliable data transfer protocol for
computer networks (using socket programming with C or other language) and to investigate its
performance. That is, you will be building a simulator for the reliable data transfer protocol,
which can be used for investigating its performance.
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announced later)
Report submission (not more than 10 pages for Part-I and Part-II): at the DEMO
Marks: Part-I = 60% and Part-II = 40% (based on the DEMO and the report)
Example-Problems (Solutions given)
1. Develop a socket program in UNIX/Linux that uses (i) TCP as the transport protocol and
(ii) UDP as the transport protocol for transferring a short message between a client and
server. The client sends a string (input by the user) to the server and the server prints the
string on the screen after receiving it.
2. Develop a TCP-based client-server socket program for transferring a large message. The
message transmitted from the client to server is read from a large file (size is about 30000
bytes). The entire message is sent by the client as a single data-unit. After receiving the
file, the server sends an ACK message to the receiver. Verify that the file has been sent
completely and correctly by comparing the received file with the original file (“diff”
command could be used). Measure the message transfer time and throughput.
3. This problem is similar to problem (2) above, but the message is split into short data-units
which are sent one by one without waiting for any acknowledgement between
transmissions of two successive data-units. Verify that the file has been sent completely
and correctly by comparing the received file with the original file. Measure the message
Page 1 of 2transfer time and throughput. Repeat it for different (at least six) data-unit sizes (say, from
100 bytes to 1000 bytes).
4. This problem is similar to problem (3) above, but it uses UDP as the transport protocol.
5. This problem is similar to problem (4) above, but the file is transferred using stop-and-
wait flow control protocol.
Project Assignment
Part-I
A hypothetical reliable data transfer protocol: A jumping window based Go-back-N
ARQ protocol for file transfer using UDP
In this protocol, a window of size W is used. The sender continuously sends W packets
corresponding to the current window, and then waits for an acknowledgement. The
receiver receives W packets. If all the packets are error-free, it sends out a positive
acknowledgement, say RR-i (RR: Receiver Ready). The receiver then moves its window
starting from the packet with the sequence number i. Upon receiving RR-i the sender
moves its window starting from the packet with the sequence number i. If a receiver
receives a damaged packet (say, with the sequence number j) in its current window, it
receives and discards all the remaining packets in the current window and it sends out a
negative acknowledgement, say REJ-j (REJ: Reject). The receiver then moves its window
starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announced later)
Report submission (not more than 10 pages for Part-I and Part-II): at the DEMO
Marks: Part-I = 60% and Part-II = 40% (based on the DEMO and the report)
Example-Problems (Solutions given)
1. Develop a socket program in UNIX/Linux that uses (i) TCP as the transport protocol and
(ii) UDP as the transport protocol for transferring a short message between a client and
server. The client sends a string (input by the user) to the server and the server prints the
string on the screen after receiving it.
2. Develop a TCP-based client-server socket program for transferring a large message. The
message transmitted from the client to server is read from a large file (size is about 30000
bytes). The entire message is sent by the client as a single data-unit. After receiving the
file, the server sends an ACK message to the receiver. Verify that the file has been sent
completely and correctly by comparing the received file with the original file (“diff”
command could be used). Measure the message transfer time and throughput.
3. This problem is similar to problem (2) above, but the message is split into short data-units
which are sent one by one without waiting for any acknowledgement between
transmissions of two successive data-units. Verify that the file has been sent completely
and correctly by comparing the received file with the original file. Measure the message
Page 1 of 2transfer time and throughput. Repeat it for different (at least six) data-unit sizes (say, from
100 bytes to 1000 bytes).
4. This problem is similar to problem (3) above, but it uses UDP as the transport protocol.
5. This problem is similar to problem (4) above, but the file is transferred using stop-and-
wait flow control protocol.
Project Assignment
Part-I
A hypothetical reliable data transfer protocol: A jumping window based Go-back-N
ARQ protocol for file transfer using UDP
In this protocol, a window of size W is used. The sender continuously sends W packets
corresponding to the current window, and then waits for an acknowledgement. The
receiver receives W packets. If all the packets are error-free, it sends out a positive
acknowledgement, say RR-i (RR: Receiver Ready). The receiver then moves its window
starting from the packet with the sequence number i. Upon receiving RR-i the sender
moves its window starting from the packet with the sequence number i. If a receiver
receives a damaged packet (say, with the sequence number j) in its current window, it
receives and discards all the remaining packets in the current window and it sends out a
negative acknowledgement, say REJ-j (REJ: Reject). The receiver then moves its window
starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2he packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2CO318 - Systems and Network Programming Lab and Project II
Semester 6, Aug-Sep 2014
Project II: Developing a reliable data transfer protocol for computer networks
and investigating its performance
Project Details:
In this project, you are required to develop a hypothetical reliable data transfer protocol for
computer networks (using socket programming with C or other language) and to investigate its
performance. That is, you will be building a simulator for the reliable data transfer protocol,
which can be used for investigating its performance.
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announced later)
Report submission (not more than 10 pages for Part-I and Part-II): at the DEMO
Marks: Part-I = 60% and Part-II = 40% (based on the DEMO and the report)
Example-Problems (Solutions given)
1. Develop a socket program in UNIX/Linux that uses (i) TCP as the transport protocol and
(ii) UDP as the transport protocol for transferring a short message between a client and
server. The client sends a string (input by the user) to the server and the server prints the
string on the screen after receiving it.
2. Develop a TCP-based client-server socket program for transferring a large message. The
message transmitted from the client to server is read from a large file (size is about 30000
bytes). The entire message is sent by the client as a single data-unit. After receiving the
file, the server sends an ACK message to the receiver. Verify that the file has been sent
completely and correctly by comparing the received file with the original file (“diff”
command could be used). Measure the message transfer time and throughput.
3. This problem is similar to problem (2) above, but the message is split into short data-units
which are sent one by one without waiting for any acknowledgement between
transmissions of two successive data-units. Verify that the file has been sent completely
and correctly by comparing the received file with the original file. Measure the message
Page 1 of 2transfer time and throughput. Repeat it for different (at least six) data-unit sizes (say, from
100 bytes to 1000 bytes).
4. This problem is similar to problem (3) above, but it uses UDP as the transport protocol.
5. This problem is similar to problem (4) above, but the file is transferred using stop-and-
wait flow control protocol.
Project Assignment
Part-I
A hypothetical reliable data transfer protocol: A jumping window based Go-back-N
ARQ protocol for file transfer using UDP
In this protocol, a window of size W is used. The sender continuously sends W packets
corresponding to the current window, and then waits for an acknowledgement. The
receiver receives W packets. If all the packets are error-free, it sends out a positive
acknowledgement, say RR-i (RR: Receiver Ready). The receiver then moves its window
starting from the packet with the sequence number i. Upon receiving RR-i the sender
moves its window starting from the packet with the sequence number i. If a receiver
receives a damaged packet (say, with the sequence number j) in its current window, it
receives and discards all the remaining packets in the current window and it sends out a
negative acknowledgement, say REJ-j (REJ: Reject). The receiver then moves its window
starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2CO318 - Systems and Network Programming Lab and Project II
Semester 6, Aug-Sep 2014
Project II: Developing a reliable data transfer protocol for computer networks
and investigating its performance
Project Details:
In this project, you are required to develop a hypothetical reliable data transfer protocol for
computer networks (using socket programming with C or other language) and to investigate its
performance. That is, you will be building a simulator for the reliable data transfer protocol,
which can be used for investigating its performance.
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announced later)
Report submission (not more than 10 pages for Part-I and Part-II): at the DEMO
Marks: Part-I = 60% and Part-II = 40% (based on the DEMO and the report)
Example-Problems (Solutions given)
1. Develop a socket program in UNIX/Linux that uses (i) TCP as the transport protocol and
(ii) UDP as the transport protocol for transferring a short message between a client and
server. The client sends a string (input by the user) to the server and the server prints the
string on the screen after receiving it.
2. Develop a TCP-based client-server socket program for transferring a large message. The
message transmitted from the client to server is read from a large file (size is about 30000
bytes). The entire message is sent by the client as a single data-unit. After receiving the
file, the server sends an ACK message to the receiver. Verify that the file has been sent
completely and correctly by comparing the received file with the original file (“diff”
command could be used). Measure the message transfer time and throughput.
3. This problem is similar to problem (2) above, but the message is split into short data-units
which are sent one by one without waiting for any acknowledgement between
transmissions of two successive data-units. Verify that the file has been sent completely
and correctly by comparing the received file with the original file. Measure the message
Page 1 of 2transfer time and throughput. Repeat it for different (at least six) data-unit sizes (say, from
100 bytes to 1000 bytes).
4. This problem is similar to problem (3) above, but it uses UDP as the transport protocol.
5. This problem is similar to problem (4) above, but the file is transferred using stop-and-
wait flow control protocol.
Project Assignment
Part-I
A hypothetical reliable data transfer protocol: A jumping window based Go-back-N
ARQ protocol for file transfer using UDP
In this protocol, a window of size W is used. The sender continuously sends W packets
corresponding to the current window, and then waits for an acknowledgement. The
receiver receives W packets. If all the packets are error-free, it sends out a positive
acknowledgement, say RR-i (RR: Receiver Ready). The receiver then moves its window
starting from the packet with the sequence number i. Upon receiving RR-i the sender
moves its window starting from the packet with the sequence number i. If a receiver
receives a damaged packet (say, with the sequence number j) in its current window, it
receives and discards all the remaining packets in the current window and it sends out a
negative acknowledgement, say REJ-j (REJ: Reject). The receiver then moves its window
starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announced later)
Report submission (not more than 10 pages for Part-I and Part-II): at the DEMO
Marks: Part-I = 60% and Part-II = 40% (based on the DEMO and the report)
Example-Problems (Solutions given)
1. Develop a socket program in UNIX/Linux that uses (i) TCP as the transport protocol and
(ii) UDP as the transport protocol for transferring a short message between a client and
server. The client sends a string (input by the user) to the server and the server prints the
string on the screen after receiving it.
2. Develop a TCP-based client-server socket program for transferring a large message. The
message transmitted from the client to server is read from a large file (size is about 30000
bytes). The entire message is sent by the client as a single data-unit. After receiving the
file, the server sends an ACK message to the receiver. Verify that the file has been sent
completely and correctly by comparing the received file with the original file (“diff”
command could be used). Measure the message transfer time and throughput.
3. This problem is similar to problem (2) above, but the message is split into short data-units
which are sent one by one without waiting for any acknowledgement between
transmissions of two successive data-units. Verify that the file has been sent completely
and correctly by comparing the received file with the original file. Measure the message
Page 1 of 2transfer time and throughput. Repeat it for different (at least six) data-unit sizes (say, from
100 bytes to 1000 bytes).
4. This problem is similar to problem (3) above, but it uses UDP as the transport protocol.
5. This problem is similar to problem (4) above, but the file is transferred using stop-and-
wait flow control protocol.
Project Assignment
Part-I
A hypothetical reliable data transfer protocol: A jumping window based Go-back-N
ARQ protocol for file transfer using UDP
In this protocol, a window of size W is used. The sender continuously sends W packets
corresponding to the current window, and then waits for an acknowledgement. The
receiver receives W packets. If all the packets are error-free, it sends out a positive
acknowledgement, say RR-i (RR: Receiver Ready). The receiver then moves its window
starting from the packet with the sequence number i. Upon receiving RR-i the sender
moves its window starting from the packet with the sequence number i. If a receiver
receives a damaged packet (say, with the sequence number j) in its current window, it
receives and discards all the remaining packets in the current window and it sends out a
negative acknowledgement, say REJ-j (REJ: Reject). The receiver then moves its window
starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2CO318 - Systems and Network Programming Lab and Project II
Semester 6, Aug-Sep 2014
Project II: Developing a reliable data transfer protocol for computer networks
and investigating its performance
Project Details:
In this project, you are required to develop a hypothetical reliable data transfer protocol for
computer networks (using socket programming with C or other language) and to investigate its
performance. That is, you will be building a simulator for the reliable data transfer protocol,
which can be used for investigating its performance.
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announced later)
Report submission (not more than 10 pages for Part-I and Part-II): at the DEMO
Marks: Part-I = 60% and Part-II = 40% (based on the DEMO and the report)
Example-Problems (Solutions given)
1. Develop a socket program in UNIX/Linux that uses (i) TCP as the transport protocol and
(ii) UDP as the transport protocol for transferring a short message between a client and
server. The client sends a string (input by the user) to the server and the server prints the
string on the screen after receiving it.
2. Develop a TCP-based client-server socket program for transferring a large message. The
message transmitted from the client to server is read from a large file (size is about 30000
bytes). The entire message is sent by the client as a single data-unit. After receiving the
file, the server sends an ACK message to the receiver. Verify that the file has been sent
completely and correctly by comparing the received file with the original file (“diff”
command could be used). Measure the message transfer time and throughput.
3. This problem is similar to problem (2) above, but the message is split into short data-units
which are sent one by one without waiting for any acknowledgement between
transmissions of two successive data-units. Verify that the file has been sent completely
and correctly by comparing the received file with the original file. Measure the message
Page 1 of 2transfer time and throughput. Repeat it for different (at least six) data-unit sizes (say, from
100 bytes to 1000 bytes).
4. This problem is similar to problem (3) above, but it uses UDP as the transport protocol.
5. This problem is similar to problem (4) above, but the file is transferred using stop-and-
wait flow control protocol.
Project Assignment
Part-I
A hypothetical reliable data transfer protocol: A jumping window based Go-back-N
ARQ protocol for file transfer using UDP
In this protocol, a window of size W is used. The sender continuously sends W packets
corresponding to the current window, and then waits for an acknowledgement. The
receiver receives W packets. If all the packets are error-free, it sends out a positive
acknowledgement, say RR-i (RR: Receiver Ready). The receiver then moves its window
starting from the packet with the sequence number i. Upon receiving RR-i the sender
moves its window starting from the packet with the sequence number i. If a receiver
receives a damaged packet (say, with the sequence number j) in its current window, it
receives and discards all the remaining packets in the current window and it sends out a
negative acknowledgement, say REJ-j (REJ: Reject). The receiver then moves its window
starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2CO318 - Systems and Network Programming Lab and Project II
Semester 6, Aug-Sep 2014
Project II: Developing a reliable data transfer protocol for computer networks
and investigating its performance
Project Details:
In this project, you are required to develop a hypothetical reliable data transfer protocol for
computer networks (using socket programming with C or other language) and to investigate its
performance. That is, you will be building a simulator for the reliable data transfer protocol,
which can be used for investigating its performance.
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announced later)
Report submission (not more than 10 pages for Part-I and Part-II): at the DEMO
Marks: Part-I = 60% and Part-II = 40% (based on the DEMO and the report)
Example-Problems (Solutions given)
1. Develop a socket program in UNIX/Linux that uses (i) TCP as the transport protocol and
(ii) UDP as the transport protocol for transferring a short message between a client and
server. The client sends a string (input by the user) to the server and the server prints the
string on the screen after receiving it.
2. Develop a TCP-based client-server socket program for transferring a large message. The
message transmitted from the client to server is read from a large file (size is about 30000
bytes). The entire message is sent by the client as a single data-unit. After receiving the
file, the server sends an ACK message to the receiver. Verify that the file has been sent
completely and correctly by comparing the received file with the original file (“diff”
command could be used). Measure the message transfer time and throughput.
3. This problem is similar to problem (2) above, but the message is split into short data-units
which are sent one by one without waiting for any acknowledgement between
transmissions of two successive data-units. Verify that the file has been sent completely
and correctly by comparing the received file with the original file. Measure the message
Page 1 of 2transfer time and throughput. Repeat it for different (at least six) data-unit sizes (say, from
100 bytes to 1000 bytes).
4. This problem is similar to problem (3) above, but it uses UDP as the transport protocol.
5. This problem is similar to problem (4) above, but the file is transferred using stop-and-
wait flow control protocol.
Project Assignment
Part-I
A hypothetical reliable data transfer protocol: A jumping window based Go-back-N
ARQ protocol for file transfer using UDP
In this protocol, a window of size W is used. The sender continuously sends W packets
corresponding to the current window, and then waits for an acknowledgement. The
receiver receives W packets. If all the packets are error-free, it sends out a positive
acknowledgement, say RR-i (RR: Receiver Ready). The receiver then moves its window
starting from the packet with the sequence number i. Upon receiving RR-i the sender
moves its window starting from the packet with the sequence number i. If a receiver
receives a damaged packet (say, with the sequence number j) in its current window, it
receives and discards all the remaining packets in the current window and it sends out a
negative acknowledgement, say REJ-j (REJ: Reject). The receiver then moves its window
starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announced later)
Report submission (not more than 10 pages for Part-I and Part-II): at the DEMO
Marks: Part-I = 60% and Part-II = 40% (based on the DEMO and the report)
Example-Problems (Solutions given)
1. Develop a socket program in UNIX/Linux that uses (i) TCP as the transport protocol and
(ii) UDP as the transport protocol for transferring a short message between a client and
server. The client sends a string (input by the user) to the server and the server prints the
string on the screen after receiving it.
2. Develop a TCP-based client-server socket program for transferring a large message. The
message transmitted from the client to server is read from a large file (size is about 30000
bytes). The entire message is sent by the client as a single data-unit. After receiving the
file, the server sends an ACK message to the receiver. Verify that the file has been sent
completely and correctly by comparing the received file with the original file (“diff”
command could be used). Measure the message transfer time and throughput.
3. This problem is similar to problem (2) above, but the message is split into short data-units
which are sent one by one without waiting for any acknowledgement between
transmissions of two successive data-units. Verify that the file has been sent completely
and correctly by comparing the received file with the original file. Measure the message
Page 1 of 2transfer time and throughput. Repeat it for different (at least six) data-unit sizes (say, from
100 bytes to 1000 bytes).
4. This problem is similar to problem (3) above, but it uses UDP as the transport protocol.
5. This problem is similar to problem (4) above, but the file is transferred using stop-and-
wait flow control protocol.
Project Assignment
Part-I
A hypothetical reliable data transfer protocol: A jumping window based Go-back-N
ARQ protocol for file transfer using UDP
In this protocol, a window of size W is used. The sender continuously sends W packets
corresponding to the current window, and then waits for an acknowledgement. The
receiver receives W packets. If all the packets are error-free, it sends out a positive
acknowledgement, say RR-i (RR: Receiver Ready). The receiver then moves its window
starting from the packet with the sequence number i. Upon receiving RR-i the sender
moves its window starting from the packet with the sequence number i. If a receiver
receives a damaged packet (say, with the sequence number j) in its current window, it
receives and discards all the remaining packets in the current window and it sends out a
negative acknowledgement, say REJ-j (REJ: Reject). The receiver then moves its window
starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2CO318 - Systems and Network Programming Lab and Project II
Semester 6, Aug-Sep 2014
Project II: Developing a reliable data transfer protocol for computer networks
and investigating its performance
Project Details:
In this project, you are required to develop a hypothetical reliable data transfer protocol for
computer networks (using socket programming with C or other language) and to investigate its
performance. That is, you will be building a simulator for the reliable data transfer protocol,
which can be used for investigating its performance.
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announced later)
Report submission (not more than 10 pages for Part-I and Part-II): at the DEMO
Marks: Part-I = 60% and Part-II = 40% (based on the DEMO and the report)
Example-Problems (Solutions given)
1. Develop a socket program in UNIX/Linux that uses (i) TCP as the transport protocol and
(ii) UDP as the transport protocol for transferring a short message between a client and
server. The client sends a string (input by the user) to the server and the server prints the
string on the screen after receiving it.
2. Develop a TCP-based client-server socket program for transferring a large message. The
message transmitted from the client to server is read from a large file (size is about 30000
bytes). The entire message is sent by the client as a single data-unit. After receiving the
file, the server sends an ACK message to the receiver. Verify that the file has been sent
completely and correctly by comparing the received file with the original file (“diff”
command could be used). Measure the message transfer time and throughput.
3. This problem is similar to problem (2) above, but the message is split into short data-units
which are sent one by one without waiting for any acknowledgement between
transmissions of two successive data-units. Verify that the file has been sent completely
and correctly by comparing the received file with the original file. Measure the message
Page 1 of 2transfer time and throughput. Repeat it for different (at least six) data-unit sizes (say, from
100 bytes to 1000 bytes).
4. This problem is similar to problem (3) above, but it uses UDP as the transport protocol.
5. This problem is similar to problem (4) above, but the file is transferred using stop-and-
wait flow control protocol.
Project Assignment
Part-I
A hypothetical reliable data transfer protocol: A jumping window based Go-back-N
ARQ protocol for file transfer using UDP
In this protocol, a window of size W is used. The sender continuously sends W packets
corresponding to the current window, and then waits for an acknowledgement. The
receiver receives W packets. If all the packets are error-free, it sends out a positive
acknowledgement, say RR-i (RR: Receiver Ready). The receiver then moves its window
starting from the packet with the sequence number i. Upon receiving RR-i the sender
moves its window starting from the packet with the sequence number i. If a receiver
receives a damaged packet (say, with the sequence number j) in its current window, it
receives and discards all the remaining packets in the current window and it sends out a
negative acknowledgement, say REJ-j (REJ: Reject). The receiver then moves its window
starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2CO318 - Systems and Network Programming Lab and Project II
Semester 6, Aug-Sep 2014
Project II: Developing a reliable data transfer protocol for computer networks
and investigating its performance
Project Details:
In this project, you are required to develop a hypothetical reliable data transfer protocol for
computer networks (using socket programming with C or other language) and to investigate its
performance. That is, you will be building a simulator for the reliable data transfer protocol,
which can be used for investigating its performance.
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announced later)
Report submission (not more than 10 pages for Part-I and Part-II): at the DEMO
Marks: Part-I = 60% and Part-II = 40% (based on the DEMO and the report)
Example-Problems (Solutions given)
1. Develop a socket program in UNIX/Linux that uses (i) TCP as the transport protocol and
(ii) UDP as the transport protocol for transferring a short message between a client and
server. The client sends a string (input by the user) to the server and the server prints the
string on the screen after receiving it.
2. Develop a TCP-based client-server socket program for transferring a large message. The
message transmitted from the client to server is read from a large file (size is about 30000
bytes). The entire message is sent by the client as a single data-unit. After receiving the
file, the server sends an ACK message to the receiver. Verify that the file has been sent
completely and correctly by comparing the received file with the original file (“diff”
command could be used). Measure the message transfer time and throughput.
3. This problem is similar to problem (2) above, but the message is split into short data-units
which are sent one by one without waiting for any acknowledgement between
transmissions of two successive data-units. Verify that the file has been sent completely
and correctly by comparing the received file with the original file. Measure the message
Page 1 of 2transfer time and throughput. Repeat it for different (at least six) data-unit sizes (say, from
100 bytes to 1000 bytes).
4. This problem is similar to problem (3) above, but it uses UDP as the transport protocol.
5. This problem is similar to problem (4) above, but the file is transferred using stop-and-
wait flow control protocol.
Project Assignment
Part-I
A hypothetical reliable data transfer protocol: A jumping window based Go-back-N
ARQ protocol for file transfer using UDP
In this protocol, a window of size W is used. The sender continuously sends W packets
corresponding to the current window, and then waits for an acknowledgement. The
receiver receives W packets. If all the packets are error-free, it sends out a positive
acknowledgement, say RR-i (RR: Receiver Ready). The receiver then moves its window
starting from the packet with the sequence number i. Upon receiving RR-i the sender
moves its window starting from the packet with the sequence number i. If a receiver
receives a damaged packet (say, with the sequence number j) in its current window, it
receives and discards all the remaining packets in the current window and it sends out a
negative acknowledgement, say REJ-j (REJ: Reject). The receiver then moves its window
starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announced later)
Report submission (not more than 10 pages for Part-I and Part-II): at the DEMO
Marks: Part-I = 60% and Part-II = 40% (based on the DEMO and the report)
Example-Problems (Solutions given)
1. Develop a socket program in UNIX/Linux that uses (i) TCP as the transport protocol and
(ii) UDP as the transport protocol for transferring a short message between a client and
server. The client sends a string (input by the user) to the server and the server prints the
string on the screen after receiving it.
2. Develop a TCP-based client-server socket program for transferring a large message. The
message transmitted from the client to server is read from a large file (size is about 30000
bytes). The entire message is sent by the client as a single data-unit. After receiving the
file, the server sends an ACK message to the receiver. Verify that the file has been sent
completely and correctly by comparing the received file with the original file (“diff”
command could be used). Measure the message transfer time and throughput.
3. This problem is similar to problem (2) above, but the message is split into short data-units
which are sent one by one without waiting for any acknowledgement between
transmissions of two successive data-units. Verify that the file has been sent completely
and correctly by comparing the received file with the original file. Measure the message
Page 1 of 2transfer time and throughput. Repeat it for different (at least six) data-unit sizes (say, from
100 bytes to 1000 bytes).
4. This problem is similar to problem (3) above, but it uses UDP as the transport protocol.
5. This problem is similar to problem (4) above, but the file is transferred using stop-and-
wait flow control protocol.
Project Assignment
Part-I
A hypothetical reliable data transfer protocol: A jumping window based Go-back-N
ARQ protocol for file transfer using UDP
In this protocol, a window of size W is used. The sender continuously sends W packets
corresponding to the current window, and then waits for an acknowledgement. The
receiver receives W packets. If all the packets are error-free, it sends out a positive
acknowledgement, say RR-i (RR: Receiver Ready). The receiver then moves its window
starting from the packet with the sequence number i. Upon receiving RR-i the sender
moves its window starting from the packet with the sequence number i. If a receiver
receives a damaged packet (say, with the sequence number j) in its current window, it
receives and discards all the remaining packets in the current window and it sends out a
negative acknowledgement, say REJ-j (REJ: Reject). The receiver then moves its window
starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2CO318 - Systems and Network Programming Lab and Project II
Semester 6, Aug-Sep 2014
Project II: Developing a reliable data transfer protocol for computer networks
and investigating its performance
Project Details:
In this project, you are required to develop a hypothetical reliable data transfer protocol for
computer networks (using socket programming with C or other language) and to investigate its
performance. That is, you will be building a simulator for the reliable data transfer protocol,
which can be used for investigating its performance.
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announced later)
Report submission (not more than 10 pages for Part-I and Part-II): at the DEMO
Marks: Part-I = 60% and Part-II = 40% (based on the DEMO and the report)
Example-Problems (Solutions given)
1. Develop a socket program in UNIX/Linux that uses (i) TCP as the transport protocol and
(ii) UDP as the transport protocol for transferring a short message between a client and
server. The client sends a string (input by the user) to the server and the server prints the
string on the screen after receiving it.
2. Develop a TCP-based client-server socket program for transferring a large message. The
message transmitted from the client to server is read from a large file (size is about 30000
bytes). The entire message is sent by the client as a single data-unit. After receiving the
file, the server sends an ACK message to the receiver. Verify that the file has been sent
completely and correctly by comparing the received file with the original file (“diff”
command could be used). Measure the message transfer time and throughput.
3. This problem is similar to problem (2) above, but the message is split into short data-units
which are sent one by one without waiting for any acknowledgement between
transmissions of two successive data-units. Verify that the file has been sent completely
and correctly by comparing the received file with the original file. Measure the message
Page 1 of 2transfer time and throughput. Repeat it for different (at least six) data-unit sizes (say, from
100 bytes to 1000 bytes).
4. This problem is similar to problem (3) above, but it uses UDP as the transport protocol.
5. This problem is similar to problem (4) above, but the file is transferred using stop-and-
wait flow control protocol.
Project Assignment
Part-I
A hypothetical reliable data transfer protocol: A jumping window based Go-back-N
ARQ protocol for file transfer using UDP
In this protocol, a window of size W is used. The sender continuously sends W packets
corresponding to the current window, and then waits for an acknowledgement. The
receiver receives W packets. If all the packets are error-free, it sends out a positive
acknowledgement, say RR-i (RR: Receiver Ready). The receiver then moves its window
starting from the packet with the sequence number i. Upon receiving RR-i the sender
moves its window starting from the packet with the sequence number i. If a receiver
receives a damaged packet (say, with the sequence number j) in its current window, it
receives and discards all the remaining packets in the current window and it sends out a
negative acknowledgement, say REJ-j (REJ: Reject). The receiver then moves its window
starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2CO318 - Systems and Network Programming Lab and Project II
Semester 6, Aug-Sep 2014
Project II: Developing a reliable data transfer protocol for computer networks
and investigating its performance
Project Details:
In this project, you are required to develop a hypothetical reliable data transfer protocol for
computer networks (using socket programming with C or other language) and to investigate its
performance. That is, you will be building a simulator for the reliable data transfer protocol,
which can be used for investigating its performance.
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announced later)
Report submission (not more than 10 pages for Part-I and Part-II): at the DEMO
Marks: Part-I = 60% and Part-II = 40% (based on the DEMO and the report)
Example-Problems (Solutions given)
1. Develop a socket program in UNIX/Linux that uses (i) TCP as the transport protocol and
(ii) UDP as the transport protocol for transferring a short message between a client and
server. The client sends a string (input by the user) to the server and the server prints the
string on the screen after receiving it.
2. Develop a TCP-based client-server socket program for transferring a large message. The
message transmitted from the client to server is read from a large file (size is about 30000
bytes). The entire message is sent by the client as a single data-unit. After receiving the
file, the server sends an ACK message to the receiver. Verify that the file has been sent
completely and correctly by comparing the received file with the original file (“diff”
command could be used). Measure the message transfer time and throughput.
3. This problem is similar to problem (2) above, but the message is split into short data-units
which are sent one by one without waiting for any acknowledgement between
transmissions of two successive data-units. Verify that the file has been sent completely
and correctly by comparing the received file with the original file. Measure the message
Page 1 of 2transfer time and throughput. Repeat it for different (at least six) data-unit sizes (say, from
100 bytes to 1000 bytes).
4. This problem is similar to problem (3) above, but it uses UDP as the transport protocol.
5. This problem is similar to problem (4) above, but the file is transferred using stop-and-
wait flow control protocol.
Project Assignment
Part-I
A hypothetical reliable data transfer protocol: A jumping window based Go-back-N
ARQ protocol for file transfer using UDP
In this protocol, a window of size W is used. The sender continuously sends W packets
corresponding to the current window, and then waits for an acknowledgement. The
receiver receives W packets. If all the packets are error-free, it sends out a positive
acknowledgement, say RR-i (RR: Receiver Ready). The receiver then moves its window
starting from the packet with the sequence number i. Upon receiving RR-i the sender
moves its window starting from the packet with the sequence number i. If a receiver
receives a damaged packet (say, with the sequence number j) in its current window, it
receives and discards all the remaining packets in the current window and it sends out a
negative acknowledgement, say REJ-j (REJ: Reject). The receiver then moves its window
starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announced later)
Report submission (not more than 10 pages for Part-I and Part-II): at the DEMO
Marks: Part-I = 60% and Part-II = 40% (based on the DEMO and the report)
Example-Problems (Solutions given)
1. Develop a socket program in UNIX/Linux that uses (i) TCP as the transport protocol and
(ii) UDP as the transport protocol for transferring a short message between a client and
server. The client sends a string (input by the user) to the server and the server prints the
string on the screen after receiving it.
2. Develop a TCP-based client-server socket program for transferring a large message. The
message transmitted from the client to server is read from a large file (size is about 30000
bytes). The entire message is sent by the client as a single data-unit. After receiving the
file, the server sends an ACK message to the receiver. Verify that the file has been sent
completely and correctly by comparing the received file with the original file (“diff”
command could be used). Measure the message transfer time and throughput.
3. This problem is similar to problem (2) above, but the message is split into short data-units
which are sent one by one without waiting for any acknowledgement between
transmissions of two successive data-units. Verify that the file has been sent completely
and correctly by comparing the received file with the original file. Measure the message
Page 1 of 2transfer time and throughput. Repeat it for different (at least six) data-unit sizes (say, from
100 bytes to 1000 bytes).
4. This problem is similar to problem (3) above, but it uses UDP as the transport protocol.
5. This problem is similar to problem (4) above, but the file is transferred using stop-and-
wait flow control protocol.
Project Assignment
Part-I
A hypothetical reliable data transfer protocol: A jumping window based Go-back-N
ARQ protocol for file transfer using UDP
In this protocol, a window of size W is used. The sender continuously sends W packets
corresponding to the current window, and then waits for an acknowledgement. The
receiver receives W packets. If all the packets are error-free, it sends out a positive
acknowledgement, say RR-i (RR: Receiver Ready). The receiver then moves its window
starting from the packet with the sequence number i. Upon receiving RR-i the sender
moves its window starting from the packet with the sequence number i. If a receiver
receives a damaged packet (say, with the sequence number j) in its current window, it
receives and discards all the remaining packets in the current window and it sends out a
negative acknowledgement, say REJ-j (REJ: Reject). The receiver then moves its window
starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2CO318 - Systems and Network Programming Lab and Project II
Semester 6, Aug-Sep 2014
Project II: Developing a reliable data transfer protocol for computer networks
and investigating its performance
Project Details:
In this project, you are required to develop a hypothetical reliable data transfer protocol for
computer networks (using socket programming with C or other language) and to investigate its
performance. That is, you will be building a simulator for the reliable data transfer protocol,
which can be used for investigating its performance.
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announced later)
Report submission (not more than 10 pages for Part-I and Part-II): at the DEMO
Marks: Part-I = 60% and Part-II = 40% (based on the DEMO and the report)
Example-Problems (Solutions given)
1. Develop a socket program in UNIX/Linux that uses (i) TCP as the transport protocol and
(ii) UDP as the transport protocol for transferring a short message between a client and
server. The client sends a string (input by the user) to the server and the server prints the
string on the screen after receiving it.
2. Develop a TCP-based client-server socket program for transferring a large message. The
message transmitted from the client to server is read from a large file (size is about 30000
bytes). The entire message is sent by the client as a single data-unit. After receiving the
file, the server sends an ACK message to the receiver. Verify that the file has been sent
completely and correctly by comparing the received file with the original file (“diff”
command could be used). Measure the message transfer time and throughput.
3. This problem is similar to problem (2) above, but the message is split into short data-units
which are sent one by one without waiting for any acknowledgement between
transmissions of two successive data-units. Verify that the file has been sent completely
and correctly by comparing the received file with the original file. Measure the message
Page 1 of 2transfer time and throughput. Repeat it for different (at least six) data-unit sizes (say, from
100 bytes to 1000 bytes).
4. This problem is similar to problem (3) above, but it uses UDP as the transport protocol.
5. This problem is similar to problem (4) above, but the file is transferred using stop-and-
wait flow control protocol.
Project Assignment
Part-I
A hypothetical reliable data transfer protocol: A jumping window based Go-back-N
ARQ protocol for file transfer using UDP
In this protocol, a window of size W is used. The sender continuously sends W packets
corresponding to the current window, and then waits for an acknowledgement. The
receiver receives W packets. If all the packets are error-free, it sends out a positive
acknowledgement, say RR-i (RR: Receiver Ready). The receiver then moves its window
starting from the packet with the sequence number i. Upon receiving RR-i the sender
moves its window starting from the packet with the sequence number i. If a receiver
receives a damaged packet (say, with the sequence number j) in its current window, it
receives and discards all the remaining packets in the current window and it sends out a
negative acknowledgement, say REJ-j (REJ: Reject). The receiver then moves its window
starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2CO318 - Systems and Network Programming Lab and Project II
Semester 6, Aug-Sep 2014
Project II: Developing a reliable data transfer protocol for computer networks
and investigating its performance
Project Details:
In this project, you are required to develop a hypothetical reliable data transfer protocol for
computer networks (using socket programming with C or other language) and to investigate its
performance. That is, you will be building a simulator for the reliable data transfer protocol,
which can be used for investigating its performance.
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announced later)
Report submission (not more than 10 pages for Part-I and Part-II): at the DEMO
Marks: Part-I = 60% and Part-II = 40% (based on the DEMO and the report)
Example-Problems (Solutions given)
1. Develop a socket program in UNIX/Linux that uses (i) TCP as the transport protocol and
(ii) UDP as the transport protocol for transferring a short message between a client and
server. The client sends a string (input by the user) to the server and the server prints the
string on the screen after receiving it.
2. Develop a TCP-based client-server socket program for transferring a large message. The
message transmitted from the client to server is read from a large file (size is about 30000
bytes). The entire message is sent by the client as a single data-unit. After receiving the
file, the server sends an ACK message to the receiver. Verify that the file has been sent
completely and correctly by comparing the received file with the original file (“diff”
command could be used). Measure the message transfer time and throughput.
3. This problem is similar to problem (2) above, but the message is split into short data-units
which are sent one by one without waiting for any acknowledgement between
transmissions of two successive data-units. Verify that the file has been sent completely
and correctly by comparing the received file with the original file. Measure the message
Page 1 of 2transfer time and throughput. Repeat it for different (at least six) data-unit sizes (say, from
100 bytes to 1000 bytes).
4. This problem is similar to problem (3) above, but it uses UDP as the transport protocol.
5. This problem is similar to problem (4) above, but the file is transferred using stop-and-
wait flow control protocol.
Project Assignment
Part-I
A hypothetical reliable data transfer protocol: A jumping window based Go-back-N
ARQ protocol for file transfer using UDP
In this protocol, a window of size W is used. The sender continuously sends W packets
corresponding to the current window, and then waits for an acknowledgement. The
receiver receives W packets. If all the packets are error-free, it sends out a positive
acknowledgement, say RR-i (RR: Receiver Ready). The receiver then moves its window
starting from the packet with the sequence number i. Upon receiving RR-i the sender
moves its window starting from the packet with the sequence number i. If a receiver
receives a damaged packet (say, with the sequence number j) in its current window, it
receives and discards all the remaining packets in the current window and it sends out a
negative acknowledgement, say REJ-j (REJ: Reject). The receiver then moves its window
starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2
The project consists of two parts: Part-I and page-II (page 2). The hypothetical reliable
data transfer protocol is illustrated in Part-I. You are required to develop/implement the protocol
and carry out the performance study as specified in Part-I. Part-2 asks you to propose a method to
improve the performance of the protocol illustrated in Part-I, and to implement it.
Guidelines:
To assist you, example-problems (problems 1 to 5) and their solutions (in folders Ex1 to Ex5) are
given. You may go through these problems first, understand the solutions/codes, and run & verify
the programs. You may refer to the file “ExampleProblems_Info” for more details. Particularly,
you are strongly advised to recall the ‘principles of reliable data transfer’ that you learned in
CO311 to understand the essence of this project.
Instructions:
This is a group-project (according to the groups formed earlier for CO318)
Timeline:
Project-period: 4 weeks, 26 Aug – 16 Sep (come to the lab every week and do the project)
DEMO (part-I and part-II): after 16 Sep (to be announced later)
Report submission (not more than 10 pages for Part-I and Part-II): at the DEMO
Marks: Part-I = 60% and Part-II = 40% (based on the DEMO and the report)
Example-Problems (Solutions given)
1. Develop a socket program in UNIX/Linux that uses (i) TCP as the transport protocol and
(ii) UDP as the transport protocol for transferring a short message between a client and
server. The client sends a string (input by the user) to the server and the server prints the
string on the screen after receiving it.
2. Develop a TCP-based client-server socket program for transferring a large message. The
message transmitted from the client to server is read from a large file (size is about 30000
bytes). The entire message is sent by the client as a single data-unit. After receiving the
file, the server sends an ACK message to the receiver. Verify that the file has been sent
completely and correctly by comparing the received file with the original file (“diff”
command could be used). Measure the message transfer time and throughput.
3. This problem is similar to problem (2) above, but the message is split into short data-units
which are sent one by one without waiting for any acknowledgement between
transmissions of two successive data-units. Verify that the file has been sent completely
and correctly by comparing the received file with the original file. Measure the message
Page 1 of 2transfer time and throughput. Repeat it for different (at least six) data-unit sizes (say, from
100 bytes to 1000 bytes).
4. This problem is similar to problem (3) above, but it uses UDP as the transport protocol.
5. This problem is similar to problem (4) above, but the file is transferred using stop-and-
wait flow control protocol.
Project Assignment
Part-I
A hypothetical reliable data transfer protocol: A jumping window based Go-back-N
ARQ protocol for file transfer using UDP
In this protocol, a window of size W is used. The sender continuously sends W packets
corresponding to the current window, and then waits for an acknowledgement. The
receiver receives W packets. If all the packets are error-free, it sends out a positive
acknowledgement, say RR-i (RR: Receiver Ready). The receiver then moves its window
starting from the packet with the sequence number i. Upon receiving RR-i the sender
moves its window starting from the packet with the sequence number i. If a receiver
receives a damaged packet (say, with the sequence number j) in its current window, it
receives and discards all the remaining packets in the current window and it sends out a
negative acknowledgement, say REJ-j (REJ: Reject). The receiver then moves its window
starting from the packet with the sequence number j. Upon receiving REJ-j the sender
moves its window starting from the packet with the sequence number j and sends out
packets starting from j.
Assume that the packet sequence number is in the range from 0 to 7. For each packet, 100
bytes of data is sent. Assume that a packet can be damaged according to a specified packet
error probability. Ignore packet losses, ACK damages and losses. Implement the protocol,
and measure and plot the throughput for different values of W (1, 2, 3, 4, and 5) and for
different error probabilities in the range from 0 to 0.5 in steps of 0.1. Use the random
number generator to generate uniform distribution and declare a packet as damaged
according to the specified error probability. Write a Report describing your
implementation, how you carried out the performance study, performance graphs, and
discussion on results.
Part-II
Propose a method which is an improvement on the error-control approach illustrated in
Part-I above. Your method is to be used in file transfer using UDP as the transport
protocol. Illustrate your proposal with diagrams and descriptions. Your illustration should
include justification on how your method provides improvement over the method
illustrated in Part-I. Implement your method using Socket Programming. Note that, if you
propose a method with no implementation, you will receive no marks for Part-II.
Carry out a performance-study by measuring and plotting throughput as illustrated in Part-
I. In your performance-study, compare your results with that of Part-I. Include the
illustration of your method, implementation, and the performance-study with discussion in
your report.
Page 2 of 2